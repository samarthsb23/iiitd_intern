// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _find_HH_
#define _find_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct find : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<8> > val_r_TDATA;
    sc_in< sc_logic > val_r_TVALID;
    sc_out< sc_logic > val_r_TREADY;
    sc_in< sc_lv<32> > in_vec_TDATA;
    sc_in< sc_logic > in_vec_TVALID;
    sc_out< sc_logic > in_vec_TREADY;
    sc_in< sc_lv<1> > in_vec_TLAST;
    sc_out< sc_lv<32> > out_vec_TDATA;
    sc_out< sc_logic > out_vec_TVALID;
    sc_in< sc_logic > out_vec_TREADY;
    sc_out< sc_lv<1> > out_vec_TLAST;


    // Module declarations
    find(sc_module_name name);
    SC_HAS_PROCESS(find);

    ~find();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    regslice_both<8>* regslice_both_val_r_U;
    regslice_both<32>* regslice_both_in_vec_V_data_V_U;
    regslice_both<1>* regslice_both_in_vec_V_last_V_U;
    regslice_both<32>* regslice_both_out_vec_V_data_V_U;
    regslice_both<1>* regslice_both_out_vec_V_last_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > val_r_TDATA_blk_n;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_vec_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln16_fu_87_p2;
    sc_signal< sc_logic > out_vec_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > sext_ln9_fu_83_p1;
    sc_signal< sc_lv<32> > sext_ln9_reg_120;
    sc_signal< sc_lv<6> > i_fu_93_p2;
    sc_signal< sc_lv<6> > i_reg_128;
    sc_signal< sc_logic > regslice_both_out_vec_V_data_V_U_apdone_blk;
    sc_signal< bool > ap_block_state2;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<6> > i_0_reg_72;
    sc_signal< sc_lv<1> > icmp_ln879_fu_103_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > regslice_both_val_r_U_apdone_blk;
    sc_signal< sc_lv<8> > val_r_TDATA_int;
    sc_signal< sc_logic > val_r_TVALID_int;
    sc_signal< sc_logic > val_r_TREADY_int;
    sc_signal< sc_logic > regslice_both_val_r_U_ack_in;
    sc_signal< sc_logic > regslice_both_in_vec_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<32> > in_vec_TDATA_int;
    sc_signal< sc_logic > in_vec_TVALID_int;
    sc_signal< sc_logic > in_vec_TREADY_int;
    sc_signal< sc_logic > regslice_both_in_vec_V_data_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_in_vec_V_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > in_vec_TLAST_int;
    sc_signal< sc_logic > regslice_both_in_vec_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_in_vec_V_last_V_U_ack_in;
    sc_signal< sc_lv<32> > out_vec_TDATA_int;
    sc_signal< sc_logic > out_vec_TVALID_int;
    sc_signal< sc_logic > out_vec_TREADY_int;
    sc_signal< sc_logic > regslice_both_out_vec_V_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_out_vec_V_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > out_vec_TLAST_int;
    sc_signal< sc_logic > regslice_both_out_vec_V_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_out_vec_V_last_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_1F;
    static const sc_lv<1> ap_const_lv1_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state2();
    void thread_ap_block_state2_io();
    void thread_ap_rst_n_inv();
    void thread_i_fu_93_p2();
    void thread_icmp_ln16_fu_87_p2();
    void thread_icmp_ln879_fu_103_p2();
    void thread_in_vec_TDATA_blk_n();
    void thread_in_vec_TREADY();
    void thread_in_vec_TREADY_int();
    void thread_out_vec_TDATA_blk_n();
    void thread_out_vec_TDATA_int();
    void thread_out_vec_TLAST_int();
    void thread_out_vec_TVALID();
    void thread_out_vec_TVALID_int();
    void thread_sext_ln9_fu_83_p1();
    void thread_val_r_TDATA_blk_n();
    void thread_val_r_TREADY();
    void thread_val_r_TREADY_int();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
