// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matrixmul_8_unopt_matrixmul_8_unopt_Pipeline_loop_output_C2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_C_TREADY,
        mux_case_03821351,
        mux_case_13831357,
        mux_case_23841363,
        mux_case_33851369,
        mux_case_43861375,
        mux_case_53871381,
        mux_case_63881387,
        mux_case_73891393,
        mux_case_03911402,
        mux_case_13921408,
        mux_case_23931414,
        mux_case_33941420,
        mux_case_43951426,
        mux_case_53961432,
        mux_case_63971438,
        mux_case_73981444,
        mux_case_04001450,
        mux_case_14011456,
        mux_case_24021462,
        mux_case_34031468,
        mux_case_44041474,
        mux_case_54051480,
        mux_case_64061486,
        mux_case_74071492,
        mux_case_04091498,
        mux_case_14101504,
        mux_case_24111510,
        mux_case_34121516,
        mux_case_44131522,
        mux_case_54141528,
        mux_case_64151534,
        mux_case_74161540,
        mux_case_04181546,
        mux_case_14191552,
        mux_case_24201558,
        mux_case_34211564,
        mux_case_44221570,
        mux_case_54231576,
        mux_case_64241582,
        mux_case_74251588,
        mux_case_04271594,
        mux_case_14281600,
        mux_case_24291606,
        mux_case_34301612,
        mux_case_44311618,
        mux_case_54321624,
        mux_case_64331630,
        mux_case_74341636,
        mux_case_04361642,
        mux_case_14371648,
        mux_case_24381654,
        mux_case_34391660,
        mux_case_44401666,
        mux_case_54411672,
        mux_case_64421678,
        mux_case_74431684,
        mux_case_04451690,
        mux_case_14461696,
        mux_case_24471702,
        mux_case_34481708,
        mux_case_44491714,
        mux_case_54501720,
        mux_case_64511726,
        mux_case_74521732,
        cmp68,
        out_C_TDATA,
        out_C_TVALID,
        out_C_TKEEP,
        out_C_TSTRB,
        out_C_TLAST,
        row_3
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   out_C_TREADY;
input  [31:0] mux_case_03821351;
input  [31:0] mux_case_13831357;
input  [31:0] mux_case_23841363;
input  [31:0] mux_case_33851369;
input  [31:0] mux_case_43861375;
input  [31:0] mux_case_53871381;
input  [31:0] mux_case_63881387;
input  [31:0] mux_case_73891393;
input  [31:0] mux_case_03911402;
input  [31:0] mux_case_13921408;
input  [31:0] mux_case_23931414;
input  [31:0] mux_case_33941420;
input  [31:0] mux_case_43951426;
input  [31:0] mux_case_53961432;
input  [31:0] mux_case_63971438;
input  [31:0] mux_case_73981444;
input  [31:0] mux_case_04001450;
input  [31:0] mux_case_14011456;
input  [31:0] mux_case_24021462;
input  [31:0] mux_case_34031468;
input  [31:0] mux_case_44041474;
input  [31:0] mux_case_54051480;
input  [31:0] mux_case_64061486;
input  [31:0] mux_case_74071492;
input  [31:0] mux_case_04091498;
input  [31:0] mux_case_14101504;
input  [31:0] mux_case_24111510;
input  [31:0] mux_case_34121516;
input  [31:0] mux_case_44131522;
input  [31:0] mux_case_54141528;
input  [31:0] mux_case_64151534;
input  [31:0] mux_case_74161540;
input  [31:0] mux_case_04181546;
input  [31:0] mux_case_14191552;
input  [31:0] mux_case_24201558;
input  [31:0] mux_case_34211564;
input  [31:0] mux_case_44221570;
input  [31:0] mux_case_54231576;
input  [31:0] mux_case_64241582;
input  [31:0] mux_case_74251588;
input  [31:0] mux_case_04271594;
input  [31:0] mux_case_14281600;
input  [31:0] mux_case_24291606;
input  [31:0] mux_case_34301612;
input  [31:0] mux_case_44311618;
input  [31:0] mux_case_54321624;
input  [31:0] mux_case_64331630;
input  [31:0] mux_case_74341636;
input  [31:0] mux_case_04361642;
input  [31:0] mux_case_14371648;
input  [31:0] mux_case_24381654;
input  [31:0] mux_case_34391660;
input  [31:0] mux_case_44401666;
input  [31:0] mux_case_54411672;
input  [31:0] mux_case_64421678;
input  [31:0] mux_case_74431684;
input  [31:0] mux_case_04451690;
input  [31:0] mux_case_14461696;
input  [31:0] mux_case_24471702;
input  [31:0] mux_case_34481708;
input  [31:0] mux_case_44491714;
input  [31:0] mux_case_54501720;
input  [31:0] mux_case_64511726;
input  [31:0] mux_case_74521732;
input  [0:0] cmp68;
output  [31:0] out_C_TDATA;
output   out_C_TVALID;
output  [3:0] out_C_TKEEP;
output  [3:0] out_C_TSTRB;
output  [0:0] out_C_TLAST;
input  [2:0] row_3;

reg ap_idle;
reg out_C_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln55_fu_636_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    out_C_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
wire   [31:0] out_element_data_fu_972_p19;
reg   [31:0] out_element_data_reg_1046;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] out_element_last_fu_1018_p2;
reg   [0:0] out_element_last_reg_1051;
reg   [3:0] col_fu_210;
wire   [3:0] add_ln55_fu_642_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_col_1;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [31:0] tmp_8_fu_652_p17;
wire   [2:0] trunc_ln55_fu_648_p1;
wire   [31:0] tmp_9_fu_692_p17;
wire   [31:0] tmp_s_fu_732_p17;
wire   [31:0] tmp_1_fu_772_p17;
wire   [31:0] tmp_2_fu_812_p17;
wire   [31:0] tmp_3_fu_852_p17;
wire   [31:0] tmp_4_fu_892_p17;
wire   [31:0] tmp_5_fu_932_p17;
wire   [31:0] tmp_8_fu_652_p19;
wire   [31:0] tmp_9_fu_692_p19;
wire   [31:0] tmp_s_fu_732_p19;
wire   [31:0] tmp_1_fu_772_p19;
wire   [31:0] tmp_2_fu_812_p19;
wire   [31:0] tmp_3_fu_852_p19;
wire   [31:0] tmp_4_fu_892_p19;
wire   [31:0] tmp_5_fu_932_p19;
wire   [31:0] out_element_data_fu_972_p17;
wire   [0:0] icmp_ln63_fu_1012_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [2:0] tmp_8_fu_652_p1;
wire   [2:0] tmp_8_fu_652_p3;
wire   [2:0] tmp_8_fu_652_p5;
wire   [2:0] tmp_8_fu_652_p7;
wire  signed [2:0] tmp_8_fu_652_p9;
wire  signed [2:0] tmp_8_fu_652_p11;
wire  signed [2:0] tmp_8_fu_652_p13;
wire  signed [2:0] tmp_8_fu_652_p15;
wire   [2:0] tmp_9_fu_692_p1;
wire   [2:0] tmp_9_fu_692_p3;
wire   [2:0] tmp_9_fu_692_p5;
wire   [2:0] tmp_9_fu_692_p7;
wire  signed [2:0] tmp_9_fu_692_p9;
wire  signed [2:0] tmp_9_fu_692_p11;
wire  signed [2:0] tmp_9_fu_692_p13;
wire  signed [2:0] tmp_9_fu_692_p15;
wire   [2:0] tmp_s_fu_732_p1;
wire   [2:0] tmp_s_fu_732_p3;
wire   [2:0] tmp_s_fu_732_p5;
wire   [2:0] tmp_s_fu_732_p7;
wire  signed [2:0] tmp_s_fu_732_p9;
wire  signed [2:0] tmp_s_fu_732_p11;
wire  signed [2:0] tmp_s_fu_732_p13;
wire  signed [2:0] tmp_s_fu_732_p15;
wire   [2:0] tmp_1_fu_772_p1;
wire   [2:0] tmp_1_fu_772_p3;
wire   [2:0] tmp_1_fu_772_p5;
wire   [2:0] tmp_1_fu_772_p7;
wire  signed [2:0] tmp_1_fu_772_p9;
wire  signed [2:0] tmp_1_fu_772_p11;
wire  signed [2:0] tmp_1_fu_772_p13;
wire  signed [2:0] tmp_1_fu_772_p15;
wire   [2:0] tmp_2_fu_812_p1;
wire   [2:0] tmp_2_fu_812_p3;
wire   [2:0] tmp_2_fu_812_p5;
wire   [2:0] tmp_2_fu_812_p7;
wire  signed [2:0] tmp_2_fu_812_p9;
wire  signed [2:0] tmp_2_fu_812_p11;
wire  signed [2:0] tmp_2_fu_812_p13;
wire  signed [2:0] tmp_2_fu_812_p15;
wire   [2:0] tmp_3_fu_852_p1;
wire   [2:0] tmp_3_fu_852_p3;
wire   [2:0] tmp_3_fu_852_p5;
wire   [2:0] tmp_3_fu_852_p7;
wire  signed [2:0] tmp_3_fu_852_p9;
wire  signed [2:0] tmp_3_fu_852_p11;
wire  signed [2:0] tmp_3_fu_852_p13;
wire  signed [2:0] tmp_3_fu_852_p15;
wire   [2:0] tmp_4_fu_892_p1;
wire   [2:0] tmp_4_fu_892_p3;
wire   [2:0] tmp_4_fu_892_p5;
wire   [2:0] tmp_4_fu_892_p7;
wire  signed [2:0] tmp_4_fu_892_p9;
wire  signed [2:0] tmp_4_fu_892_p11;
wire  signed [2:0] tmp_4_fu_892_p13;
wire  signed [2:0] tmp_4_fu_892_p15;
wire   [2:0] tmp_5_fu_932_p1;
wire   [2:0] tmp_5_fu_932_p3;
wire   [2:0] tmp_5_fu_932_p5;
wire   [2:0] tmp_5_fu_932_p7;
wire  signed [2:0] tmp_5_fu_932_p9;
wire  signed [2:0] tmp_5_fu_932_p11;
wire  signed [2:0] tmp_5_fu_932_p13;
wire  signed [2:0] tmp_5_fu_932_p15;
wire   [2:0] out_element_data_fu_972_p1;
wire   [2:0] out_element_data_fu_972_p3;
wire   [2:0] out_element_data_fu_972_p5;
wire   [2:0] out_element_data_fu_972_p7;
wire  signed [2:0] out_element_data_fu_972_p9;
wire  signed [2:0] out_element_data_fu_972_p11;
wire  signed [2:0] out_element_data_fu_972_p13;
wire  signed [2:0] out_element_data_fu_972_p15;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 col_fu_210 = 4'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U228(
    .din0(mux_case_03821351),
    .din1(mux_case_13831357),
    .din2(mux_case_23841363),
    .din3(mux_case_33851369),
    .din4(mux_case_43861375),
    .din5(mux_case_53871381),
    .din6(mux_case_63881387),
    .din7(mux_case_73891393),
    .def(tmp_8_fu_652_p17),
    .sel(trunc_ln55_fu_648_p1),
    .dout(tmp_8_fu_652_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U229(
    .din0(mux_case_03911402),
    .din1(mux_case_13921408),
    .din2(mux_case_23931414),
    .din3(mux_case_33941420),
    .din4(mux_case_43951426),
    .din5(mux_case_53961432),
    .din6(mux_case_63971438),
    .din7(mux_case_73981444),
    .def(tmp_9_fu_692_p17),
    .sel(trunc_ln55_fu_648_p1),
    .dout(tmp_9_fu_692_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U230(
    .din0(mux_case_04001450),
    .din1(mux_case_14011456),
    .din2(mux_case_24021462),
    .din3(mux_case_34031468),
    .din4(mux_case_44041474),
    .din5(mux_case_54051480),
    .din6(mux_case_64061486),
    .din7(mux_case_74071492),
    .def(tmp_s_fu_732_p17),
    .sel(trunc_ln55_fu_648_p1),
    .dout(tmp_s_fu_732_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U231(
    .din0(mux_case_04091498),
    .din1(mux_case_14101504),
    .din2(mux_case_24111510),
    .din3(mux_case_34121516),
    .din4(mux_case_44131522),
    .din5(mux_case_54141528),
    .din6(mux_case_64151534),
    .din7(mux_case_74161540),
    .def(tmp_1_fu_772_p17),
    .sel(trunc_ln55_fu_648_p1),
    .dout(tmp_1_fu_772_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U232(
    .din0(mux_case_04181546),
    .din1(mux_case_14191552),
    .din2(mux_case_24201558),
    .din3(mux_case_34211564),
    .din4(mux_case_44221570),
    .din5(mux_case_54231576),
    .din6(mux_case_64241582),
    .din7(mux_case_74251588),
    .def(tmp_2_fu_812_p17),
    .sel(trunc_ln55_fu_648_p1),
    .dout(tmp_2_fu_812_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U233(
    .din0(mux_case_04271594),
    .din1(mux_case_14281600),
    .din2(mux_case_24291606),
    .din3(mux_case_34301612),
    .din4(mux_case_44311618),
    .din5(mux_case_54321624),
    .din6(mux_case_64331630),
    .din7(mux_case_74341636),
    .def(tmp_3_fu_852_p17),
    .sel(trunc_ln55_fu_648_p1),
    .dout(tmp_3_fu_852_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U234(
    .din0(mux_case_04361642),
    .din1(mux_case_14371648),
    .din2(mux_case_24381654),
    .din3(mux_case_34391660),
    .din4(mux_case_44401666),
    .din5(mux_case_54411672),
    .din6(mux_case_64421678),
    .din7(mux_case_74431684),
    .def(tmp_4_fu_892_p17),
    .sel(trunc_ln55_fu_648_p1),
    .dout(tmp_4_fu_892_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U235(
    .din0(mux_case_04451690),
    .din1(mux_case_14461696),
    .din2(mux_case_24471702),
    .din3(mux_case_34481708),
    .din4(mux_case_44491714),
    .din5(mux_case_54501720),
    .din6(mux_case_64511726),
    .din7(mux_case_74521732),
    .def(tmp_5_fu_932_p17),
    .sel(trunc_ln55_fu_648_p1),
    .dout(tmp_5_fu_932_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U236(
    .din0(tmp_8_fu_652_p19),
    .din1(tmp_9_fu_692_p19),
    .din2(tmp_s_fu_732_p19),
    .din3(tmp_1_fu_772_p19),
    .din4(tmp_2_fu_812_p19),
    .din5(tmp_3_fu_852_p19),
    .din6(tmp_4_fu_892_p19),
    .din7(tmp_5_fu_932_p19),
    .def(out_element_data_fu_972_p17),
    .sel(row_3),
    .dout(out_element_data_fu_972_p19)
);

matrixmul_8_unopt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln55_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            col_fu_210 <= add_ln55_fu_642_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            col_fu_210 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_element_data_reg_1046 <= out_element_data_fu_972_p19;
        out_element_last_reg_1051 <= out_element_last_fu_1018_p2;
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_636_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_col_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_col_1 = col_fu_210;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_C_TDATA_blk_n = out_C_TREADY;
    end else begin
        out_C_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_C_TVALID = 1'b1;
    end else begin
        out_C_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_642_p2 = (ap_sig_allocacmp_col_1 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((out_C_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((out_C_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((out_C_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((out_C_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln55_fu_636_p2 = ((ap_sig_allocacmp_col_1 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_1012_p2 = ((ap_sig_allocacmp_col_1 == 4'd7) ? 1'b1 : 1'b0);

assign out_C_TDATA = out_element_data_reg_1046;

assign out_C_TKEEP = 4'd15;

assign out_C_TLAST = out_element_last_reg_1051;

assign out_C_TSTRB = 'bx;

assign out_element_data_fu_972_p17 = 'bx;

assign out_element_last_fu_1018_p2 = (icmp_ln63_fu_1012_p2 & cmp68);

assign tmp_1_fu_772_p17 = 'bx;

assign tmp_2_fu_812_p17 = 'bx;

assign tmp_3_fu_852_p17 = 'bx;

assign tmp_4_fu_892_p17 = 'bx;

assign tmp_5_fu_932_p17 = 'bx;

assign tmp_8_fu_652_p17 = 'bx;

assign tmp_9_fu_692_p17 = 'bx;

assign tmp_s_fu_732_p17 = 'bx;

assign trunc_ln55_fu_648_p1 = ap_sig_allocacmp_col_1[2:0];

endmodule //matrixmul_8_unopt_matrixmul_8_unopt_Pipeline_loop_output_C2
