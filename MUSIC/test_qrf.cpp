#include "music.h"
#include <stdio.h>
#include <string>
#include <vector>
#include <fstream>
#include <vector>
#include <algorithm> //for find
#include <cmath>     // for abs
#include <iostream>
#include <limits>

using namespace std;

// Function to find two local maximas with maximum values in an array
void findLocalMaxima(DATA_2 arr[L], int pex[T]) {

    std::vector<int> maximaIndices;
    // Check each element except the first and last
    for (int i = 1; i < L - 1; ++i) {
        if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {
            maximaIndices.push_back(i);
        }
    }
    std::sort(maximaIndices.begin(), maximaIndices.end());

//    for (int i = 0; i < T; ++i){
    for (int i = 0; i < maximaIndices.size(); ++i){
        if (i < maximaIndices.size()) {
            pex[i] = maximaIndices[i];
        } else {
            pex[i] = 0;
        }
    }
}

int main() {

// Input data starts form here. comment out the packet size you want to use

    DATA_1 real_in[X] = {1.72415916e-02,  1.72045829e-02,  1.70964707e-02,  1.69194694e-02,   1.66724211e-02,  1.63570774e-02,  1.59724848e-02,  1.55179746e-02,   1.50153941e-02,  1.44446846e-02,  1.38167073e-02,  1.31441129e-02,   1.24142906e-02,  1.16484218e-02,  1.08396102e-02,  9.99512256e-03,   9.11739129e-03,  8.21064374e-03,  7.28857286e-03,  6.34830346e-03,   5.40356822e-03,  4.44252156e-03,  3.48203926e-03,  2.53081785e-03,   1.58616360e-03,  6.56657662e-04, -2.51782053e-04, -1.14502450e-03,  -2.00689644e-03, -2.83812158e-03, -3.63900983e-03, -4.39731902e-03,  -5.11631631e-03, -5.78886827e-03, -6.42034278e-03, -6.99944262e-03,  -7.53051670e-03, -8.00896647e-03, -8.43313561e-03, -8.80077726e-03,  -9.11501620e-03, -9.38258431e-03, -9.58966635e-03, -9.74959912e-03,  -9.85617103e-03, -9.91125952e-03, -9.92014714e-03, -9.88585772e-03,  -9.80052107e-03, -9.68260309e-03, -9.51621018e-03, -9.32493642e-03,  -9.09572014e-03, -8.84020221e-03, -8.56381842e-03, -8.25754692e-03,  -7.94202285e-03, -7.60674820e-03, -7.26406078e-03, -6.91508624e-03,  -6.56495724e-03, -6.21588919e-03, -5.87101782e-03, -5.53372223e-03,  -5.21166362e-03, -4.90356788e-03, -4.60806609e-03, -4.33326800e-03,  -4.08405462e-03, -3.85871253e-03, -3.64918070e-03, -3.48413992e-03,  -3.33051422e-03, -3.21413107e-03, -3.12949985e-03, -3.07223749e-03,  -3.04860097e-03, -3.05158901e-03, -3.08039325e-03, -3.14129134e-03,  -3.22971819e-03, -3.33182337e-03, -3.46858209e-03, -3.61984979e-03,  -3.79260178e-03, -3.97338060e-03, -4.17340833e-03, -4.37759313e-03,  -4.59491640e-03, -4.80833997e-03, -5.02310921e-03, -5.23752815e-03,  -5.43490387e-03, -5.62750293e-03, -5.80568472e-03, -5.95795013e-03,  -6.09885312e-03, -6.20020838e-03, -6.28658449e-03, -6.34072497e-03,  -6.36045765e-03, -6.34071667e-03, -6.28029466e-03, -6.18549966e-03,  -6.04745261e-03, -5.85902047e-03, -5.63623148e-03, -5.35709208e-03,  -5.04344687e-03, -4.67520948e-03, -4.26659806e-03, -3.80566879e-03,  -3.30501623e-03, -2.75715284e-03, -2.17500746e-03, -1.54950956e-03,  -8.92668907e-04, -1.92391760e-04,  5.30087145e-04,  1.28690694e-03,   2.06689789e-03,  2.86311050e-03,  3.68087160e-03,  4.50418975e-03,   5.34252509e-03,  6.17678200e-03,  7.01757270e-03,  7.84854754e-03,   8.66966696e-03,  9.46949821e-03,  1.02560726e-02,  1.10190673e-02,   1.17458316e-02,  1.24364099e-02,  1.30892790e-02,  1.37100373e-02,   1.42711461e-02,  1.47953427e-02,  1.52527550e-02,  1.56582110e-02,   1.59993451e-02,  1.62854330e-02,  1.64991660e-02,  1.66495616e-02,   1.67322307e-02,  1.67434030e-02,  1.66844860e-02,  1.65535304e-02,   1.63531043e-02,  1.60885687e-02,  1.57478616e-02,  1.53434476e-02,   1.48726091e-02,  1.43390522e-02,  1.37385859e-02,  1.30869608e-02,   1.23714888e-02,  1.16157816e-02,  1.08031551e-02,  9.95338559e-03,   9.06038380e-03,  8.13075506e-03,  7.17142931e-03,  6.18889078e-03,   5.18916270e-03,  4.17053733e-03,  3.14021969e-03,  2.10981233e-03,   1.07899949e-03,  5.28023325e-05, -9.67203524e-04, -1.96413101e-03,  -2.94410802e-03, -3.90172392e-03, -4.82053157e-03, -5.71419162e-03,  -6.56386935e-03, -7.37169216e-03, -8.13238977e-03, -8.85235467e-03,  -9.51782126e-03, -1.01226222e-02, -1.06742940e-02, -1.11685564e-02,  -1.16083378e-02, -1.19833878e-02, -1.22997037e-02, -1.25567922e-02,  -1.27538030e-02, -1.28822159e-02, -1.29486276e-02, -1.29691419e-02,  -1.29309873e-02, -1.28356630e-02, -1.26899428e-02, -1.24927911e-02,  -1.22397377e-02, -1.19557890e-02, -1.16305094e-02, -1.12671143e-02  };
    DATA_1 imag_in[X] = {1.93467189e-06,  1.05702873e-03,  2.11098470e-03,  3.15713861e-03,   4.18003931e-03,  5.18814142e-03,  6.16233169e-03,  7.11991462e-03,   8.03320509e-03,  8.90956395e-03,  9.73883578e-03,  1.05220932e-02,   1.12567176e-02,  1.19372478e-02,  1.25571498e-02,  1.31195357e-02,   1.36213696e-02,  1.40585198e-02,  1.44340687e-02,  1.47340879e-02,   1.49786410e-02,  1.51461158e-02,  1.52551655e-02,  1.52921691e-02,   1.52691546e-02,  1.51779839e-02,  1.50281934e-02,  1.48167055e-02,   1.45517511e-02,  1.42309708e-02,  1.38559168e-02,  1.34308228e-02,   1.29656471e-02,  1.24575193e-02,  1.19148674e-02,  1.13370012e-02,   1.07284032e-02,  1.00950821e-02,  9.44620300e-03,  8.77484633e-03,   8.10091136e-03,  7.42220688e-03,  6.73629796e-03,  6.04705672e-03,   5.37140076e-03,  4.70424017e-03,  4.04655140e-03,  3.41521134e-03,   2.80009337e-03,  2.20272921e-03,  1.64405205e-03,  1.10971676e-03,   6.02985768e-04,  1.36746174e-04, -2.95999813e-04, -6.90813428e-04,  -1.05394865e-03, -1.36901150e-03, -1.65113421e-03, -1.89049442e-03,  -2.09068549e-03, -2.26123154e-03, -2.39136036e-03, -2.48451838e-03,  -2.54411819e-03, -2.57644094e-03, -2.57218981e-03, -2.54334526e-03,  -2.48928016e-03, -2.41809775e-03, -2.32411634e-03, -2.21168896e-03,  -2.09032608e-03, -1.96054261e-03, -1.82800298e-03, -1.68775787e-03,  -1.55551995e-03, -1.41610431e-03, -1.29361425e-03, -1.18030523e-03,  -1.07673999e-03, -9.98023960e-04, -9.38869557e-04, -8.91573355e-04,  -8.73867270e-04, -8.89087349e-04, -9.25505690e-04, -9.93325122e-04,  -1.09265162e-03, -1.22522302e-03, -1.39467219e-03, -1.58933417e-03,  -1.82473316e-03, -2.08855457e-03, -2.38227238e-03, -2.71214217e-03,  -3.06460446e-03, -3.45567144e-03, -3.86261773e-03, -4.30050114e-03,  -4.75564148e-03, -5.23063374e-03, -5.71769173e-03, -6.21927090e-03,  -6.73040773e-03, -7.24533156e-03, -7.76355648e-03, -8.28038866e-03,  -8.78422375e-03, -9.27814398e-03, -9.76029713e-03, -1.02251997e-02,  -1.06640918e-02, -1.10694673e-02, -1.14551751e-02, -1.17998519e-02,  -1.21110814e-02, -1.23783116e-02, -1.25941448e-02, -1.27626550e-02,  -1.28825232e-02, -1.29545304e-02, -1.29679028e-02, -1.29288837e-02,  -1.28188330e-02, -1.26559108e-02, -1.24357579e-02, -1.21513018e-02,  -1.18052991e-02, -1.13981905e-02, -1.09292198e-02, -1.04062406e-02,  -9.82730884e-03, -9.19201431e-03, -8.50247783e-03, -7.76160753e-03,  -6.97460141e-03, -6.14659634e-03, -5.27265723e-03, -4.36100699e-03,  -3.42706093e-03, -2.45624844e-03, -1.46789093e-03, -4.57048721e-04,   5.60906891e-04,  1.58998210e-03,  2.62508025e-03,  3.65666036e-03,   4.67999394e-03,  5.69595619e-03,  6.68784044e-03,  7.65923569e-03,   8.60177126e-03,  9.51173256e-03,  1.03859453e-02,  1.12152138e-02,   1.19988858e-02,  1.27409294e-02,  1.34242446e-02,  1.40447364e-02,   1.46163487e-02,  1.51167849e-02,  1.55558714e-02,  1.59278923e-02,   1.62312041e-02,  1.64625588e-02,  1.66276946e-02,  1.67187339e-02,   1.67464511e-02,  1.66984077e-02,  1.65814340e-02,  1.63980612e-02,   1.61473026e-02,  1.58337773e-02,  1.54612857e-02,  1.50286225e-02,   1.45390694e-02,  1.39976855e-02,  1.34056790e-02,  1.27701443e-02,   1.20943026e-02,  1.13783560e-02,  1.06394166e-02,  9.86728784e-03,   9.06889017e-03,  8.26019018e-03,  7.43035801e-03,  6.59434886e-03,   5.76371801e-03,  4.92211935e-03,  4.09303012e-03,  3.27098541e-03,   2.46369786e-03,  1.67164749e-03,  9.03278365e-04,  1.65552114e-04,  -5.47217532e-04, -1.22370192e-03, -1.87114532e-03, -2.47037546e-03  };


////////////////////////////////////////////////////////////////////////////////////////////

// Golden Reference start from here for different packets and resolution

	DATA_2 gold_ref[L] = {1.17367904e-06, 1.21175191e-06, 1.23046607e-06, 1.22630273e-06,  1.19804610e-06, 1.14727370e-06, 1.07808501e-06, 9.96160023e-07,  9.07550557e-07, 8.17654042e-07, 7.30624555e-07, 6.49227292e-07,  5.74993930e-07, 5.08511962e-07, 4.49727102e-07, 3.98197038e-07,  3.53278274e-07, 3.14251134e-07, 2.80396513e-07, 2.51038672e-07,  2.25565818e-07, 2.03437065e-07, 1.84181598e-07, 1.67393746e-07,  1.52726255e-07, 1.39883070e-07, 1.28612353e-07, 1.18700083e-07,  1.09964387e-07, 1.02250614e-07, 9.54271300e-08, 8.93817338e-08,  8.40186484e-08, 7.92559855e-08, 7.50236222e-08, 7.12614230e-08,  6.79177511e-08, 6.49482232e-08, 6.23146664e-08, 5.99842443e-08,  5.79287254e-08, 5.61238695e-08, 5.45489140e-08, 5.31861436e-08,  5.20205315e-08, 5.10394406e-08, 5.02323756e-08, 4.95907807e-08,  4.91078750e-08, 4.87785217e-08, 4.85991277e-08, 4.85675703e-08,  4.86831486e-08, 4.89465574e-08, 4.93598842e-08, 4.99266258e-08,  5.06517260e-08, 5.15416339e-08, 5.26043818e-08, 5.38496843e-08,  5.52890577e-08, 5.69359599e-08, 5.88059516e-08, 6.09168765e-08,  6.32890606e-08, 6.59455268e-08, 6.89122207e-08, 7.22182409e-08,  7.58960643e-08, 7.99817512e-08, 8.45151109e-08, 8.95398020e-08,  9.51033322e-08, 1.01256914e-07, 1.08055122e-07, 1.15555286e-07,  1.23816549e-07, 1.32898514e-07, 1.42859406e-07, 1.53753689e-07,  1.65629136e-07, 1.78523375e-07, 1.92460072e-07, 2.07444987e-07,  2.23462311e-07, 2.40471821e-07, 2.58407490e-07, 2.77178217e-07,  2.96671250e-07, 3.16758620e-07, 3.37306538e-07, 3.58187213e-07,  3.79292136e-07, 4.00545550e-07, 4.21916798e-07, 4.43430437e-07,  4.65173528e-07, 4.87300057e-07, 5.10033082e-07, 5.33665654e-07,  5.58561817e-07, 5.85159160e-07, 6.13974345e-07, 6.45613047e-07,  6.80785800e-07, 7.20331471e-07, 7.65250557e-07, 8.16751371e-07,  8.76313500e-07, 9.45775046e-07, 1.02745338e-06, 1.12431424e-06,  1.24021200e-06, 1.38023717e-06, 1.55122893e-06, 1.76254829e-06,  2.02727393e-06, 2.36410509e-06, 2.80048938e-06, 3.37795963e-06,  4.16164618e-06, 5.25813157e-06, 6.85112095e-06, 9.27839893e-06,  1.32148353e-05, 2.01669394e-05, 3.40678897e-05, 6.79823610e-05,  1.88705911e-04, 1.46700788e-03, 2.90783722e-03, 2.69358661e-04,  9.83528767e-05, 5.24744585e-05, 3.36557195e-05, 2.41161015e-05,  1.86344985e-05, 1.52245058e-05, 1.29957915e-05, 1.15022876e-05,  1.05029879e-05, 9.86197992e-06, 9.50275641e-06, 9.38640729e-06,  9.50177705e-06, 9.86293646e-06, 1.05128965e-05, 1.15353179e-05,  1.30801395e-05, 1.54182531e-05, 1.90651123e-05, 2.50905527e-05,  3.60200327e-05, 5.90940967e-05, 1.23006678e-04, 4.52630908e-04,  1.00000000e+00, 4.26478454e-04, 9.93458334e-05, 4.17368230e-05,  2.23325813e-05, 1.36586772e-05, 9.09993232e-06, 6.43700498e-06,  4.76085474e-06, 3.64531371e-06, 2.87001302e-06, 2.31216826e-06,  1.89921760e-06, 1.58618425e-06, 1.34406740e-06, 1.15353565e-06,  1.00133212e-06, 8.78139789e-07, 7.77268783e-07, 6.93823952e-07,  6.24162797e-07, 5.65533943e-07, 5.15830890e-07, 4.73421069e-07,  4.37025119e-07, 4.05630302e-07, 3.78427507e-07, 3.54764826e-07,  3.34112928e-07, 3.16038950e-07, 3.00186601e-07, 2.86260871e-07,  2.74016162e-07, 2.63247007e-07, 2.53780755e-07, 2.45471767e-07,  2.38196774e-07, 2.31851149e-07, 2.26345891e-07, 2.21605167e-07,  2.17564309e-07, 2.14168164e-07, 2.11369730e-07, 2.09129029e-07  };

/////////////////////////////////////////////////////////////////////////////////////////////

	int error_num = 0;
    MATRIX_IN_T xn_input[X];
    DATA_2 xk_output[L];
	hls::stream<axis_data_in> xn_input_strm;
	hls::stream<axis_data_out> xk_output_strm;

	axis_data_in local_write;
    for(int i = 0; i<X; i++) {
        	xn_input[i] = MATRIX_IN_T(real_in[i],imag_in[i]);
        	local_write.data = xn_input[i];
        	local_write.last = ((i==(X-1))?1:0);
        	xn_input_strm.write(local_write);
        }

    MUSIC_top(xn_input_strm, xk_output_strm);

    axis_data_out local_read;
    for (int i=0; i< L; i++) {
		local_read = xk_output_strm.read();
		xk_output[i] = local_read.data;
		cout << xk_output[i] << endl;
    }


    // This code block compare two spectrums and match peaks in them.

//////////////////////////////////////////////////////////////////////////////////////

    int peaksPS[T];
    int peaksPL[T];
    DATA_2 temp1[L];
    DATA_2 temp2[L];
    for (int i=0; i< L; i++){
    	temp1[i] = 10*hls::log10(gold_ref[L-1-i]);
    	temp2[i] = 10*hls::log10(xk_output[i]);
    }

    // Find and print local maxima
    findLocalMaxima(temp1, peaksPS);
    findLocalMaxima(temp2, peaksPL);
    cout << "Peaks in PS are at index: " << peaksPS[0] << " and " << peaksPS[1] <<endl;
    cout << "Peaks in PL are at index: " << peaksPL[0] << " and " << peaksPL[1] <<endl;

    float er1 = 0;
    for (int i=0; i < L; i++){
    	float er2 = gold_ref[L-1-i] - xk_output[i];
    	er1 = er1 + (er2*er2);
    }
    cout<<"RMSE"<<sqrt(er1/200)<<endl;
    return 0;
}
