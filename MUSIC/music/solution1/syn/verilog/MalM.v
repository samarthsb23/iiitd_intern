// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MalM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_re_address0,
        A_re_ce0,
        A_re_q0,
        A_re_address1,
        A_re_ce1,
        A_re_q1,
        A_re_offset,
        A_im_address0,
        A_im_ce0,
        A_im_q0,
        A_im_address1,
        A_im_ce1,
        A_im_q1,
        A_im_offset,
        B_re_offset,
        B_im_offset,
        cos_theta_re,
        cos_theta_im,
        sin_theta_re,
        sin_theta_im,
        C_re_address0,
        C_re_ce0,
        C_re_we0,
        C_re_d0,
        C_im_address0,
        C_im_ce0,
        C_im_we0,
        C_im_d0,
        D_re_address0,
        D_re_ce0,
        D_re_we0,
        D_re_d0,
        D_im_address0,
        D_im_ce0,
        D_im_we0,
        D_im_d0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] A_re_address0;
output   A_re_ce0;
input  [63:0] A_re_q0;
output  [13:0] A_re_address1;
output   A_re_ce1;
input  [63:0] A_re_q1;
input  [6:0] A_re_offset;
output  [13:0] A_im_address0;
output   A_im_ce0;
input  [63:0] A_im_q0;
output  [13:0] A_im_address1;
output   A_im_ce1;
input  [63:0] A_im_q1;
input  [6:0] A_im_offset;
input  [31:0] B_re_offset;
input  [31:0] B_im_offset;
input  [63:0] cos_theta_re;
input  [63:0] cos_theta_im;
input  [63:0] sin_theta_re;
input  [63:0] sin_theta_im;
output  [6:0] C_re_address0;
output   C_re_ce0;
output   C_re_we0;
output  [63:0] C_re_d0;
output  [6:0] C_im_address0;
output   C_im_ce0;
output   C_im_we0;
output  [63:0] C_im_d0;
output  [6:0] D_re_address0;
output   D_re_ce0;
output   D_re_we0;
output  [63:0] D_re_d0;
output  [6:0] D_im_address0;
output   D_im_ce0;
output   D_im_we0;
output  [63:0] D_im_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_re_ce0;
reg A_re_ce1;
reg A_im_ce0;
reg A_im_ce1;
reg C_re_ce0;
reg C_re_we0;
reg C_im_ce0;
reg C_im_we0;
reg D_re_ce0;
reg D_re_we0;
reg D_im_ce0;
reg D_im_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [14:0] mul_ln71_fu_454_p2;
reg  signed [14:0] mul_ln71_reg_494;
wire  signed [14:0] mul_ln71_1_fu_460_p2;
reg  signed [14:0] mul_ln71_1_reg_499;
wire   [13:0] mul_ln71_2_fu_342_p2;
reg   [13:0] mul_ln71_2_reg_504;
wire   [13:0] mul_ln71_3_fu_352_p2;
reg   [13:0] mul_ln71_3_reg_509;
wire   [63:0] tmp_re_fu_368_p1;
reg   [63:0] tmp_re_reg_514;
wire   [63:0] tmp_im_fu_382_p1;
reg   [63:0] tmp_im_reg_520;
wire   [6:0] i_fu_392_p2;
reg   [6:0] i_reg_529;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln70_fu_386_p2;
wire    ap_CS_fsm_state3;
wire   [63:0] grp_fu_250_p2;
reg   [63:0] m1_reg_586;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_255_p2;
reg   [63:0] m2_reg_591;
wire   [63:0] grp_fu_260_p2;
reg   [63:0] m3_reg_596;
wire   [63:0] grp_fu_265_p2;
reg   [63:0] m4_reg_601;
wire   [63:0] grp_fu_270_p2;
reg   [63:0] m1_5_reg_606;
wire   [63:0] grp_fu_275_p2;
reg   [63:0] m2_5_reg_611;
wire   [63:0] grp_fu_280_p2;
reg   [63:0] m3_4_reg_616;
wire   [63:0] grp_fu_285_p2;
reg   [63:0] m4_4_reg_621;
wire   [63:0] grp_fu_290_p2;
reg   [63:0] m1_6_reg_626;
wire   [63:0] grp_fu_295_p2;
reg   [63:0] m2_6_reg_631;
wire   [63:0] grp_fu_300_p2;
reg   [63:0] m3_5_reg_636;
wire   [63:0] grp_fu_305_p2;
reg   [63:0] m4_5_reg_641;
wire   [63:0] grp_fu_310_p2;
reg   [63:0] m1_7_reg_646;
wire   [63:0] grp_fu_315_p2;
reg   [63:0] m2_7_reg_651;
wire   [63:0] grp_fu_320_p2;
reg   [63:0] m3_6_reg_656;
wire   [63:0] grp_fu_325_p2;
reg   [63:0] m4_6_reg_661;
wire   [63:0] grp_fu_214_p2;
reg   [63:0] sum_re_reg_666;
wire    ap_CS_fsm_state12;
wire   [63:0] grp_fu_218_p2;
reg   [63:0] sum_im_reg_671;
wire   [63:0] grp_fu_222_p2;
reg   [63:0] sum_re_5_reg_676;
wire   [63:0] grp_fu_226_p2;
reg   [63:0] sum_im_4_reg_681;
wire   [63:0] grp_fu_230_p2;
reg   [63:0] sum_re_6_reg_686;
wire   [63:0] grp_fu_234_p2;
reg   [63:0] sum_im_5_reg_691;
wire   [63:0] grp_fu_238_p2;
reg   [63:0] sum_re_7_reg_696;
wire   [63:0] grp_fu_242_p2;
reg   [63:0] sum_im_6_reg_701;
reg   [6:0] i_0_reg_202;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln71_5_fu_411_p1;
wire  signed [63:0] sext_ln71_fu_421_p1;
wire   [63:0] zext_ln71_6_fu_431_p1;
wire  signed [63:0] sext_ln71_1_fu_441_p1;
wire   [63:0] zext_ln71_fu_446_p1;
reg   [63:0] grp_fu_214_p0;
reg   [63:0] grp_fu_214_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
reg   [63:0] grp_fu_218_p0;
reg   [63:0] grp_fu_218_p1;
reg   [63:0] grp_fu_222_p0;
reg   [63:0] grp_fu_222_p1;
reg   [63:0] grp_fu_226_p0;
reg   [63:0] grp_fu_226_p1;
wire   [6:0] mul_ln71_2_fu_342_p1;
wire   [6:0] mul_ln71_3_fu_352_p1;
wire   [63:0] bitcast_ln211_fu_358_p1;
wire   [63:0] xor_ln211_fu_362_p2;
wire   [63:0] bitcast_ln212_fu_372_p1;
wire   [63:0] xor_ln212_fu_376_p2;
wire   [13:0] zext_ln71_4_fu_402_p1;
wire   [13:0] add_ln71_fu_406_p2;
wire   [14:0] zext_ln71_3_fu_398_p1;
(* use_dsp48 = "no" *) wire   [14:0] add_ln71_1_fu_416_p2;
wire   [13:0] add_ln71_2_fu_426_p2;
(* use_dsp48 = "no" *) wire   [14:0] add_ln71_3_fu_436_p2;
wire   [7:0] mul_ln71_fu_454_p0;
wire  signed [14:0] mul_ln71_fu_454_p1;
wire   [7:0] mul_ln71_1_fu_460_p0;
wire  signed [14:0] mul_ln71_1_fu_460_p1;
reg   [1:0] grp_fu_214_opcode;
reg   [1:0] grp_fu_222_opcode;
reg   [16:0] ap_NS_fsm;
wire   [13:0] mul_ln71_2_fu_342_p10;
wire   [13:0] mul_ln71_3_fu_352_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

MUSIC_top_dadddsubkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dadddsubkb_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_214_p0),
    .din1(grp_fu_214_p1),
    .opcode(grp_fu_214_opcode),
    .ce(1'b1),
    .dout(grp_fu_214_p2)
);

MUSIC_top_dadd_64cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dadd_64cud_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_218_p0),
    .din1(grp_fu_218_p1),
    .ce(1'b1),
    .dout(grp_fu_218_p2)
);

MUSIC_top_dadddsubkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dadddsubkb_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_222_p0),
    .din1(grp_fu_222_p1),
    .opcode(grp_fu_222_opcode),
    .ce(1'b1),
    .dout(grp_fu_222_p2)
);

MUSIC_top_dadd_64cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dadd_64cud_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_226_p0),
    .din1(grp_fu_226_p1),
    .ce(1'b1),
    .dout(grp_fu_226_p2)
);

MUSIC_top_dsub_64fYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dsub_64fYi_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(m1_6_reg_626),
    .din1(m2_6_reg_631),
    .ce(1'b1),
    .dout(grp_fu_230_p2)
);

MUSIC_top_dadd_64cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dadd_64cud_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(m3_5_reg_636),
    .din1(m4_5_reg_641),
    .ce(1'b1),
    .dout(grp_fu_234_p2)
);

MUSIC_top_dsub_64fYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dsub_64fYi_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(m1_7_reg_646),
    .din1(m2_7_reg_651),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

MUSIC_top_dadd_64cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dadd_64cud_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(m3_6_reg_656),
    .din1(m4_6_reg_661),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_re_q0),
    .din1(cos_theta_re),
    .ce(1'b1),
    .dout(grp_fu_250_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_im_q0),
    .din1(cos_theta_im),
    .ce(1'b1),
    .dout(grp_fu_255_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_re_q0),
    .din1(cos_theta_im),
    .ce(1'b1),
    .dout(grp_fu_260_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_im_q0),
    .din1(cos_theta_re),
    .ce(1'b1),
    .dout(grp_fu_265_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_re_reg_514),
    .din1(A_re_q1),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_im_reg_520),
    .din1(A_im_q1),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_im_reg_520),
    .din1(A_re_q1),
    .ce(1'b1),
    .dout(grp_fu_280_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_re_reg_514),
    .din1(A_im_q1),
    .ce(1'b1),
    .dout(grp_fu_285_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_re_q0),
    .din1(sin_theta_re),
    .ce(1'b1),
    .dout(grp_fu_290_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_im_q0),
    .din1(sin_theta_im),
    .ce(1'b1),
    .dout(grp_fu_295_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_re_q0),
    .din1(sin_theta_im),
    .ce(1'b1),
    .dout(grp_fu_300_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_im_q0),
    .din1(sin_theta_re),
    .ce(1'b1),
    .dout(grp_fu_305_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_re_q1),
    .din1(cos_theta_re),
    .ce(1'b1),
    .dout(grp_fu_310_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_im_q1),
    .din1(cos_theta_im),
    .ce(1'b1),
    .dout(grp_fu_315_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_re_q1),
    .din1(cos_theta_im),
    .ce(1'b1),
    .dout(grp_fu_320_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_im_q1),
    .din1(cos_theta_re),
    .ce(1'b1),
    .dout(grp_fu_325_p2)
);

MUSIC_top_mul_mulg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
MUSIC_top_mul_mulg8j_U45(
    .din0(mul_ln71_fu_454_p0),
    .din1(mul_ln71_fu_454_p1),
    .dout(mul_ln71_fu_454_p2)
);

MUSIC_top_mul_mulg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
MUSIC_top_mul_mulg8j_U46(
    .din0(mul_ln71_1_fu_460_p0),
    .din1(mul_ln71_1_fu_460_p1),
    .dout(mul_ln71_1_fu_460_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_0_reg_202 <= i_reg_529;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_202 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_529 <= i_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m1_5_reg_606 <= grp_fu_270_p2;
        m1_6_reg_626 <= grp_fu_290_p2;
        m1_7_reg_646 <= grp_fu_310_p2;
        m1_reg_586 <= grp_fu_250_p2;
        m2_5_reg_611 <= grp_fu_275_p2;
        m2_6_reg_631 <= grp_fu_295_p2;
        m2_7_reg_651 <= grp_fu_315_p2;
        m2_reg_591 <= grp_fu_255_p2;
        m3_4_reg_616 <= grp_fu_280_p2;
        m3_5_reg_636 <= grp_fu_300_p2;
        m3_6_reg_656 <= grp_fu_320_p2;
        m3_reg_596 <= grp_fu_260_p2;
        m4_4_reg_621 <= grp_fu_285_p2;
        m4_5_reg_641 <= grp_fu_305_p2;
        m4_6_reg_661 <= grp_fu_325_p2;
        m4_reg_601 <= grp_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln71_1_reg_499 <= mul_ln71_1_fu_460_p2;
        mul_ln71_2_reg_504 <= mul_ln71_2_fu_342_p2;
        mul_ln71_3_reg_509 <= mul_ln71_3_fu_352_p2;
        mul_ln71_reg_494 <= mul_ln71_fu_454_p2;
        tmp_im_reg_520 <= tmp_im_fu_382_p1;
        tmp_re_reg_514 <= tmp_re_fu_368_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_im_4_reg_681 <= grp_fu_226_p2;
        sum_im_5_reg_691 <= grp_fu_234_p2;
        sum_im_6_reg_701 <= grp_fu_242_p2;
        sum_im_reg_671 <= grp_fu_218_p2;
        sum_re_5_reg_676 <= grp_fu_222_p2;
        sum_re_6_reg_686 <= grp_fu_230_p2;
        sum_re_7_reg_696 <= grp_fu_238_p2;
        sum_re_reg_666 <= grp_fu_214_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_im_ce0 = 1'b1;
    end else begin
        A_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_im_ce1 = 1'b1;
    end else begin
        A_im_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_re_ce0 = 1'b1;
    end else begin
        A_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_re_ce1 = 1'b1;
    end else begin
        A_re_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        C_im_ce0 = 1'b1;
    end else begin
        C_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        C_im_we0 = 1'b1;
    end else begin
        C_im_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        C_re_ce0 = 1'b1;
    end else begin
        C_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        C_re_we0 = 1'b1;
    end else begin
        C_re_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        D_im_ce0 = 1'b1;
    end else begin
        D_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        D_im_we0 = 1'b1;
    end else begin
        D_im_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        D_re_ce0 = 1'b1;
    end else begin
        D_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        D_re_we0 = 1'b1;
    end else begin
        D_re_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln70_fu_386_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln70_fu_386_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_214_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_214_opcode = 2'd0;
    end else begin
        grp_fu_214_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_214_p0 = sum_re_5_reg_676;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_214_p0 = m1_reg_586;
    end else begin
        grp_fu_214_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_214_p1 = sum_re_reg_666;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_214_p1 = m2_reg_591;
    end else begin
        grp_fu_214_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_218_p0 = sum_im_4_reg_681;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_218_p0 = m3_reg_596;
    end else begin
        grp_fu_218_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_218_p1 = sum_im_reg_671;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_218_p1 = m4_reg_601;
    end else begin
        grp_fu_218_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_222_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_222_opcode = 2'd0;
    end else begin
        grp_fu_222_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_222_p0 = sum_re_7_reg_696;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_222_p0 = m1_5_reg_606;
    end else begin
        grp_fu_222_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_222_p1 = sum_re_6_reg_686;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_222_p1 = m2_5_reg_611;
    end else begin
        grp_fu_222_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_226_p0 = sum_im_6_reg_701;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_226_p0 = m3_4_reg_616;
    end else begin
        grp_fu_226_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_226_p1 = sum_im_5_reg_691;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_226_p1 = m4_4_reg_621;
    end else begin
        grp_fu_226_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln70_fu_386_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_im_address0 = zext_ln71_6_fu_431_p1;

assign A_im_address1 = sext_ln71_1_fu_441_p1;

assign A_re_address0 = zext_ln71_5_fu_411_p1;

assign A_re_address1 = sext_ln71_fu_421_p1;

assign C_im_address0 = zext_ln71_fu_446_p1;

assign C_im_d0 = grp_fu_218_p2;

assign C_re_address0 = zext_ln71_fu_446_p1;

assign C_re_d0 = grp_fu_214_p2;

assign D_im_address0 = zext_ln71_fu_446_p1;

assign D_im_d0 = grp_fu_226_p2;

assign D_re_address0 = zext_ln71_fu_446_p1;

assign D_re_d0 = grp_fu_222_p2;

assign add_ln71_1_fu_416_p2 = ($signed(mul_ln71_1_reg_499) + $signed(zext_ln71_3_fu_398_p1));

assign add_ln71_2_fu_426_p2 = (mul_ln71_2_reg_504 + zext_ln71_4_fu_402_p1);

assign add_ln71_3_fu_436_p2 = ($signed(mul_ln71_reg_494) + $signed(zext_ln71_3_fu_398_p1));

assign add_ln71_fu_406_p2 = (mul_ln71_3_reg_509 + zext_ln71_4_fu_402_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln211_fu_358_p1 = sin_theta_re;

assign bitcast_ln212_fu_372_p1 = sin_theta_im;

assign i_fu_392_p2 = (i_0_reg_202 + 7'd1);

assign icmp_ln70_fu_386_p2 = ((i_0_reg_202 == 7'd100) ? 1'b1 : 1'b0);

assign mul_ln71_1_fu_460_p0 = 15'd100;

assign mul_ln71_1_fu_460_p1 = B_re_offset[14:0];

assign mul_ln71_2_fu_342_p1 = mul_ln71_2_fu_342_p10;

assign mul_ln71_2_fu_342_p10 = A_im_offset;

assign mul_ln71_2_fu_342_p2 = (14'd100 * mul_ln71_2_fu_342_p1);

assign mul_ln71_3_fu_352_p1 = mul_ln71_3_fu_352_p10;

assign mul_ln71_3_fu_352_p10 = A_re_offset;

assign mul_ln71_3_fu_352_p2 = (14'd100 * mul_ln71_3_fu_352_p1);

assign mul_ln71_fu_454_p0 = 15'd100;

assign mul_ln71_fu_454_p1 = B_im_offset[14:0];

assign sext_ln71_1_fu_441_p1 = $signed(add_ln71_3_fu_436_p2);

assign sext_ln71_fu_421_p1 = $signed(add_ln71_1_fu_416_p2);

assign tmp_im_fu_382_p1 = xor_ln212_fu_376_p2;

assign tmp_re_fu_368_p1 = xor_ln211_fu_362_p2;

assign xor_ln211_fu_362_p2 = (bitcast_ln211_fu_358_p1 ^ 64'd9223372036854775808);

assign xor_ln212_fu_376_p2 = (bitcast_ln212_fu_372_p1 ^ 64'd9223372036854775808);

assign zext_ln71_3_fu_398_p1 = i_0_reg_202;

assign zext_ln71_4_fu_402_p1 = i_0_reg_202;

assign zext_ln71_5_fu_411_p1 = add_ln71_fu_406_p2;

assign zext_ln71_6_fu_431_p1 = add_ln71_2_fu_426_p2;

assign zext_ln71_fu_446_p1 = i_0_reg_202;

endmodule //MalM
