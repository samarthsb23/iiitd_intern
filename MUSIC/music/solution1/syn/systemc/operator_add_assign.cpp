// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "operator_add_assign.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic operator_add_assign::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic operator_add_assign::ap_const_logic_0 = sc_dt::Log_0;
const bool operator_add_assign::ap_const_boolean_1 = true;
const bool operator_add_assign::ap_const_boolean_0 = false;

operator_add_assign::operator_add_assign(sc_module_name name) : sc_module(name), mVcdFile(0) {
    MUSIC_top_fadd_32lbW_U308 = new MUSIC_top_fadd_32lbW<1,4,32,32,32>("MUSIC_top_fadd_32lbW_U308");
    MUSIC_top_fadd_32lbW_U308->clk(ap_clk);
    MUSIC_top_fadd_32lbW_U308->reset(ap_rst);
    MUSIC_top_fadd_32lbW_U308->din0(rhs_re_read_int_reg);
    MUSIC_top_fadd_32lbW_U308->din1(x_complex_float_re_read_int_reg);
    MUSIC_top_fadd_32lbW_U308->ce(grp_fu_36_ce);
    MUSIC_top_fadd_32lbW_U308->dout(grp_fu_36_p2);
    MUSIC_top_fadd_32lbW_U309 = new MUSIC_top_fadd_32lbW<1,4,32,32,32>("MUSIC_top_fadd_32lbW_U309");
    MUSIC_top_fadd_32lbW_U309->clk(ap_clk);
    MUSIC_top_fadd_32lbW_U309->reset(ap_rst);
    MUSIC_top_fadd_32lbW_U309->din0(rhs_im_read_int_reg);
    MUSIC_top_fadd_32lbW_U309->din1(x_complex_float_im_read_int_reg);
    MUSIC_top_fadd_32lbW_U309->ce(grp_fu_42_ce);
    MUSIC_top_fadd_32lbW_U309->dout(grp_fu_42_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_return_0);
    sensitive << ( grp_fu_36_p2 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_0_int_reg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( grp_fu_42_p2 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_1_int_reg );

    SC_METHOD(thread_grp_fu_36_ce);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce_reg );

    SC_METHOD(thread_grp_fu_42_ce);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce_reg );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "operator_add_assign_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, x_complex_float_re_read, "(port)x_complex_float_re_read");
    sc_trace(mVcdFile, x_complex_float_im_read, "(port)x_complex_float_im_read");
    sc_trace(mVcdFile, rhs_re_read, "(port)rhs_re_read");
    sc_trace(mVcdFile, rhs_im_read, "(port)rhs_im_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, grp_fu_36_p2, "grp_fu_36_p2");
    sc_trace(mVcdFile, grp_fu_42_p2, "grp_fu_42_p2");
    sc_trace(mVcdFile, grp_fu_36_ce, "grp_fu_36_ce");
    sc_trace(mVcdFile, grp_fu_42_ce, "grp_fu_42_ce");
    sc_trace(mVcdFile, ap_ce_reg, "ap_ce_reg");
    sc_trace(mVcdFile, x_complex_float_re_read_int_reg, "x_complex_float_re_read_int_reg");
    sc_trace(mVcdFile, x_complex_float_im_read_int_reg, "x_complex_float_im_read_int_reg");
    sc_trace(mVcdFile, rhs_re_read_int_reg, "rhs_re_read_int_reg");
    sc_trace(mVcdFile, rhs_im_read_int_reg, "rhs_im_read_int_reg");
    sc_trace(mVcdFile, ap_return_0_int_reg, "ap_return_0_int_reg");
    sc_trace(mVcdFile, ap_return_1_int_reg, "ap_return_1_int_reg");
#endif

    }
}

operator_add_assign::~operator_add_assign() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete MUSIC_top_fadd_32lbW_U308;
    delete MUSIC_top_fadd_32lbW_U309;
}

void operator_add_assign::thread_ap_clk_no_reset_() {
    ap_ce_reg = ap_ce.read();
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_0_int_reg = grp_fu_36_p2.read();
        ap_return_1_int_reg = grp_fu_42_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
        rhs_im_read_int_reg = rhs_im_read.read();
        rhs_re_read_int_reg = rhs_re_read.read();
        x_complex_float_im_read_int_reg = x_complex_float_im_read.read();
        x_complex_float_re_read_int_reg = x_complex_float_re_read.read();
    }
}

void operator_add_assign::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_add_assign::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_add_assign::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_add_assign::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_add_assign::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_add_assign::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_add_assign::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return_0 = ap_return_0_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_0 = grp_fu_36_p2.read();
    }
}

void operator_add_assign::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return_1 = ap_return_1_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_1 = grp_fu_42_p2.read();
    }
}

void operator_add_assign::thread_grp_fu_36_ce() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read()))) {
        grp_fu_36_ce = ap_const_logic_1;
    } else {
        grp_fu_36_ce = ap_const_logic_0;
    }
}

void operator_add_assign::thread_grp_fu_42_ce() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read()))) {
        grp_fu_42_ce = ap_const_logic_1;
    } else {
        grp_fu_42_ce = ap_const_logic_0;
    }
}

}

