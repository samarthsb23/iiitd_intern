// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _operator_mul_HH_
#define _operator_mul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "MUSIC_top_fsub_32kbM.h"
#include "MUSIC_top_fadd_32lbW.h"
#include "MUSIC_top_fmul_32mb6.h"

namespace ap_rtl {

struct operator_mul : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > x_complex_float_re_read;
    sc_in< sc_lv<32> > x_complex_float_im_read;
    sc_in< sc_lv<32> > rhs_re_read;
    sc_in< sc_lv<32> > rhs_im_read;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    operator_mul(sc_module_name name);
    SC_HAS_PROCESS(operator_mul);

    ~operator_mul();

    sc_trace_file* mVcdFile;

    MUSIC_top_fsub_32kbM<1,4,32,32,32>* MUSIC_top_fsub_32kbM_U295;
    MUSIC_top_fadd_32lbW<1,4,32,32,32>* MUSIC_top_fadd_32lbW_U296;
    MUSIC_top_fmul_32mb6<1,2,32,32,32>* MUSIC_top_fmul_32mb6_U297;
    MUSIC_top_fmul_32mb6<1,2,32,32,32>* MUSIC_top_fmul_32mb6_U298;
    MUSIC_top_fmul_32mb6<1,2,32,32,32>* MUSIC_top_fmul_32mb6_U299;
    MUSIC_top_fmul_32mb6<1,2,32,32,32>* MUSIC_top_fmul_32mb6_U300;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > grp_fu_44_p2;
    sc_signal< sc_lv<32> > m1_reg_104;
    sc_signal< sc_lv<32> > grp_fu_50_p2;
    sc_signal< sc_lv<32> > m2_reg_109;
    sc_signal< sc_lv<32> > grp_fu_56_p2;
    sc_signal< sc_lv<32> > m3_reg_114;
    sc_signal< sc_lv<32> > grp_fu_62_p2;
    sc_signal< sc_lv<32> > m4_reg_119;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > grp_fu_36_p2;
    sc_signal< sc_lv<32> > grp_fu_40_p2;
    sc_signal< sc_logic > grp_fu_36_ce;
    sc_signal< sc_logic > grp_fu_40_ce;
    sc_signal< sc_logic > grp_fu_44_ce;
    sc_signal< sc_logic > grp_fu_50_ce;
    sc_signal< sc_logic > grp_fu_56_ce;
    sc_signal< sc_logic > grp_fu_62_ce;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<32> > x_complex_float_re_read_int_reg;
    sc_signal< sc_lv<32> > x_complex_float_im_read_int_reg;
    sc_signal< sc_lv<32> > rhs_re_read_int_reg;
    sc_signal< sc_lv<32> > rhs_im_read_int_reg;
    sc_signal< sc_lv<32> > ap_return_0_int_reg;
    sc_signal< sc_lv<32> > ap_return_1_int_reg;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_grp_fu_36_ce();
    void thread_grp_fu_40_ce();
    void thread_grp_fu_44_ce();
    void thread_grp_fu_50_ce();
    void thread_grp_fu_56_ce();
    void thread_grp_fu_62_ce();
};

}

using namespace ap_rtl;

#endif
