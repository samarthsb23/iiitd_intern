-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MalM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_re_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_re_ce0 : OUT STD_LOGIC;
    A_re_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_re_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_re_ce1 : OUT STD_LOGIC;
    A_re_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_re_offset : IN STD_LOGIC_VECTOR (6 downto 0);
    A_im_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_im_ce0 : OUT STD_LOGIC;
    A_im_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_im_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_im_ce1 : OUT STD_LOGIC;
    A_im_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_im_offset : IN STD_LOGIC_VECTOR (6 downto 0);
    B_re_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    B_im_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    cos_theta_re : IN STD_LOGIC_VECTOR (63 downto 0);
    cos_theta_im : IN STD_LOGIC_VECTOR (63 downto 0);
    sin_theta_re : IN STD_LOGIC_VECTOR (63 downto 0);
    sin_theta_im : IN STD_LOGIC_VECTOR (63 downto 0);
    C_re_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_re_ce0 : OUT STD_LOGIC;
    C_re_we0 : OUT STD_LOGIC;
    C_re_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    C_im_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_im_ce0 : OUT STD_LOGIC;
    C_im_we0 : OUT STD_LOGIC;
    C_im_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    D_re_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    D_re_ce0 : OUT STD_LOGIC;
    D_re_we0 : OUT STD_LOGIC;
    D_re_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    D_im_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    D_im_ce0 : OUT STD_LOGIC;
    D_im_we0 : OUT STD_LOGIC;
    D_im_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of MalM is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mul_ln71_fu_454_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln71_reg_494 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln71_1_fu_460_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln71_1_reg_499 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln71_2_fu_342_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln71_2_reg_504 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln71_3_fu_352_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln71_3_reg_509 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_re_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_re_reg_514 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_im_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_im_reg_520 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_392_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_529 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln70_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_reg_586 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m2_reg_591 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m3_reg_596 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m4_reg_601 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_5_reg_606 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m2_5_reg_611 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m3_4_reg_616 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m4_4_reg_621 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_6_reg_626 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m2_6_reg_631 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_300_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m3_5_reg_636 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m4_5_reg_641 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_310_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_7_reg_646 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m2_7_reg_651 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m3_6_reg_656 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m4_6_reg_661 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_re_reg_666 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_im_reg_671 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_re_5_reg_676 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_im_4_reg_681 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_230_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_re_6_reg_686 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_234_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_im_5_reg_691 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_re_7_reg_696 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_242_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_im_6_reg_701 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_202 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln71_5_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln71_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_6_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln71_1_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_214_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_218_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_222_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_226_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln71_2_fu_342_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln71_3_fu_352_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal bitcast_ln211_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln211_fu_362_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln212_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln212_fu_376_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_4_fu_402_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln71_fu_406_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln71_3_fu_398_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln71_1_fu_416_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln71_1_fu_416_p2 : signal is "no";
    signal add_ln71_2_fu_426_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln71_3_fu_436_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln71_3_fu_436_p2 : signal is "no";
    signal mul_ln71_fu_454_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln71_fu_454_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln71_1_fu_460_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln71_1_fu_460_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_214_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_222_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln71_2_fu_342_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln71_3_fu_352_p10 : STD_LOGIC_VECTOR (13 downto 0);

    component MUSIC_top_dadddsubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MUSIC_top_dadd_64cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MUSIC_top_dsub_64fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MUSIC_top_dmul_64dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MUSIC_top_mul_mulg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    MUSIC_top_dadddsubkb_U21 : component MUSIC_top_dadddsubkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_214_p0,
        din1 => grp_fu_214_p1,
        opcode => grp_fu_214_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_214_p2);

    MUSIC_top_dadd_64cud_U22 : component MUSIC_top_dadd_64cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_218_p0,
        din1 => grp_fu_218_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_218_p2);

    MUSIC_top_dadddsubkb_U23 : component MUSIC_top_dadddsubkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_222_p0,
        din1 => grp_fu_222_p1,
        opcode => grp_fu_222_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_222_p2);

    MUSIC_top_dadd_64cud_U24 : component MUSIC_top_dadd_64cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_226_p0,
        din1 => grp_fu_226_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_226_p2);

    MUSIC_top_dsub_64fYi_U25 : component MUSIC_top_dsub_64fYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => m1_6_reg_626,
        din1 => m2_6_reg_631,
        ce => ap_const_logic_1,
        dout => grp_fu_230_p2);

    MUSIC_top_dadd_64cud_U26 : component MUSIC_top_dadd_64cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => m3_5_reg_636,
        din1 => m4_5_reg_641,
        ce => ap_const_logic_1,
        dout => grp_fu_234_p2);

    MUSIC_top_dsub_64fYi_U27 : component MUSIC_top_dsub_64fYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => m1_7_reg_646,
        din1 => m2_7_reg_651,
        ce => ap_const_logic_1,
        dout => grp_fu_238_p2);

    MUSIC_top_dadd_64cud_U28 : component MUSIC_top_dadd_64cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => m3_6_reg_656,
        din1 => m4_6_reg_661,
        ce => ap_const_logic_1,
        dout => grp_fu_242_p2);

    MUSIC_top_dmul_64dEe_U29 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_re_q0,
        din1 => cos_theta_re,
        ce => ap_const_logic_1,
        dout => grp_fu_250_p2);

    MUSIC_top_dmul_64dEe_U30 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_im_q0,
        din1 => cos_theta_im,
        ce => ap_const_logic_1,
        dout => grp_fu_255_p2);

    MUSIC_top_dmul_64dEe_U31 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_re_q0,
        din1 => cos_theta_im,
        ce => ap_const_logic_1,
        dout => grp_fu_260_p2);

    MUSIC_top_dmul_64dEe_U32 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_im_q0,
        din1 => cos_theta_re,
        ce => ap_const_logic_1,
        dout => grp_fu_265_p2);

    MUSIC_top_dmul_64dEe_U33 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_reg_514,
        din1 => A_re_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    MUSIC_top_dmul_64dEe_U34 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_reg_520,
        din1 => A_im_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p2);

    MUSIC_top_dmul_64dEe_U35 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_reg_520,
        din1 => A_re_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_280_p2);

    MUSIC_top_dmul_64dEe_U36 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_reg_514,
        din1 => A_im_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_285_p2);

    MUSIC_top_dmul_64dEe_U37 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_re_q0,
        din1 => sin_theta_re,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p2);

    MUSIC_top_dmul_64dEe_U38 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_im_q0,
        din1 => sin_theta_im,
        ce => ap_const_logic_1,
        dout => grp_fu_295_p2);

    MUSIC_top_dmul_64dEe_U39 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_re_q0,
        din1 => sin_theta_im,
        ce => ap_const_logic_1,
        dout => grp_fu_300_p2);

    MUSIC_top_dmul_64dEe_U40 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_im_q0,
        din1 => sin_theta_re,
        ce => ap_const_logic_1,
        dout => grp_fu_305_p2);

    MUSIC_top_dmul_64dEe_U41 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_re_q1,
        din1 => cos_theta_re,
        ce => ap_const_logic_1,
        dout => grp_fu_310_p2);

    MUSIC_top_dmul_64dEe_U42 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_im_q1,
        din1 => cos_theta_im,
        ce => ap_const_logic_1,
        dout => grp_fu_315_p2);

    MUSIC_top_dmul_64dEe_U43 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_re_q1,
        din1 => cos_theta_im,
        ce => ap_const_logic_1,
        dout => grp_fu_320_p2);

    MUSIC_top_dmul_64dEe_U44 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_im_q1,
        din1 => cos_theta_re,
        ce => ap_const_logic_1,
        dout => grp_fu_325_p2);

    MUSIC_top_mul_mulg8j_U45 : component MUSIC_top_mul_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln71_fu_454_p0,
        din1 => mul_ln71_fu_454_p1,
        dout => mul_ln71_fu_454_p2);

    MUSIC_top_mul_mulg8j_U46 : component MUSIC_top_mul_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln71_1_fu_460_p0,
        din1 => mul_ln71_1_fu_460_p1,
        dout => mul_ln71_1_fu_460_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_0_reg_202 <= i_reg_529;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_202 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_529 <= i_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                m1_5_reg_606 <= grp_fu_270_p2;
                m1_6_reg_626 <= grp_fu_290_p2;
                m1_7_reg_646 <= grp_fu_310_p2;
                m1_reg_586 <= grp_fu_250_p2;
                m2_5_reg_611 <= grp_fu_275_p2;
                m2_6_reg_631 <= grp_fu_295_p2;
                m2_7_reg_651 <= grp_fu_315_p2;
                m2_reg_591 <= grp_fu_255_p2;
                m3_4_reg_616 <= grp_fu_280_p2;
                m3_5_reg_636 <= grp_fu_300_p2;
                m3_6_reg_656 <= grp_fu_320_p2;
                m3_reg_596 <= grp_fu_260_p2;
                m4_4_reg_621 <= grp_fu_285_p2;
                m4_5_reg_641 <= grp_fu_305_p2;
                m4_6_reg_661 <= grp_fu_325_p2;
                m4_reg_601 <= grp_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_ln71_1_reg_499 <= mul_ln71_1_fu_460_p2;
                mul_ln71_2_reg_504 <= mul_ln71_2_fu_342_p2;
                mul_ln71_3_reg_509 <= mul_ln71_3_fu_352_p2;
                mul_ln71_reg_494 <= mul_ln71_fu_454_p2;
                tmp_im_reg_520 <= tmp_im_fu_382_p1;
                tmp_re_reg_514 <= tmp_re_fu_368_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                sum_im_4_reg_681 <= grp_fu_226_p2;
                sum_im_5_reg_691 <= grp_fu_234_p2;
                sum_im_6_reg_701 <= grp_fu_242_p2;
                sum_im_reg_671 <= grp_fu_218_p2;
                sum_re_5_reg_676 <= grp_fu_222_p2;
                sum_re_6_reg_686 <= grp_fu_230_p2;
                sum_re_7_reg_696 <= grp_fu_238_p2;
                sum_re_reg_666 <= grp_fu_214_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln70_fu_386_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln70_fu_386_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_im_address0 <= zext_ln71_6_fu_431_p1(14 - 1 downto 0);
    A_im_address1 <= sext_ln71_1_fu_441_p1(14 - 1 downto 0);

    A_im_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_im_ce0 <= ap_const_logic_1;
        else 
            A_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_im_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_im_ce1 <= ap_const_logic_1;
        else 
            A_im_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_re_address0 <= zext_ln71_5_fu_411_p1(14 - 1 downto 0);
    A_re_address1 <= sext_ln71_fu_421_p1(14 - 1 downto 0);

    A_re_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_re_ce0 <= ap_const_logic_1;
        else 
            A_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_re_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_re_ce1 <= ap_const_logic_1;
        else 
            A_re_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C_im_address0 <= zext_ln71_fu_446_p1(7 - 1 downto 0);

    C_im_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            C_im_ce0 <= ap_const_logic_1;
        else 
            C_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_im_d0 <= grp_fu_218_p2;

    C_im_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            C_im_we0 <= ap_const_logic_1;
        else 
            C_im_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_re_address0 <= zext_ln71_fu_446_p1(7 - 1 downto 0);

    C_re_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            C_re_ce0 <= ap_const_logic_1;
        else 
            C_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_re_d0 <= grp_fu_214_p2;

    C_re_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            C_re_we0 <= ap_const_logic_1;
        else 
            C_re_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_im_address0 <= zext_ln71_fu_446_p1(7 - 1 downto 0);

    D_im_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            D_im_ce0 <= ap_const_logic_1;
        else 
            D_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_im_d0 <= grp_fu_226_p2;

    D_im_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            D_im_we0 <= ap_const_logic_1;
        else 
            D_im_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_re_address0 <= zext_ln71_fu_446_p1(7 - 1 downto 0);

    D_re_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            D_re_ce0 <= ap_const_logic_1;
        else 
            D_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_re_d0 <= grp_fu_222_p2;

    D_re_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            D_re_we0 <= ap_const_logic_1;
        else 
            D_re_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln71_1_fu_416_p2 <= std_logic_vector(signed(mul_ln71_1_reg_499) + signed(zext_ln71_3_fu_398_p1));
    add_ln71_2_fu_426_p2 <= std_logic_vector(unsigned(mul_ln71_2_reg_504) + unsigned(zext_ln71_4_fu_402_p1));
    add_ln71_3_fu_436_p2 <= std_logic_vector(signed(mul_ln71_reg_494) + signed(zext_ln71_3_fu_398_p1));
    add_ln71_fu_406_p2 <= std_logic_vector(unsigned(mul_ln71_3_reg_509) + unsigned(zext_ln71_4_fu_402_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln70_fu_386_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln70_fu_386_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln70_fu_386_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln70_fu_386_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln211_fu_358_p1 <= sin_theta_re;
    bitcast_ln212_fu_372_p1 <= sin_theta_im;

    grp_fu_214_opcode_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_214_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_214_opcode <= ap_const_lv2_0;
        else 
            grp_fu_214_opcode <= "XX";
        end if; 
    end process;


    grp_fu_214_p0_assign_proc : process(m1_reg_586, sum_re_5_reg_676, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_214_p0 <= sum_re_5_reg_676;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_214_p0 <= m1_reg_586;
        else 
            grp_fu_214_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_214_p1_assign_proc : process(m2_reg_591, sum_re_reg_666, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_214_p1 <= sum_re_reg_666;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_214_p1 <= m2_reg_591;
        else 
            grp_fu_214_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_218_p0_assign_proc : process(m3_reg_596, sum_im_4_reg_681, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_218_p0 <= sum_im_4_reg_681;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_218_p0 <= m3_reg_596;
        else 
            grp_fu_218_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_218_p1_assign_proc : process(m4_reg_601, sum_im_reg_671, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_218_p1 <= sum_im_reg_671;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_218_p1 <= m4_reg_601;
        else 
            grp_fu_218_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_opcode_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_222_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_222_opcode <= ap_const_lv2_0;
        else 
            grp_fu_222_opcode <= "XX";
        end if; 
    end process;


    grp_fu_222_p0_assign_proc : process(m1_5_reg_606, sum_re_7_reg_696, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_222_p0 <= sum_re_7_reg_696;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_222_p0 <= m1_5_reg_606;
        else 
            grp_fu_222_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_p1_assign_proc : process(m2_5_reg_611, sum_re_6_reg_686, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_222_p1 <= sum_re_6_reg_686;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_222_p1 <= m2_5_reg_611;
        else 
            grp_fu_222_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_226_p0_assign_proc : process(m3_4_reg_616, sum_im_6_reg_701, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_226_p0 <= sum_im_6_reg_701;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_226_p0 <= m3_4_reg_616;
        else 
            grp_fu_226_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_226_p1_assign_proc : process(m4_4_reg_621, sum_im_5_reg_691, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_226_p1 <= sum_im_5_reg_691;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_226_p1 <= m4_4_reg_621;
        else 
            grp_fu_226_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_392_p2 <= std_logic_vector(unsigned(i_0_reg_202) + unsigned(ap_const_lv7_1));
    icmp_ln70_fu_386_p2 <= "1" when (i_0_reg_202 = ap_const_lv7_64) else "0";
    mul_ln71_1_fu_460_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    mul_ln71_1_fu_460_p1 <= B_re_offset(15 - 1 downto 0);
    mul_ln71_2_fu_342_p1 <= mul_ln71_2_fu_342_p10(7 - 1 downto 0);
    mul_ln71_2_fu_342_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_im_offset),14));
    mul_ln71_2_fu_342_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv14_64) * unsigned(mul_ln71_2_fu_342_p1), 14));
    mul_ln71_3_fu_352_p1 <= mul_ln71_3_fu_352_p10(7 - 1 downto 0);
    mul_ln71_3_fu_352_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_re_offset),14));
    mul_ln71_3_fu_352_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv14_64) * unsigned(mul_ln71_3_fu_352_p1), 14));
    mul_ln71_fu_454_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    mul_ln71_fu_454_p1 <= B_im_offset(15 - 1 downto 0);
        sext_ln71_1_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln71_3_fu_436_p2),64));

        sext_ln71_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln71_1_fu_416_p2),64));

    tmp_im_fu_382_p1 <= xor_ln212_fu_376_p2;
    tmp_re_fu_368_p1 <= xor_ln211_fu_362_p2;
    xor_ln211_fu_362_p2 <= (bitcast_ln211_fu_358_p1 xor ap_const_lv64_8000000000000000);
    xor_ln212_fu_376_p2 <= (bitcast_ln212_fu_372_p1 xor ap_const_lv64_8000000000000000);
    zext_ln71_3_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_202),15));
    zext_ln71_4_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_202),14));
    zext_ln71_5_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_fu_406_p2),64));
    zext_ln71_6_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_2_fu_426_p2),64));
    zext_ln71_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_202),64));
end behav;
