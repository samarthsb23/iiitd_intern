// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scaled_fixed2ieee (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V,
        prescale,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [62:0] in_V;
input  [11:0] prescale;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_fu_243_p2;
reg   [1:0] i_reg_607;
wire    ap_CS_fsm_state2;
reg   [1:0] out_bits_V_addr_1_reg_612;
wire   [0:0] icmp_ln423_fu_237_p2;
wire   [2:0] i_1_fu_405_p2;
reg   [2:0] i_1_reg_620;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln435_fu_411_p1;
reg   [63:0] zext_ln435_reg_625;
wire   [0:0] icmp_ln434_fu_399_p2;
wire   [0:0] icmp_ln441_fu_435_p2;
reg   [0:0] icmp_ln441_reg_635;
wire    ap_CS_fsm_state6;
wire   [2:0] i_2_fu_441_p2;
reg   [2:0] i_2_reg_639;
wire   [31:0] shift_fu_452_p2;
wire    ap_CS_fsm_state7;
wire   [62:0] r_V_30_fu_497_p3;
reg   [1:0] out_bits_V_address0;
reg    out_bits_V_ce0;
reg   [3:0] out_bits_V_we0;
reg   [31:0] out_bits_V_d0;
wire   [31:0] out_bits_V_q0;
reg   [1:0] c_address0;
reg    c_ce0;
reg    c_we0;
reg   [31:0] c_d0;
wire   [31:0] c_q0;
reg   [1:0] i_0_reg_161;
wire    ap_CS_fsm_state3;
reg   [2:0] i1_0_reg_173;
wire    ap_CS_fsm_state5;
reg   [62:0] p_0119_0_reg_184;
wire   [0:0] icmp_ln444_fu_506_p2;
reg   [31:0] shift_0_reg_194;
reg   [2:0] i2_0_reg_206;
reg   [62:0] ap_phi_mux_p_Val2_4_in_phi_fu_220_p4;
reg   [62:0] p_Val2_4_in_reg_217;
reg   [31:0] ap_phi_mux_shift_1_phi_fu_230_p4;
reg   [31:0] shift_1_reg_227;
wire   [63:0] zext_ln424_fu_249_p1;
wire   [63:0] zext_ln442_fu_447_p1;
wire   [31:0] tmp_fu_257_p3;
wire   [31:0] p_Result_2_fu_386_p5;
wire   [14:0] trunc_ln566_fu_254_p1;
wire   [5:0] shl_ln_fu_266_p3;
wire   [5:0] sub_ln425_fu_280_p2;
wire   [5:0] sub_ln424_fu_274_p2;
wire   [0:0] icmp_ln566_fu_286_p2;
wire   [5:0] sub_ln566_fu_301_p2;
wire   [5:0] sub_ln566_2_fu_313_p2;
reg   [62:0] tmp_8_fu_292_p4;
wire   [5:0] sub_ln566_1_fu_307_p2;
wire   [5:0] select_ln566_fu_319_p3;
wire   [5:0] select_ln566_2_fu_334_p3;
wire   [5:0] sub_ln566_3_fu_342_p2;
wire   [62:0] select_ln566_1_fu_327_p3;
wire   [62:0] zext_ln566_fu_348_p1;
wire   [62:0] zext_ln566_1_fu_352_p1;
wire   [62:0] lshr_ln566_fu_356_p2;
wire   [62:0] lshr_ln566_1_fu_362_p2;
wire   [62:0] p_Result_s_fu_368_p2;
wire   [15:0] trunc_ln169_fu_374_p1;
wire   [16:0] tmp_2_fu_378_p3;
reg   [31:0] p_Result_22_fu_416_p4;
wire   [0:0] isNeg_fu_459_p3;
wire   [31:0] sub_ln1311_fu_467_p2;
wire   [31:0] ush_fu_473_p3;
wire   [62:0] zext_ln1287_fu_481_p1;
wire   [62:0] r_V_fu_485_p2;
wire   [62:0] r_V_28_fu_491_p2;
wire   [11:0] sub_ln452_fu_512_p2;
wire  signed [31:0] sext_ln452_fu_517_p1;
wire   [31:0] newexp_fu_521_p2;
wire   [0:0] tmp_10_fu_527_p3;
wire   [0:0] icmp_ln1452_fu_535_p2;
wire   [0:0] or_ln453_fu_540_p2;
wire   [51:0] phitmp1_fu_550_p4;
wire   [10:0] empty_50_fu_546_p1;
wire   [10:0] out_exp_V_fu_568_p3;
wire   [51:0] significand_V_fu_560_p3;
wire   [63:0] p_Result_23_fu_576_p4;
wire   [63:0] bitcast_ln512_fu_586_p1;
reg   [63:0] ap_return_preg;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_return_preg = 64'd0;
end

scaled_fixed2ieeeibs #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
out_bits_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_bits_V_address0),
    .ce0(out_bits_V_ce0),
    .we0(out_bits_V_we0),
    .d0(out_bits_V_d0),
    .q0(out_bits_V_q0)
);

scaled_fixed2ieee_c #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .we0(c_we0),
    .d0(c_d0),
    .q0(c_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_preg[0] <= 1'b0;
        ap_return_preg[1] <= 1'b0;
        ap_return_preg[2] <= 1'b0;
        ap_return_preg[3] <= 1'b0;
        ap_return_preg[4] <= 1'b0;
        ap_return_preg[5] <= 1'b0;
        ap_return_preg[6] <= 1'b0;
        ap_return_preg[7] <= 1'b0;
        ap_return_preg[8] <= 1'b0;
        ap_return_preg[9] <= 1'b0;
        ap_return_preg[10] <= 1'b0;
        ap_return_preg[11] <= 1'b0;
        ap_return_preg[12] <= 1'b0;
        ap_return_preg[13] <= 1'b0;
        ap_return_preg[14] <= 1'b0;
        ap_return_preg[15] <= 1'b0;
        ap_return_preg[16] <= 1'b0;
        ap_return_preg[17] <= 1'b0;
        ap_return_preg[18] <= 1'b0;
        ap_return_preg[19] <= 1'b0;
        ap_return_preg[20] <= 1'b0;
        ap_return_preg[21] <= 1'b0;
        ap_return_preg[22] <= 1'b0;
        ap_return_preg[23] <= 1'b0;
        ap_return_preg[24] <= 1'b0;
        ap_return_preg[25] <= 1'b0;
        ap_return_preg[26] <= 1'b0;
        ap_return_preg[27] <= 1'b0;
        ap_return_preg[28] <= 1'b0;
        ap_return_preg[29] <= 1'b0;
        ap_return_preg[30] <= 1'b0;
        ap_return_preg[31] <= 1'b0;
        ap_return_preg[32] <= 1'b0;
        ap_return_preg[33] <= 1'b0;
        ap_return_preg[34] <= 1'b0;
        ap_return_preg[35] <= 1'b0;
        ap_return_preg[36] <= 1'b0;
        ap_return_preg[37] <= 1'b0;
        ap_return_preg[38] <= 1'b0;
        ap_return_preg[39] <= 1'b0;
        ap_return_preg[40] <= 1'b0;
        ap_return_preg[41] <= 1'b0;
        ap_return_preg[42] <= 1'b0;
        ap_return_preg[43] <= 1'b0;
        ap_return_preg[44] <= 1'b0;
        ap_return_preg[45] <= 1'b0;
        ap_return_preg[46] <= 1'b0;
        ap_return_preg[47] <= 1'b0;
        ap_return_preg[48] <= 1'b0;
        ap_return_preg[49] <= 1'b0;
        ap_return_preg[50] <= 1'b0;
        ap_return_preg[51] <= 1'b0;
        ap_return_preg[52] <= 1'b0;
        ap_return_preg[53] <= 1'b0;
        ap_return_preg[54] <= 1'b0;
        ap_return_preg[55] <= 1'b0;
        ap_return_preg[56] <= 1'b0;
        ap_return_preg[57] <= 1'b0;
        ap_return_preg[58] <= 1'b0;
        ap_return_preg[59] <= 1'b0;
        ap_return_preg[60] <= 1'b0;
        ap_return_preg[61] <= 1'b0;
        ap_return_preg[62] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) & ((icmp_ln441_reg_635 == 1'd1) | (icmp_ln444_fu_506_p2 == 1'd0)))) begin
                        ap_return_preg[62 : 0] <= bitcast_ln512_fu_586_p1[62 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_0_reg_173 <= i_1_reg_620;
    end else if (((icmp_ln423_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_173 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln434_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i2_0_reg_206 <= 3'd0;
    end else if (((icmp_ln441_reg_635 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln444_fu_506_p2 == 1'd1))) begin
        i2_0_reg_206 <= i_2_reg_639;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_161 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_161 <= i_reg_607;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln434_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0119_0_reg_184 <= in_V;
    end else if (((icmp_ln441_reg_635 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln444_fu_506_p2 == 1'd1))) begin
        p_0119_0_reg_184 <= r_V_30_fu_497_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln441_reg_635 == 1'd0) & (icmp_ln444_fu_506_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_Val2_4_in_reg_217 <= r_V_30_fu_497_p3;
    end else if (((icmp_ln441_fu_435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        p_Val2_4_in_reg_217 <= p_0119_0_reg_184;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln434_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        shift_0_reg_194 <= 32'd0;
    end else if (((icmp_ln441_reg_635 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln444_fu_506_p2 == 1'd1))) begin
        shift_0_reg_194 <= shift_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln441_reg_635 == 1'd0) & (icmp_ln444_fu_506_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        shift_1_reg_227 <= shift_fu_452_p2;
    end else if (((icmp_ln441_fu_435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        shift_1_reg_227 <= shift_0_reg_194;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_620 <= i_1_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_639 <= i_2_fu_441_p2;
        icmp_ln441_reg_635 <= icmp_ln441_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_607 <= i_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln423_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_bits_V_addr_1_reg_612 <= zext_ln424_fu_249_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln434_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln435_reg_625[2 : 0] <= zext_ln435_fu_411_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & ((icmp_ln441_reg_635 == 1'd1) | (icmp_ln444_fu_506_p2 == 1'd0))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln441_reg_635 == 1'd0) & (icmp_ln444_fu_506_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_phi_mux_p_Val2_4_in_phi_fu_220_p4 = r_V_30_fu_497_p3;
    end else begin
        ap_phi_mux_p_Val2_4_in_phi_fu_220_p4 = p_Val2_4_in_reg_217;
    end
end

always @ (*) begin
    if (((icmp_ln441_reg_635 == 1'd0) & (icmp_ln444_fu_506_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_phi_mux_shift_1_phi_fu_230_p4 = shift_fu_452_p2;
    end else begin
        ap_phi_mux_shift_1_phi_fu_230_p4 = shift_1_reg_227;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((icmp_ln441_reg_635 == 1'd1) | (icmp_ln444_fu_506_p2 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((icmp_ln441_reg_635 == 1'd1) | (icmp_ln444_fu_506_p2 == 1'd0)))) begin
        ap_return = bitcast_ln512_fu_586_p1;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_address0 = zext_ln442_fu_447_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address0 = zext_ln435_reg_625;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_bits_V_address0 = zext_ln435_fu_411_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_bits_V_address0 = out_bits_V_addr_1_reg_612;
    end else if (((icmp_ln423_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_bits_V_address0 = 64'd3;
    end else if (((icmp_ln423_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_bits_V_address0 = zext_ln424_fu_249_p1;
    end else begin
        out_bits_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln423_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln423_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_bits_V_ce0 = 1'b1;
    end else begin
        out_bits_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_bits_V_d0 = p_Result_2_fu_386_p5;
    end else if (((icmp_ln423_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_bits_V_d0 = tmp_fu_257_p3;
    end else begin
        out_bits_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_bits_V_we0 = 4'd15;
    end else if (((icmp_ln423_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_bits_V_we0 = 4'd12;
    end else begin
        out_bits_V_we0 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln423_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln434_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ((icmp_ln441_reg_635 == 1'd1) | (icmp_ln444_fu_506_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln512_fu_586_p1 = p_Result_23_fu_576_p4;


always @ (p_Result_22_fu_416_p4) begin
    if (p_Result_22_fu_416_p4[0] == 1'b1) begin
        c_d0 = 32'd0;
    end else if (p_Result_22_fu_416_p4[1] == 1'b1) begin
        c_d0 = 32'd1;
    end else if (p_Result_22_fu_416_p4[2] == 1'b1) begin
        c_d0 = 32'd2;
    end else if (p_Result_22_fu_416_p4[3] == 1'b1) begin
        c_d0 = 32'd3;
    end else if (p_Result_22_fu_416_p4[4] == 1'b1) begin
        c_d0 = 32'd4;
    end else if (p_Result_22_fu_416_p4[5] == 1'b1) begin
        c_d0 = 32'd5;
    end else if (p_Result_22_fu_416_p4[6] == 1'b1) begin
        c_d0 = 32'd6;
    end else if (p_Result_22_fu_416_p4[7] == 1'b1) begin
        c_d0 = 32'd7;
    end else if (p_Result_22_fu_416_p4[8] == 1'b1) begin
        c_d0 = 32'd8;
    end else if (p_Result_22_fu_416_p4[9] == 1'b1) begin
        c_d0 = 32'd9;
    end else if (p_Result_22_fu_416_p4[10] == 1'b1) begin
        c_d0 = 32'd10;
    end else if (p_Result_22_fu_416_p4[11] == 1'b1) begin
        c_d0 = 32'd11;
    end else if (p_Result_22_fu_416_p4[12] == 1'b1) begin
        c_d0 = 32'd12;
    end else if (p_Result_22_fu_416_p4[13] == 1'b1) begin
        c_d0 = 32'd13;
    end else if (p_Result_22_fu_416_p4[14] == 1'b1) begin
        c_d0 = 32'd14;
    end else if (p_Result_22_fu_416_p4[15] == 1'b1) begin
        c_d0 = 32'd15;
    end else if (p_Result_22_fu_416_p4[16] == 1'b1) begin
        c_d0 = 32'd16;
    end else if (p_Result_22_fu_416_p4[17] == 1'b1) begin
        c_d0 = 32'd17;
    end else if (p_Result_22_fu_416_p4[18] == 1'b1) begin
        c_d0 = 32'd18;
    end else if (p_Result_22_fu_416_p4[19] == 1'b1) begin
        c_d0 = 32'd19;
    end else if (p_Result_22_fu_416_p4[20] == 1'b1) begin
        c_d0 = 32'd20;
    end else if (p_Result_22_fu_416_p4[21] == 1'b1) begin
        c_d0 = 32'd21;
    end else if (p_Result_22_fu_416_p4[22] == 1'b1) begin
        c_d0 = 32'd22;
    end else if (p_Result_22_fu_416_p4[23] == 1'b1) begin
        c_d0 = 32'd23;
    end else if (p_Result_22_fu_416_p4[24] == 1'b1) begin
        c_d0 = 32'd24;
    end else if (p_Result_22_fu_416_p4[25] == 1'b1) begin
        c_d0 = 32'd25;
    end else if (p_Result_22_fu_416_p4[26] == 1'b1) begin
        c_d0 = 32'd26;
    end else if (p_Result_22_fu_416_p4[27] == 1'b1) begin
        c_d0 = 32'd27;
    end else if (p_Result_22_fu_416_p4[28] == 1'b1) begin
        c_d0 = 32'd28;
    end else if (p_Result_22_fu_416_p4[29] == 1'b1) begin
        c_d0 = 32'd29;
    end else if (p_Result_22_fu_416_p4[30] == 1'b1) begin
        c_d0 = 32'd30;
    end else if (p_Result_22_fu_416_p4[31] == 1'b1) begin
        c_d0 = 32'd31;
    end else begin
        c_d0 = 32'd32;
    end
end

assign empty_50_fu_546_p1 = newexp_fu_521_p2[10:0];

assign i_1_fu_405_p2 = (i1_0_reg_173 + 3'd1);

assign i_2_fu_441_p2 = (i2_0_reg_206 + 3'd1);

assign i_fu_243_p2 = (i_0_reg_161 + 2'd1);

assign icmp_ln1452_fu_535_p2 = ((in_V == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln423_fu_237_p2 = ((i_0_reg_161 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln434_fu_399_p2 = ((i1_0_reg_173 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln441_fu_435_p2 = ((i2_0_reg_206 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln444_fu_506_p2 = ((c_q0 == 32'd16) ? 1'b1 : 1'b0);

assign icmp_ln566_fu_286_p2 = ((sub_ln425_fu_280_p2 > sub_ln424_fu_274_p2) ? 1'b1 : 1'b0);

assign isNeg_fu_459_p3 = c_q0[32'd31];

assign lshr_ln566_1_fu_362_p2 = 63'd9223372036854775807 >> zext_ln566_1_fu_352_p1;

assign lshr_ln566_fu_356_p2 = select_ln566_1_fu_327_p3 >> zext_ln566_fu_348_p1;

assign newexp_fu_521_p2 = ($signed(sext_ln452_fu_517_p1) - $signed(ap_phi_mux_shift_1_phi_fu_230_p4));

assign or_ln453_fu_540_p2 = (tmp_10_fu_527_p3 | icmp_ln1452_fu_535_p2);

assign out_exp_V_fu_568_p3 = ((or_ln453_fu_540_p2[0:0] === 1'b1) ? 11'd0 : empty_50_fu_546_p1);

integer ap_tvar_int_0;

always @ (out_bits_V_q0) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_22_fu_416_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_22_fu_416_p4[ap_tvar_int_0] = out_bits_V_q0[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_23_fu_576_p4 = {{{{1'd0}, {out_exp_V_fu_568_p3}}}, {significand_V_fu_560_p3}};

assign p_Result_2_fu_386_p5 = {{tmp_2_fu_378_p3}, {out_bits_V_q0[14:0]}};

assign p_Result_s_fu_368_p2 = (lshr_ln566_fu_356_p2 & lshr_ln566_1_fu_362_p2);

assign phitmp1_fu_550_p4 = {{ap_phi_mux_p_Val2_4_in_phi_fu_220_p4[61:10]}};

assign r_V_28_fu_491_p2 = p_0119_0_reg_184 << zext_ln1287_fu_481_p1;

assign r_V_30_fu_497_p3 = ((isNeg_fu_459_p3[0:0] === 1'b1) ? r_V_fu_485_p2 : r_V_28_fu_491_p2);

assign r_V_fu_485_p2 = $signed(p_0119_0_reg_184) >>> zext_ln1287_fu_481_p1;

assign select_ln566_1_fu_327_p3 = ((icmp_ln566_fu_286_p2[0:0] === 1'b1) ? tmp_8_fu_292_p4 : in_V);

assign select_ln566_2_fu_334_p3 = ((icmp_ln566_fu_286_p2[0:0] === 1'b1) ? sub_ln566_1_fu_307_p2 : sub_ln425_fu_280_p2);

assign select_ln566_fu_319_p3 = ((icmp_ln566_fu_286_p2[0:0] === 1'b1) ? sub_ln566_fu_301_p2 : sub_ln566_2_fu_313_p2);

assign sext_ln452_fu_517_p1 = $signed(sub_ln452_fu_512_p2);

assign shift_fu_452_p2 = (c_q0 + shift_0_reg_194);

assign shl_ln_fu_266_p3 = {{i_0_reg_161}, {4'd0}};

assign significand_V_fu_560_p3 = ((or_ln453_fu_540_p2[0:0] === 1'b1) ? 52'd0 : phitmp1_fu_550_p4);

assign sub_ln1311_fu_467_p2 = (32'd0 - c_q0);

assign sub_ln424_fu_274_p2 = ($signed(6'd62) - $signed(shl_ln_fu_266_p3));

assign sub_ln425_fu_280_p2 = ($signed(6'd47) - $signed(shl_ln_fu_266_p3));

assign sub_ln452_fu_512_p2 = (12'd1023 - prescale);

assign sub_ln566_1_fu_307_p2 = ($signed(6'd62) - $signed(sub_ln425_fu_280_p2));

assign sub_ln566_2_fu_313_p2 = (sub_ln424_fu_274_p2 - sub_ln425_fu_280_p2);

assign sub_ln566_3_fu_342_p2 = ($signed(6'd62) - $signed(select_ln566_fu_319_p3));

assign sub_ln566_fu_301_p2 = (sub_ln425_fu_280_p2 - sub_ln424_fu_274_p2);

assign tmp_10_fu_527_p3 = newexp_fu_521_p2[32'd31];

assign tmp_2_fu_378_p3 = {{trunc_ln169_fu_374_p1}, {1'd1}};

integer ap_tvar_int_1;

always @ (in_V) begin
    for (ap_tvar_int_1 = 63 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 62 - 0) begin
            tmp_8_fu_292_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_8_fu_292_p4[ap_tvar_int_1] = in_V[62 - ap_tvar_int_1];
        end
    end
end

assign tmp_fu_257_p3 = {{trunc_ln566_fu_254_p1}, {17'd65536}};

assign trunc_ln169_fu_374_p1 = p_Result_s_fu_368_p2[15:0];

assign trunc_ln566_fu_254_p1 = in_V[14:0];

assign ush_fu_473_p3 = ((isNeg_fu_459_p3[0:0] === 1'b1) ? sub_ln1311_fu_467_p2 : c_q0);

assign zext_ln1287_fu_481_p1 = ush_fu_473_p3;

assign zext_ln424_fu_249_p1 = i_0_reg_161;

assign zext_ln435_fu_411_p1 = i1_0_reg_173;

assign zext_ln442_fu_447_p1 = i2_0_reg_206;

assign zext_ln566_1_fu_352_p1 = sub_ln566_3_fu_342_p2;

assign zext_ln566_fu_348_p1 = select_ln566_2_fu_334_p3;

always @ (posedge ap_clk) begin
    zext_ln435_reg_625[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    ap_return_preg[63] <= 1'b0;
end

endmodule //scaled_fixed2ieee
