// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matrixmul_8_unopt_matrixmul_8_unopt_Pipeline_loop3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mux_case_0456,
        mux_case_1463,
        mux_case_2470,
        mux_case_3477,
        mux_case_4484,
        mux_case_5491,
        mux_case_6498,
        mux_case_7505,
        mux_case_0167515,
        mux_case_1168522,
        mux_case_2169529,
        mux_case_3170536,
        mux_case_4171543,
        mux_case_5172550,
        mux_case_6173557,
        mux_case_7174564,
        mux_case_0176571,
        mux_case_1177578,
        mux_case_2178585,
        mux_case_3179592,
        mux_case_4180599,
        mux_case_5181606,
        mux_case_6182613,
        mux_case_7183620,
        mux_case_0185627,
        mux_case_1186634,
        mux_case_2187641,
        mux_case_3188648,
        mux_case_4189655,
        mux_case_5190662,
        mux_case_6191669,
        mux_case_7192676,
        mux_case_0194683,
        mux_case_1195690,
        mux_case_2196697,
        mux_case_3197704,
        mux_case_4198711,
        mux_case_5199718,
        mux_case_6200725,
        mux_case_7201732,
        mux_case_0203739,
        mux_case_1204746,
        mux_case_2205753,
        mux_case_3206760,
        mux_case_4207767,
        mux_case_5208774,
        mux_case_6209781,
        mux_case_7210788,
        mux_case_0212795,
        mux_case_1213802,
        mux_case_2214809,
        mux_case_3215816,
        mux_case_4216823,
        mux_case_5217830,
        mux_case_6218837,
        mux_case_7219844,
        mux_case_0221851,
        mux_case_1222858,
        mux_case_2223865,
        mux_case_3224872,
        mux_case_4225879,
        mux_case_5226886,
        mux_case_6227893,
        mux_case_7228900,
        tmp,
        tmp_1,
        tmp_2,
        tmp_3,
        tmp_4,
        tmp_5,
        tmp_6,
        tmp_7,
        row_2,
        res_out,
        res_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] mux_case_0456;
input  [31:0] mux_case_1463;
input  [31:0] mux_case_2470;
input  [31:0] mux_case_3477;
input  [31:0] mux_case_4484;
input  [31:0] mux_case_5491;
input  [31:0] mux_case_6498;
input  [31:0] mux_case_7505;
input  [31:0] mux_case_0167515;
input  [31:0] mux_case_1168522;
input  [31:0] mux_case_2169529;
input  [31:0] mux_case_3170536;
input  [31:0] mux_case_4171543;
input  [31:0] mux_case_5172550;
input  [31:0] mux_case_6173557;
input  [31:0] mux_case_7174564;
input  [31:0] mux_case_0176571;
input  [31:0] mux_case_1177578;
input  [31:0] mux_case_2178585;
input  [31:0] mux_case_3179592;
input  [31:0] mux_case_4180599;
input  [31:0] mux_case_5181606;
input  [31:0] mux_case_6182613;
input  [31:0] mux_case_7183620;
input  [31:0] mux_case_0185627;
input  [31:0] mux_case_1186634;
input  [31:0] mux_case_2187641;
input  [31:0] mux_case_3188648;
input  [31:0] mux_case_4189655;
input  [31:0] mux_case_5190662;
input  [31:0] mux_case_6191669;
input  [31:0] mux_case_7192676;
input  [31:0] mux_case_0194683;
input  [31:0] mux_case_1195690;
input  [31:0] mux_case_2196697;
input  [31:0] mux_case_3197704;
input  [31:0] mux_case_4198711;
input  [31:0] mux_case_5199718;
input  [31:0] mux_case_6200725;
input  [31:0] mux_case_7201732;
input  [31:0] mux_case_0203739;
input  [31:0] mux_case_1204746;
input  [31:0] mux_case_2205753;
input  [31:0] mux_case_3206760;
input  [31:0] mux_case_4207767;
input  [31:0] mux_case_5208774;
input  [31:0] mux_case_6209781;
input  [31:0] mux_case_7210788;
input  [31:0] mux_case_0212795;
input  [31:0] mux_case_1213802;
input  [31:0] mux_case_2214809;
input  [31:0] mux_case_3215816;
input  [31:0] mux_case_4216823;
input  [31:0] mux_case_5217830;
input  [31:0] mux_case_6218837;
input  [31:0] mux_case_7219844;
input  [31:0] mux_case_0221851;
input  [31:0] mux_case_1222858;
input  [31:0] mux_case_2223865;
input  [31:0] mux_case_3224872;
input  [31:0] mux_case_4225879;
input  [31:0] mux_case_5226886;
input  [31:0] mux_case_6227893;
input  [31:0] mux_case_7228900;
input  [31:0] tmp;
input  [31:0] tmp_1;
input  [31:0] tmp_2;
input  [31:0] tmp_3;
input  [31:0] tmp_4;
input  [31:0] tmp_5;
input  [31:0] tmp_6;
input  [31:0] tmp_7;
input  [2:0] row_2;
output  [31:0] res_out;
output   res_out_ap_vld;

reg ap_idle;
reg res_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln43_reg_1126;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln43_fu_674_p2;
reg   [0:0] icmp_ln43_reg_1126_pp0_iter1_reg;
wire   [31:0] tmp_15_fu_1010_p19;
reg   [31:0] tmp_15_reg_1130;
wire   [31:0] tmp_16_fu_1050_p19;
reg   [31:0] tmp_16_reg_1135;
wire   [31:0] grp_fu_657_p2;
reg   [31:0] mul_reg_1140;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage1_subdone;
reg   [31:0] res_fu_200;
wire   [31:0] grp_fu_653_p2;
reg   [31:0] ap_sig_allocacmp_res_load;
wire    ap_block_pp0_stage1;
wire    ap_loop_init;
reg    ap_loop_exit_ready_pp0_iter1_reg;
wire    ap_block_pp0_stage2_11001;
reg    ap_condition_exit_pp0_iter1_stage1;
reg    ap_idle_pp0_0to0;
reg   [3:0] index_fu_204;
wire   [3:0] add_ln43_fu_680_p2;
reg   [3:0] ap_sig_allocacmp_index_1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1_01001;
wire   [31:0] tmp_s_fu_690_p17;
wire   [2:0] trunc_ln43_fu_686_p1;
wire   [31:0] tmp_8_fu_730_p17;
wire   [31:0] tmp_9_fu_770_p17;
wire   [31:0] tmp_10_fu_810_p17;
wire   [31:0] tmp_11_fu_850_p17;
wire   [31:0] tmp_12_fu_890_p17;
wire   [31:0] tmp_13_fu_930_p17;
wire   [31:0] tmp_14_fu_970_p17;
wire   [31:0] tmp_s_fu_690_p19;
wire   [31:0] tmp_8_fu_730_p19;
wire   [31:0] tmp_9_fu_770_p19;
wire   [31:0] tmp_10_fu_810_p19;
wire   [31:0] tmp_11_fu_850_p19;
wire   [31:0] tmp_12_fu_890_p19;
wire   [31:0] tmp_13_fu_930_p19;
wire   [31:0] tmp_14_fu_970_p19;
wire   [31:0] tmp_15_fu_1010_p17;
wire   [31:0] tmp_16_fu_1050_p17;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [2:0] tmp_s_fu_690_p1;
wire   [2:0] tmp_s_fu_690_p3;
wire   [2:0] tmp_s_fu_690_p5;
wire   [2:0] tmp_s_fu_690_p7;
wire  signed [2:0] tmp_s_fu_690_p9;
wire  signed [2:0] tmp_s_fu_690_p11;
wire  signed [2:0] tmp_s_fu_690_p13;
wire  signed [2:0] tmp_s_fu_690_p15;
wire   [2:0] tmp_8_fu_730_p1;
wire   [2:0] tmp_8_fu_730_p3;
wire   [2:0] tmp_8_fu_730_p5;
wire   [2:0] tmp_8_fu_730_p7;
wire  signed [2:0] tmp_8_fu_730_p9;
wire  signed [2:0] tmp_8_fu_730_p11;
wire  signed [2:0] tmp_8_fu_730_p13;
wire  signed [2:0] tmp_8_fu_730_p15;
wire   [2:0] tmp_9_fu_770_p1;
wire   [2:0] tmp_9_fu_770_p3;
wire   [2:0] tmp_9_fu_770_p5;
wire   [2:0] tmp_9_fu_770_p7;
wire  signed [2:0] tmp_9_fu_770_p9;
wire  signed [2:0] tmp_9_fu_770_p11;
wire  signed [2:0] tmp_9_fu_770_p13;
wire  signed [2:0] tmp_9_fu_770_p15;
wire   [2:0] tmp_10_fu_810_p1;
wire   [2:0] tmp_10_fu_810_p3;
wire   [2:0] tmp_10_fu_810_p5;
wire   [2:0] tmp_10_fu_810_p7;
wire  signed [2:0] tmp_10_fu_810_p9;
wire  signed [2:0] tmp_10_fu_810_p11;
wire  signed [2:0] tmp_10_fu_810_p13;
wire  signed [2:0] tmp_10_fu_810_p15;
wire   [2:0] tmp_11_fu_850_p1;
wire   [2:0] tmp_11_fu_850_p3;
wire   [2:0] tmp_11_fu_850_p5;
wire   [2:0] tmp_11_fu_850_p7;
wire  signed [2:0] tmp_11_fu_850_p9;
wire  signed [2:0] tmp_11_fu_850_p11;
wire  signed [2:0] tmp_11_fu_850_p13;
wire  signed [2:0] tmp_11_fu_850_p15;
wire   [2:0] tmp_12_fu_890_p1;
wire   [2:0] tmp_12_fu_890_p3;
wire   [2:0] tmp_12_fu_890_p5;
wire   [2:0] tmp_12_fu_890_p7;
wire  signed [2:0] tmp_12_fu_890_p9;
wire  signed [2:0] tmp_12_fu_890_p11;
wire  signed [2:0] tmp_12_fu_890_p13;
wire  signed [2:0] tmp_12_fu_890_p15;
wire   [2:0] tmp_13_fu_930_p1;
wire   [2:0] tmp_13_fu_930_p3;
wire   [2:0] tmp_13_fu_930_p5;
wire   [2:0] tmp_13_fu_930_p7;
wire  signed [2:0] tmp_13_fu_930_p9;
wire  signed [2:0] tmp_13_fu_930_p11;
wire  signed [2:0] tmp_13_fu_930_p13;
wire  signed [2:0] tmp_13_fu_930_p15;
wire   [2:0] tmp_14_fu_970_p1;
wire   [2:0] tmp_14_fu_970_p3;
wire   [2:0] tmp_14_fu_970_p5;
wire   [2:0] tmp_14_fu_970_p7;
wire  signed [2:0] tmp_14_fu_970_p9;
wire  signed [2:0] tmp_14_fu_970_p11;
wire  signed [2:0] tmp_14_fu_970_p13;
wire  signed [2:0] tmp_14_fu_970_p15;
wire   [2:0] tmp_15_fu_1010_p1;
wire   [2:0] tmp_15_fu_1010_p3;
wire   [2:0] tmp_15_fu_1010_p5;
wire   [2:0] tmp_15_fu_1010_p7;
wire  signed [2:0] tmp_15_fu_1010_p9;
wire  signed [2:0] tmp_15_fu_1010_p11;
wire  signed [2:0] tmp_15_fu_1010_p13;
wire  signed [2:0] tmp_15_fu_1010_p15;
wire   [2:0] tmp_16_fu_1050_p1;
wire   [2:0] tmp_16_fu_1050_p3;
wire   [2:0] tmp_16_fu_1050_p5;
wire   [2:0] tmp_16_fu_1050_p7;
wire  signed [2:0] tmp_16_fu_1050_p9;
wire  signed [2:0] tmp_16_fu_1050_p11;
wire  signed [2:0] tmp_16_fu_1050_p13;
wire  signed [2:0] tmp_16_fu_1050_p15;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 res_fu_200 = 32'd0;
#0 index_fu_204 = 4'd0;
#0 ap_done_reg = 1'b0;
end

matrixmul_8_unopt_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U139(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_res_load),
    .din1(mul_reg_1140),
    .ce(1'b1),
    .dout(grp_fu_653_p2)
);

matrixmul_8_unopt_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U140(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_15_reg_1130),
    .din1(tmp_16_reg_1135),
    .ce(1'b1),
    .dout(grp_fu_657_p2)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U141(
    .din0(mux_case_0456),
    .din1(mux_case_1463),
    .din2(mux_case_2470),
    .din3(mux_case_3477),
    .din4(mux_case_4484),
    .din5(mux_case_5491),
    .din6(mux_case_6498),
    .din7(mux_case_7505),
    .def(tmp_s_fu_690_p17),
    .sel(trunc_ln43_fu_686_p1),
    .dout(tmp_s_fu_690_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U142(
    .din0(mux_case_0167515),
    .din1(mux_case_1168522),
    .din2(mux_case_2169529),
    .din3(mux_case_3170536),
    .din4(mux_case_4171543),
    .din5(mux_case_5172550),
    .din6(mux_case_6173557),
    .din7(mux_case_7174564),
    .def(tmp_8_fu_730_p17),
    .sel(trunc_ln43_fu_686_p1),
    .dout(tmp_8_fu_730_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U143(
    .din0(mux_case_0176571),
    .din1(mux_case_1177578),
    .din2(mux_case_2178585),
    .din3(mux_case_3179592),
    .din4(mux_case_4180599),
    .din5(mux_case_5181606),
    .din6(mux_case_6182613),
    .din7(mux_case_7183620),
    .def(tmp_9_fu_770_p17),
    .sel(trunc_ln43_fu_686_p1),
    .dout(tmp_9_fu_770_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U144(
    .din0(mux_case_0185627),
    .din1(mux_case_1186634),
    .din2(mux_case_2187641),
    .din3(mux_case_3188648),
    .din4(mux_case_4189655),
    .din5(mux_case_5190662),
    .din6(mux_case_6191669),
    .din7(mux_case_7192676),
    .def(tmp_10_fu_810_p17),
    .sel(trunc_ln43_fu_686_p1),
    .dout(tmp_10_fu_810_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U145(
    .din0(mux_case_0194683),
    .din1(mux_case_1195690),
    .din2(mux_case_2196697),
    .din3(mux_case_3197704),
    .din4(mux_case_4198711),
    .din5(mux_case_5199718),
    .din6(mux_case_6200725),
    .din7(mux_case_7201732),
    .def(tmp_11_fu_850_p17),
    .sel(trunc_ln43_fu_686_p1),
    .dout(tmp_11_fu_850_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U146(
    .din0(mux_case_0203739),
    .din1(mux_case_1204746),
    .din2(mux_case_2205753),
    .din3(mux_case_3206760),
    .din4(mux_case_4207767),
    .din5(mux_case_5208774),
    .din6(mux_case_6209781),
    .din7(mux_case_7210788),
    .def(tmp_12_fu_890_p17),
    .sel(trunc_ln43_fu_686_p1),
    .dout(tmp_12_fu_890_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U147(
    .din0(mux_case_0212795),
    .din1(mux_case_1213802),
    .din2(mux_case_2214809),
    .din3(mux_case_3215816),
    .din4(mux_case_4216823),
    .din5(mux_case_5217830),
    .din6(mux_case_6218837),
    .din7(mux_case_7219844),
    .def(tmp_13_fu_930_p17),
    .sel(trunc_ln43_fu_686_p1),
    .dout(tmp_13_fu_930_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U148(
    .din0(mux_case_0221851),
    .din1(mux_case_1222858),
    .din2(mux_case_2223865),
    .din3(mux_case_3224872),
    .din4(mux_case_4225879),
    .din5(mux_case_5226886),
    .din6(mux_case_6227893),
    .din7(mux_case_7228900),
    .def(tmp_14_fu_970_p17),
    .sel(trunc_ln43_fu_686_p1),
    .dout(tmp_14_fu_970_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U149(
    .din0(tmp_s_fu_690_p19),
    .din1(tmp_8_fu_730_p19),
    .din2(tmp_9_fu_770_p19),
    .din3(tmp_10_fu_810_p19),
    .din4(tmp_11_fu_850_p19),
    .din5(tmp_12_fu_890_p19),
    .din6(tmp_13_fu_930_p19),
    .din7(tmp_14_fu_970_p19),
    .def(tmp_15_fu_1010_p17),
    .sel(row_2),
    .dout(tmp_15_fu_1010_p19)
);

(* dissolve_hierarchy = "yes" *) matrixmul_8_unopt_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U150(
    .din0(tmp),
    .din1(tmp_1),
    .din2(tmp_2),
    .din3(tmp_3),
    .din4(tmp_4),
    .din5(tmp_5),
    .din6(tmp_6),
    .din7(tmp_7),
    .def(tmp_16_fu_1050_p17),
    .sel(trunc_ln43_fu_686_p1),
    .dout(tmp_16_fu_1050_p19)
);

matrixmul_8_unopt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_exit_pp0_iter1_stage1) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln43_fu_674_p2 == 1'd0))) begin
            index_fu_204 <= add_ln43_fu_680_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            index_fu_204 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        res_fu_200 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_fu_200 <= grp_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln43_reg_1126 <= icmp_ln43_fu_674_p2;
        icmp_ln43_reg_1126_pp0_iter1_reg <= icmp_ln43_reg_1126;
        mul_reg_1140 <= grp_fu_657_p2;
        tmp_15_reg_1130 <= tmp_15_fu_1010_p19;
        tmp_16_reg_1135 <= tmp_16_fu_1050_p19;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_1126 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_reg_1126_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_index_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_index_1 = index_fu_204;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_res_load = grp_fu_653_p2;
    end else begin
        ap_sig_allocacmp_res_load = res_fu_200;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (icmp_ln43_reg_1126_pp0_iter1_reg == 1'd1))) begin
        res_out_ap_vld = 1'b1;
    end else begin
        res_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((1'b1 == ap_condition_exit_pp0_iter1_stage1) & (ap_idle_pp0_0to0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_fu_680_p2 = (ap_sig_allocacmp_index_1 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign ap_ready = ap_ready_sig;

assign icmp_ln43_fu_674_p2 = ((ap_sig_allocacmp_index_1 == 4'd8) ? 1'b1 : 1'b0);

assign res_out = res_fu_200;

assign tmp_10_fu_810_p17 = 'bx;

assign tmp_11_fu_850_p17 = 'bx;

assign tmp_12_fu_890_p17 = 'bx;

assign tmp_13_fu_930_p17 = 'bx;

assign tmp_14_fu_970_p17 = 'bx;

assign tmp_15_fu_1010_p17 = 'bx;

assign tmp_16_fu_1050_p17 = 'bx;

assign tmp_8_fu_730_p17 = 'bx;

assign tmp_9_fu_770_p17 = 'bx;

assign tmp_s_fu_690_p17 = 'bx;

assign trunc_ln43_fu_686_p1 = ap_sig_allocacmp_index_1[2:0];

endmodule //matrixmul_8_unopt_matrixmul_8_unopt_Pipeline_loop3
