-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul_100_unopt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_A_TVALID : IN STD_LOGIC;
    in_A_TREADY : OUT STD_LOGIC;
    in_A_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_A_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_C_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_C_TVALID : OUT STD_LOGIC;
    out_C_TREADY : IN STD_LOGIC;
    out_C_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_C_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_C_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of matrixmul_100_unopt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_100_unopt_matrixmul_100_unopt,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.301000,HLS_SYN_LAT=3111204,HLS_SYN_TPT=none,HLS_SYN_MEM=66,HLS_SYN_DSP=0,HLS_SYN_FF=931,HLS_SYN_LUT=1294,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_A_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal icmp_ln21_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_grp2 : BOOLEAN;
    signal icmp_ln30_reg_760 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_C_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln55_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal icmp_ln55_reg_893_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_reg_228 : STD_LOGIC_VECTOR (6 downto 0);
    signal col_1_reg_239 : STD_LOGIC_VECTOR (6 downto 0);
    signal index_reg_261 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul3_reg_273 : STD_LOGIC_VECTOR (13 downto 0);
    signal res_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_3_reg_298 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_load_reg_680 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln20_1_fu_338_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln20_1_reg_685 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln20_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_fu_350_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_reg_694 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln21_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter1_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln21_fu_372_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln25_fu_382_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln25_reg_722 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul1_load_reg_727 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln29_1_fu_410_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln29_1_reg_732 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln29_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln29_fu_422_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln29_reg_741 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln30_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_pp1_stage0_iter1_grp2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln30_fu_444_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal add_ln34_fu_454_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_reg_769 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul5_load_reg_774 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln40_1_fu_482_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_1_reg_779 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_fu_494_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_reg_787 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln41_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln41_fu_516_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln41_reg_810 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln49_fu_522_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln49_reg_815 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_C_addr_1_reg_820 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln43_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln43_reg_825_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_825_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal input_A_load_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal input_B_load_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_fu_574_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln43_reg_849 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal add_ln47_2_fu_580_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln47_2_reg_854 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal phi_mul7_load_reg_869 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln54_1_fu_592_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln54_1_reg_874 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln54_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_fu_604_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln54_reg_883 : STD_LOGIC_VECTOR (6 downto 0);
    signal cmp68_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp68_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state24_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state25_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln55_fu_622_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal out_element_last_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_element_last_reg_907 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_condition_pp2_exit_iter1_state16 : STD_LOGIC;
    signal regslice_both_out_C_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state23 : STD_LOGIC;
    signal input_A_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_B_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_C_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_2_reg_250 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln40_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_phi_mux_index_phi_fu_265_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_phi_mul3_phi_fu_277_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_res_phi_fu_290_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal zext_ln25_1_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_1_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_1_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_1_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_2_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul_fu_98 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal row_fu_102 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal phi_mul1_fu_118 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal row_1_fu_122 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal phi_mul5_fu_126 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal row_2_fu_130 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal phi_mul7_fu_134 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal row_3_fu_138 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001_grp2 : BOOLEAN;
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal input_A_we0_local : STD_LOGIC;
    signal local_stream_data_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_A_ce0_local : STD_LOGIC;
    signal input_A_address0_local : STD_LOGIC_VECTOR (13 downto 0);
    signal input_B_we0_local : STD_LOGIC;
    signal local_stream_data_1_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_B_ce0_local : STD_LOGIC;
    signal input_B_address0_local : STD_LOGIC_VECTOR (13 downto 0);
    signal output_C_we0_local : STD_LOGIC;
    signal output_C_ce0_local : STD_LOGIC;
    signal output_C_address0_local : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln25_fu_378_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln34_fu_450_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln49_fu_526_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln47_fu_550_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln47_fu_554_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln47_1_fu_564_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln61_fu_628_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln61_fu_632_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln63_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal regslice_both_in_A_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_A_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_A_TVALID_int_regslice : STD_LOGIC;
    signal in_A_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_A_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_A_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_A_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_A_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_A_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_A_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_A_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_A_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_A_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_A_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_A_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_A_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_A_V_last_V_U_ack_in : STD_LOGIC;
    signal out_C_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_C_TVALID_int_regslice : STD_LOGIC;
    signal out_C_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_C_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_C_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_C_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_C_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_C_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal out_C_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_out_C_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_C_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_C_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_C_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_C_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_100_unopt_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_100_unopt_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_100_unopt_input_A_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_100_unopt_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    input_A_U : component matrixmul_100_unopt_input_A_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_A_address0_local,
        ce0 => input_A_ce0_local,
        we0 => input_A_we0_local,
        d0 => local_stream_data_fu_391_p1,
        q0 => input_A_q0);

    input_B_U : component matrixmul_100_unopt_input_A_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_B_address0_local,
        ce0 => input_B_ce0_local,
        we0 => input_B_we0_local,
        d0 => local_stream_data_1_fu_463_p1,
        q0 => input_B_q0);

    output_C_U : component matrixmul_100_unopt_input_A_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_C_address0_local,
        ce0 => output_C_ce0_local,
        we0 => output_C_we0_local,
        d0 => res_reg_285,
        q0 => output_C_q0);

    fadd_32ns_32ns_32_4_full_dsp_1_U1 : component matrixmul_100_unopt_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_phi_mux_res_phi_fu_290_p4,
        din1 => mul_reg_859,
        ce => ap_const_logic_1,
        dout => grp_fu_309_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U2 : component matrixmul_100_unopt_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => input_A_load_reg_839,
        din1 => input_B_load_reg_844,
        ce => ap_const_logic_1,
        dout => grp_fu_314_p2);

    regslice_both_in_A_V_data_V_U : component matrixmul_100_unopt_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_A_TDATA,
        vld_in => in_A_TVALID,
        ack_in => regslice_both_in_A_V_data_V_U_ack_in,
        data_out => in_A_TDATA_int_regslice,
        vld_out => in_A_TVALID_int_regslice,
        ack_out => in_A_TREADY_int_regslice,
        apdone_blk => regslice_both_in_A_V_data_V_U_apdone_blk);

    regslice_both_in_A_V_keep_V_U : component matrixmul_100_unopt_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_A_TKEEP,
        vld_in => in_A_TVALID,
        ack_in => regslice_both_in_A_V_keep_V_U_ack_in,
        data_out => in_A_TKEEP_int_regslice,
        vld_out => regslice_both_in_A_V_keep_V_U_vld_out,
        ack_out => in_A_TREADY_int_regslice,
        apdone_blk => regslice_both_in_A_V_keep_V_U_apdone_blk);

    regslice_both_in_A_V_strb_V_U : component matrixmul_100_unopt_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_A_TSTRB,
        vld_in => in_A_TVALID,
        ack_in => regslice_both_in_A_V_strb_V_U_ack_in,
        data_out => in_A_TSTRB_int_regslice,
        vld_out => regslice_both_in_A_V_strb_V_U_vld_out,
        ack_out => in_A_TREADY_int_regslice,
        apdone_blk => regslice_both_in_A_V_strb_V_U_apdone_blk);

    regslice_both_in_A_V_last_V_U : component matrixmul_100_unopt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_A_TLAST,
        vld_in => in_A_TVALID,
        ack_in => regslice_both_in_A_V_last_V_U_ack_in,
        data_out => in_A_TLAST_int_regslice,
        vld_out => regslice_both_in_A_V_last_V_U_vld_out,
        ack_out => in_A_TREADY_int_regslice,
        apdone_blk => regslice_both_in_A_V_last_V_U_apdone_blk);

    regslice_both_out_C_V_data_V_U : component matrixmul_100_unopt_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_C_TDATA_int_regslice,
        vld_in => out_C_TVALID_int_regslice,
        ack_in => out_C_TREADY_int_regslice,
        data_out => out_C_TDATA,
        vld_out => regslice_both_out_C_V_data_V_U_vld_out,
        ack_out => out_C_TREADY,
        apdone_blk => regslice_both_out_C_V_data_V_U_apdone_blk);

    regslice_both_out_C_V_keep_V_U : component matrixmul_100_unopt_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => out_C_TVALID_int_regslice,
        ack_in => regslice_both_out_C_V_keep_V_U_ack_in_dummy,
        data_out => out_C_TKEEP,
        vld_out => regslice_both_out_C_V_keep_V_U_vld_out,
        ack_out => out_C_TREADY,
        apdone_blk => regslice_both_out_C_V_keep_V_U_apdone_blk);

    regslice_both_out_C_V_strb_V_U : component matrixmul_100_unopt_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_C_TSTRB_int_regslice,
        vld_in => out_C_TVALID_int_regslice,
        ack_in => regslice_both_out_C_V_strb_V_U_ack_in_dummy,
        data_out => out_C_TSTRB,
        vld_out => regslice_both_out_C_V_strb_V_U_vld_out,
        ack_out => out_C_TREADY,
        apdone_blk => regslice_both_out_C_V_strb_V_U_apdone_blk);

    regslice_both_out_C_V_last_V_U : component matrixmul_100_unopt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_element_last_reg_907,
        vld_in => out_C_TVALID_int_regslice,
        ack_in => regslice_both_out_C_V_last_V_U_ack_in_dummy,
        data_out => out_C_TLAST,
        vld_out => regslice_both_out_C_V_last_V_U_vld_out,
        ack_out => out_C_TREADY,
        apdone_blk => regslice_both_out_C_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_344_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_344_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln29_fu_416_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln29_fu_416_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln41_fu_510_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln41_fu_510_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter0_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                    if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter1_state16))) then 
                        ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter1_state16) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln41_fu_510_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state23))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((regslice_both_out_C_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln54_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state23)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state23);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((regslice_both_out_C_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln54_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_1_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln30_fu_438_p2 = ap_const_lv1_0))) then 
                col_1_reg_239 <= add_ln30_fu_444_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln29_fu_416_p2 = ap_const_lv1_0))) then 
                col_1_reg_239 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    col_2_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                col_2_reg_250 <= add_ln41_reg_810;
            elsif (((icmp_ln40_fu_488_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                col_2_reg_250 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    col_3_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln55_fu_616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                col_3_reg_298 <= add_ln55_fu_622_p2;
            elsif (((regslice_both_out_C_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln54_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                col_3_reg_298 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    col_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_fu_366_p2 = ap_const_lv1_0))) then 
                col_reg_228 <= add_ln21_fu_372_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_344_p2 = ap_const_lv1_0))) then 
                col_reg_228 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    index_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln43_reg_825 = ap_const_lv1_0))) then 
                index_reg_261 <= add_ln43_reg_849;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln41_fu_510_p2 = ap_const_lv1_0))) then 
                index_reg_261 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul1_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_344_p2 = ap_const_lv1_1))) then 
                phi_mul1_fu_118 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                phi_mul1_fu_118 <= add_ln29_1_reg_732;
            end if; 
        end if;
    end process;

    phi_mul3_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln43_reg_825 = ap_const_lv1_0))) then 
                phi_mul3_reg_273 <= add_ln47_2_reg_854;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln41_fu_510_p2 = ap_const_lv1_0))) then 
                phi_mul3_reg_273 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul5_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln29_fu_416_p2 = ap_const_lv1_1))) then 
                phi_mul5_fu_126 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln41_fu_510_p2 = ap_const_lv1_1))) then 
                phi_mul5_fu_126 <= add_ln40_1_reg_779;
            end if; 
        end if;
    end process;

    phi_mul7_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                phi_mul7_fu_134 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                phi_mul7_fu_134 <= add_ln54_1_reg_874;
            end if; 
        end if;
    end process;

    phi_mul_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                phi_mul_fu_98 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                phi_mul_fu_98 <= add_ln20_1_reg_685;
            end if; 
        end if;
    end process;

    res_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln43_reg_825_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                res_reg_285 <= grp_fu_309_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln41_fu_510_p2 = ap_const_lv1_0))) then 
                res_reg_285 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_1_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_344_p2 = ap_const_lv1_1))) then 
                row_1_fu_122 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                row_1_fu_122 <= add_ln29_reg_741;
            end if; 
        end if;
    end process;

    row_2_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln29_fu_416_p2 = ap_const_lv1_1))) then 
                row_2_fu_130 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln41_fu_510_p2 = ap_const_lv1_1))) then 
                row_2_fu_130 <= add_ln40_reg_787;
            end if; 
        end if;
    end process;

    row_3_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                row_3_fu_138 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                row_3_fu_138 <= add_ln54_reg_883;
            end if; 
        end if;
    end process;

    row_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                row_fu_102 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                row_fu_102 <= add_ln20_reg_694;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln20_1_reg_685 <= add_ln20_1_fu_338_p2;
                add_ln20_reg_694 <= add_ln20_fu_350_p2;
                phi_mul_load_reg_680 <= phi_mul_fu_98;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln25_reg_722 <= add_ln25_fu_382_p2;
                icmp_ln21_reg_713 <= icmp_ln21_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln29_1_reg_732 <= add_ln29_1_fu_410_p2;
                add_ln29_reg_741 <= add_ln29_fu_422_p2;
                phi_mul1_load_reg_727 <= phi_mul1_fu_118;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln34_reg_769 <= add_ln34_fu_454_p2;
                icmp_ln30_reg_760 <= icmp_ln30_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln40_1_reg_779 <= add_ln40_1_fu_482_p2;
                add_ln40_reg_787 <= add_ln40_fu_494_p2;
                phi_mul5_load_reg_774 <= phi_mul5_fu_126;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln41_reg_810 <= add_ln41_fu_516_p2;
                output_C_addr_1_reg_820 <= zext_ln49_1_fu_531_p1(14 - 1 downto 0);
                    zext_ln49_reg_815(6 downto 0) <= zext_ln49_fu_522_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter0_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                add_ln43_reg_849 <= add_ln43_fu_574_p2;
                add_ln47_2_reg_854 <= add_ln47_2_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln54_1_reg_874 <= add_ln54_1_fu_592_p2;
                add_ln54_reg_883 <= add_ln54_fu_604_p2;
                cmp68_reg_888 <= cmp68_fu_610_p2;
                phi_mul7_load_reg_869 <= phi_mul7_fu_134;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln43_reg_825 <= icmp_ln43_fu_544_p2;
                icmp_ln43_reg_825_pp2_iter1_reg <= icmp_ln43_reg_825;
                icmp_ln43_reg_825_pp2_iter2_reg <= icmp_ln43_reg_825_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln55_reg_893 <= icmp_ln55_fu_616_p2;
                icmp_ln55_reg_893_pp3_iter1_reg <= icmp_ln55_reg_893;
                out_element_last_reg_907 <= out_element_last_fu_648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter0_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                input_A_load_reg_839 <= input_A_q0;
                input_B_load_reg_844 <= input_B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                mul_reg_859 <= grp_fu_314_p2;
            end if;
        end if;
    end process;
    zext_ln49_reg_815(13 downto 7) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_CS_fsm_state2, icmp_ln20_fu_344_p2, icmp_ln21_fu_366_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state6, icmp_ln29_fu_416_p2, icmp_ln30_fu_438_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state10, icmp_ln41_fu_510_p2, ap_CS_fsm_state11, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter2, ap_CS_fsm_state22, icmp_ln54_fu_598_p2, icmp_ln55_fu_616_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage2_subdone, ap_enable_reg_pp2_iter1, ap_condition_pp2_exit_iter1_state16, regslice_both_out_C_V_data_V_U_apdone_blk, ap_block_pp3_stage0_subdone, icmp_ln40_fu_488_p2, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_344_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_fu_366_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_fu_366_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln29_fu_416_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln30_fu_438_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln30_fu_438_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln40_fu_488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln41_fu_510_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter1_state16) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter1_state16) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state22 => 
                if (((regslice_both_out_C_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln54_fu_598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((regslice_both_out_C_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln54_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln55_fu_616_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln55_fu_616_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln20_1_fu_338_p2 <= std_logic_vector(unsigned(phi_mul_fu_98) + unsigned(ap_const_lv14_64));
    add_ln20_fu_350_p2 <= std_logic_vector(unsigned(row_fu_102) + unsigned(ap_const_lv7_1));
    add_ln21_fu_372_p2 <= std_logic_vector(unsigned(col_reg_228) + unsigned(ap_const_lv7_1));
    add_ln25_fu_382_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_680) + unsigned(zext_ln25_fu_378_p1));
    add_ln29_1_fu_410_p2 <= std_logic_vector(unsigned(phi_mul1_fu_118) + unsigned(ap_const_lv14_64));
    add_ln29_fu_422_p2 <= std_logic_vector(unsigned(row_1_fu_122) + unsigned(ap_const_lv7_1));
    add_ln30_fu_444_p2 <= std_logic_vector(unsigned(col_1_reg_239) + unsigned(ap_const_lv7_1));
    add_ln34_fu_454_p2 <= std_logic_vector(unsigned(phi_mul1_load_reg_727) + unsigned(zext_ln34_fu_450_p1));
    add_ln40_1_fu_482_p2 <= std_logic_vector(unsigned(phi_mul5_fu_126) + unsigned(ap_const_lv14_64));
    add_ln40_fu_494_p2 <= std_logic_vector(unsigned(row_2_fu_130) + unsigned(ap_const_lv7_1));
    add_ln41_fu_516_p2 <= std_logic_vector(unsigned(col_2_reg_250) + unsigned(ap_const_lv7_1));
    add_ln43_fu_574_p2 <= std_logic_vector(unsigned(index_reg_261) + unsigned(ap_const_lv7_1));
    add_ln47_1_fu_564_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_mul3_phi_fu_277_p4) + unsigned(zext_ln49_reg_815));
    add_ln47_2_fu_580_p2 <= std_logic_vector(unsigned(phi_mul3_reg_273) + unsigned(ap_const_lv14_64));
    add_ln47_fu_554_p2 <= std_logic_vector(unsigned(phi_mul5_load_reg_774) + unsigned(zext_ln47_fu_550_p1));
    add_ln49_fu_526_p2 <= std_logic_vector(unsigned(phi_mul5_fu_126) + unsigned(zext_ln49_fu_522_p1));
    add_ln54_1_fu_592_p2 <= std_logic_vector(unsigned(phi_mul7_fu_134) + unsigned(ap_const_lv14_64));
    add_ln54_fu_604_p2 <= std_logic_vector(unsigned(row_3_fu_138) + unsigned(ap_const_lv7_1));
    add_ln55_fu_622_p2 <= std_logic_vector(unsigned(col_3_reg_298) + unsigned(ap_const_lv7_1));
    add_ln61_fu_632_p2 <= std_logic_vector(unsigned(phi_mul7_load_reg_869) + unsigned(zext_ln61_fu_628_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(10);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(11);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(12);
    ap_CS_fsm_state22 <= ap_CS_fsm(13);
    ap_CS_fsm_state26 <= ap_CS_fsm(15);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(regslice_both_out_C_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_out_C_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter1_grp1));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter1_grp1));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter1_grp1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state8_pp1_stage0_iter1_grp2)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_pp1_stage0_iter1_grp2));
    end process;


    ap_block_pp1_stage0_11001_grp2_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state8_pp1_stage0_iter1_grp2)
    begin
                ap_block_pp1_stage0_11001_grp2 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_pp1_stage0_iter1_grp2));
    end process;

        ap_block_pp1_stage0_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state8_pp1_stage0_iter1_grp2)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_pp1_stage0_iter1_grp2));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_01001_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_block_state24_pp3_stage0_iter1, ap_block_state25_pp3_stage0_iter2)
    begin
                ap_block_pp3_stage0_01001 <= (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_pp3_stage0_iter2)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_pp3_stage0_iter1)));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_block_state24_pp3_stage0_iter1, ap_block_state25_pp3_stage0_iter2)
    begin
                ap_block_pp3_stage0_11001 <= (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_pp3_stage0_iter2)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_pp3_stage0_iter1)));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_block_state24_pp3_stage0_iter1, ap_block_state25_pp3_stage0_iter2)
    begin
                ap_block_pp3_stage0_subdone <= (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_pp3_stage0_iter2)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_pp3_stage0_iter1)));
    end process;


    ap_block_state24_pp3_stage0_iter1_assign_proc : process(icmp_ln55_reg_893, out_C_TREADY_int_regslice)
    begin
                ap_block_state24_pp3_stage0_iter1 <= ((icmp_ln55_reg_893 = ap_const_lv1_0) and (out_C_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state25_pp3_stage0_iter2_assign_proc : process(icmp_ln55_reg_893_pp3_iter1_reg, out_C_TREADY_int_regslice)
    begin
                ap_block_state25_pp3_stage0_iter2 <= ((icmp_ln55_reg_893_pp3_iter1_reg = ap_const_lv1_0) and (out_C_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_grp1_assign_proc : process(icmp_ln21_reg_713, in_A_TVALID_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter1_grp1 <= ((in_A_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln21_reg_713 = ap_const_lv1_0));
    end process;


    ap_block_state8_pp1_stage0_iter1_grp2_assign_proc : process(icmp_ln30_reg_760, in_A_TVALID_int_regslice)
    begin
                ap_block_state8_pp1_stage0_iter1_grp2 <= ((in_A_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln30_reg_760 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln21_fu_366_p2)
    begin
        if ((icmp_ln21_fu_366_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln30_fu_438_p2)
    begin
        if ((icmp_ln30_fu_438_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter1_state16_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_condition_pp2_exit_iter1_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter1_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(icmp_ln43_reg_825, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln43_reg_825 = ap_const_lv1_1))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state23_assign_proc : process(icmp_ln55_fu_616_p2)
    begin
        if ((icmp_ln55_fu_616_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_index_phi_fu_265_p4_assign_proc : process(index_reg_261, icmp_ln43_reg_825, ap_CS_fsm_pp2_stage0, add_ln43_reg_849, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln43_reg_825 = ap_const_lv1_0))) then 
            ap_phi_mux_index_phi_fu_265_p4 <= add_ln43_reg_849;
        else 
            ap_phi_mux_index_phi_fu_265_p4 <= index_reg_261;
        end if; 
    end process;


    ap_phi_mux_phi_mul3_phi_fu_277_p4_assign_proc : process(phi_mul3_reg_273, icmp_ln43_reg_825, ap_CS_fsm_pp2_stage0, add_ln47_2_reg_854, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln43_reg_825 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_mul3_phi_fu_277_p4 <= add_ln47_2_reg_854;
        else 
            ap_phi_mux_phi_mul3_phi_fu_277_p4 <= phi_mul3_reg_273;
        end if; 
    end process;


    ap_phi_mux_res_phi_fu_290_p4_assign_proc : process(res_reg_285, icmp_ln43_reg_825_pp2_iter2_reg, ap_CS_fsm_pp2_stage2, grp_fu_309_p2, ap_enable_reg_pp2_iter2, ap_block_pp2_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln43_reg_825_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            ap_phi_mux_res_phi_fu_290_p4 <= grp_fu_309_p2;
        else 
            ap_phi_mux_res_phi_fu_290_p4 <= res_reg_285;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cmp68_fu_610_p2 <= "1" when (row_3_fu_138 = ap_const_lv7_63) else "0";
    icmp_ln20_fu_344_p2 <= "1" when (row_fu_102 = ap_const_lv7_64) else "0";
    icmp_ln21_fu_366_p2 <= "1" when (col_reg_228 = ap_const_lv7_64) else "0";
    icmp_ln29_fu_416_p2 <= "1" when (row_1_fu_122 = ap_const_lv7_64) else "0";
    icmp_ln30_fu_438_p2 <= "1" when (col_1_reg_239 = ap_const_lv7_64) else "0";
    icmp_ln40_fu_488_p2 <= "1" when (row_2_fu_130 = ap_const_lv7_64) else "0";
    icmp_ln41_fu_510_p2 <= "1" when (col_2_reg_250 = ap_const_lv7_64) else "0";
    icmp_ln43_fu_544_p2 <= "1" when (ap_phi_mux_index_phi_fu_265_p4 = ap_const_lv7_64) else "0";
    icmp_ln54_fu_598_p2 <= "1" when (row_3_fu_138 = ap_const_lv7_64) else "0";
    icmp_ln55_fu_616_p2 <= "1" when (col_3_reg_298 = ap_const_lv7_64) else "0";
    icmp_ln63_fu_642_p2 <= "1" when (col_3_reg_298 = ap_const_lv7_63) else "0";

    in_A_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_grp1, icmp_ln21_reg_713, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_grp2, icmp_ln30_reg_760, in_A_TVALID_int_regslice)
    begin
        if ((((icmp_ln30_reg_760 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln21_reg_713 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_A_TDATA_blk_n <= in_A_TVALID_int_regslice;
        else 
            in_A_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_A_TREADY <= regslice_both_in_A_V_data_V_U_ack_in;

    in_A_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln21_reg_713, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln30_reg_760, ap_block_pp0_stage0_11001_grp1, ap_block_pp1_stage0_11001_grp2)
    begin
        if ((((icmp_ln30_reg_760 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln21_reg_713 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_A_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_A_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    input_A_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_grp1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, zext_ln25_1_fu_387_p1, zext_ln47_1_fu_559_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            input_A_address0_local <= zext_ln47_1_fu_559_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_A_address0_local <= zext_ln25_1_fu_387_p1(14 - 1 downto 0);
        else 
            input_A_address0_local <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_A_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_11001_grp1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            input_A_ce0_local <= ap_const_logic_1;
        else 
            input_A_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    input_A_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln21_reg_713, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((icmp_ln21_reg_713 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_A_we0_local <= ap_const_logic_1;
        else 
            input_A_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    input_B_address0_local_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_grp2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, zext_ln34_1_fu_459_p1, zext_ln47_2_fu_569_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            input_B_address0_local <= zext_ln47_2_fu_569_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            input_B_address0_local <= zext_ln34_1_fu_459_p1(14 - 1 downto 0);
        else 
            input_B_address0_local <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_B_ce0_local_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0_11001_grp2)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            input_B_ce0_local <= ap_const_logic_1;
        else 
            input_B_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    input_B_we0_local_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln30_reg_760, ap_block_pp1_stage0_11001_grp2)
    begin
        if (((icmp_ln30_reg_760 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            input_B_we0_local <= ap_const_logic_1;
        else 
            input_B_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    local_stream_data_1_fu_463_p1 <= in_A_TDATA_int_regslice;
    local_stream_data_fu_391_p1 <= in_A_TDATA_int_regslice;

    out_C_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln55_reg_893, ap_enable_reg_pp3_iter2, icmp_ln55_reg_893_pp3_iter1_reg, out_C_TREADY_int_regslice)
    begin
        if ((((icmp_ln55_reg_893_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0)) or ((icmp_ln55_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            out_C_TDATA_blk_n <= out_C_TREADY_int_regslice;
        else 
            out_C_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_C_TDATA_int_regslice <= output_C_q0;
    out_C_TSTRB_int_regslice <= "XXXX";
    out_C_TVALID <= regslice_both_out_C_V_data_V_U_vld_out;

    out_C_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln55_reg_893, ap_block_pp3_stage0_11001)
    begin
        if (((icmp_ln55_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            out_C_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_C_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    out_element_last_fu_648_p2 <= (icmp_ln63_fu_642_p2 and cmp68_reg_888);

    output_C_address0_local_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, output_C_addr_1_reg_820, ap_enable_reg_pp3_iter0, ap_CS_fsm_state21, zext_ln61_1_fu_637_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            output_C_address0_local <= zext_ln61_1_fu_637_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_C_address0_local <= output_C_addr_1_reg_820;
        else 
            output_C_address0_local <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_C_ce0_local_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            output_C_ce0_local <= ap_const_logic_1;
        else 
            output_C_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    output_C_we0_local_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_C_we0_local <= ap_const_logic_1;
        else 
            output_C_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln25_1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_reg_722),64));
    zext_ln25_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_228),14));
    zext_ln34_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_reg_769),64));
    zext_ln34_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_1_reg_239),14));
    zext_ln47_1_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln47_fu_554_p2),64));
    zext_ln47_2_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln47_1_fu_564_p2),64));
    zext_ln47_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_index_phi_fu_265_p4),14));
    zext_ln49_1_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_fu_526_p2),64));
    zext_ln49_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_2_reg_250),14));
    zext_ln61_1_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_fu_632_p2),64));
    zext_ln61_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_3_reg_298),14));
end behav;
