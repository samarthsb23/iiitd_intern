// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module inputdatamover (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TLAST,
        out_strm_re_address0,
        out_strm_re_ce0,
        out_strm_re_we0,
        out_strm_re_d0,
        out_strm_im_address0,
        out_strm_im_ce0,
        out_strm_im_we0,
        out_strm_im_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [0:0] in_r_TLAST;
output  [7:0] out_strm_re_address0;
output   out_strm_re_ce0;
output   out_strm_re_we0;
output  [63:0] out_strm_re_d0;
output  [7:0] out_strm_im_address0;
output   out_strm_im_ce0;
output   out_strm_im_we0;
output  [63:0] out_strm_im_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_strm_re_ce0;
reg out_strm_re_we0;
reg out_strm_im_ce0;
reg out_strm_im_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [127:0] in_V_data_0_data_out;
wire    in_V_data_0_vld_in;
wire    in_V_data_0_vld_out;
wire    in_V_data_0_ack_in;
reg    in_V_data_0_ack_out;
reg   [127:0] in_V_data_0_payload_A;
reg   [127:0] in_V_data_0_payload_B;
reg    in_V_data_0_sel_rd;
reg    in_V_data_0_sel_wr;
wire    in_V_data_0_sel;
wire    in_V_data_0_load_A;
wire    in_V_data_0_load_B;
reg   [1:0] in_V_data_0_state;
wire    in_V_data_0_state_cmp_full;
wire    in_V_last_V_0_vld_in;
reg    in_V_last_V_0_ack_out;
reg   [1:0] in_V_last_V_0_state;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [7:0] i_fu_149_p2;
reg    ap_block_state2;
reg    ap_block_state1;
wire   [0:0] icmp_ln8_fu_155_p2;
reg   [7:0] i_017_reg_101;
wire   [63:0] zext_ln11_fu_143_p1;
wire   [63:0] trunc_ln29_fu_119_p1;
wire   [63:0] tmp_data_im_load_new_fu_128_p4;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 in_V_data_0_sel_rd = 1'b0;
#0 in_V_data_0_sel_wr = 1'b0;
#0 in_V_data_0_state = 2'd0;
#0 in_V_last_V_0_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln8_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_data_0_ack_out == 1'b1) & (in_V_data_0_vld_out == 1'b1))) begin
            in_V_data_0_sel_rd <= ~in_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_data_0_ack_in == 1'b1) & (in_V_data_0_vld_in == 1'b1))) begin
            in_V_data_0_sel_wr <= ~in_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_data_0_state <= 2'd0;
    end else begin
        if ((((in_V_data_0_state == 2'd2) & (in_V_data_0_vld_in == 1'b0)) | ((in_V_data_0_state == 2'd3) & (in_V_data_0_vld_in == 1'b0) & (in_V_data_0_ack_out == 1'b1)))) begin
            in_V_data_0_state <= 2'd2;
        end else if ((((in_V_data_0_state == 2'd1) & (in_V_data_0_ack_out == 1'b0)) | ((in_V_data_0_state == 2'd3) & (in_V_data_0_ack_out == 1'b0) & (in_V_data_0_vld_in == 1'b1)))) begin
            in_V_data_0_state <= 2'd1;
        end else if (((~((in_V_data_0_vld_in == 1'b0) & (in_V_data_0_ack_out == 1'b1)) & ~((in_V_data_0_ack_out == 1'b0) & (in_V_data_0_vld_in == 1'b1)) & (in_V_data_0_state == 2'd3)) | ((in_V_data_0_state == 2'd1) & (in_V_data_0_ack_out == 1'b1)) | ((in_V_data_0_state == 2'd2) & (in_V_data_0_vld_in == 1'b1)))) begin
            in_V_data_0_state <= 2'd3;
        end else begin
            in_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_last_V_0_state == 2'd2) & (in_V_last_V_0_vld_in == 1'b0)) | ((in_V_last_V_0_state == 2'd3) & (in_V_last_V_0_vld_in == 1'b0) & (in_V_last_V_0_ack_out == 1'b1)))) begin
            in_V_last_V_0_state <= 2'd2;
        end else if ((((in_V_last_V_0_state == 2'd1) & (in_V_last_V_0_ack_out == 1'b0)) | ((in_V_last_V_0_state == 2'd3) & (in_V_last_V_0_ack_out == 1'b0) & (in_V_last_V_0_vld_in == 1'b1)))) begin
            in_V_last_V_0_state <= 2'd1;
        end else if (((~((in_V_last_V_0_vld_in == 1'b0) & (in_V_last_V_0_ack_out == 1'b1)) & ~((in_V_last_V_0_ack_out == 1'b0) & (in_V_last_V_0_vld_in == 1'b1)) & (in_V_last_V_0_state == 2'd3)) | ((in_V_last_V_0_state == 2'd1) & (in_V_last_V_0_ack_out == 1'b1)) | ((in_V_last_V_0_state == 2'd2) & (in_V_last_V_0_vld_in == 1'b1)))) begin
            in_V_last_V_0_state <= 2'd3;
        end else begin
            in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln8_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_017_reg_101 <= i_fu_149_p2;
    end else if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln8_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        i_017_reg_101 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_data_0_load_A == 1'b1)) begin
        in_V_data_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_data_0_load_B == 1'b1)) begin
        in_V_data_0_payload_B <= in_r_TDATA;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln8_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln8_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_data_0_ack_out = 1'b1;
    end else begin
        in_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_V_data_0_sel == 1'b1)) begin
        in_V_data_0_data_out = in_V_data_0_payload_B;
    end else begin
        in_V_data_0_data_out = in_V_data_0_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_last_V_0_ack_out = 1'b1;
    end else begin
        in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        in_r_TDATA_blk_n = in_V_data_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        out_strm_im_ce0 = 1'b1;
    end else begin
        out_strm_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        out_strm_im_we0 = 1'b1;
    end else begin
        out_strm_im_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        out_strm_re_ce0 = 1'b1;
    end else begin
        out_strm_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        out_strm_re_we0 = 1'b1;
    end else begin
        out_strm_re_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln8_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((ap_start == 1'b0) | (in_V_data_0_vld_out == 1'b0) | (ap_done_reg == 1'b1));
end

assign i_fu_149_p2 = (8'd1 + i_017_reg_101);

assign icmp_ln8_fu_155_p2 = ((i_017_reg_101 == 8'd199) ? 1'b1 : 1'b0);

assign in_V_data_0_ack_in = in_V_data_0_state[1'd1];

assign in_V_data_0_load_A = (in_V_data_0_state_cmp_full & ~in_V_data_0_sel_wr);

assign in_V_data_0_load_B = (in_V_data_0_state_cmp_full & in_V_data_0_sel_wr);

assign in_V_data_0_sel = in_V_data_0_sel_rd;

assign in_V_data_0_state_cmp_full = ((in_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_data_0_vld_in = in_r_TVALID;

assign in_V_data_0_vld_out = in_V_data_0_state[1'd0];

assign in_V_last_V_0_vld_in = in_r_TVALID;

assign in_r_TREADY = in_V_last_V_0_state[1'd1];

assign out_strm_im_address0 = zext_ln11_fu_143_p1;

assign out_strm_im_d0 = tmp_data_im_load_new_fu_128_p4;

assign out_strm_re_address0 = zext_ln11_fu_143_p1;

assign out_strm_re_d0 = trunc_ln29_fu_119_p1;

assign tmp_data_im_load_new_fu_128_p4 = {{in_V_data_0_data_out[127:64]}};

assign trunc_ln29_fu_119_p1 = in_V_data_0_data_out[63:0];

assign zext_ln11_fu_143_p1 = i_017_reg_101;

endmodule //inputdatamover
