-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AutoCorrelation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rec_sig_re_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rec_sig_re_ce0 : OUT STD_LOGIC;
    rec_sig_re_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    rec_sig_re_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rec_sig_re_ce1 : OUT STD_LOGIC;
    rec_sig_re_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    rec_sig_im_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rec_sig_im_ce0 : OUT STD_LOGIC;
    rec_sig_im_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    rec_sig_im_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rec_sig_im_ce1 : OUT STD_LOGIC;
    rec_sig_im_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    matrix1_re_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    matrix1_re_ce0 : OUT STD_LOGIC;
    matrix1_re_we0 : OUT STD_LOGIC;
    matrix1_re_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matrix1_re_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matrix1_im_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    matrix1_im_ce0 : OUT STD_LOGIC;
    matrix1_im_we0 : OUT STD_LOGIC;
    matrix1_im_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matrix1_im_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of AutoCorrelation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_4059400000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001011001010000000000000000000000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_65 : STD_LOGIC_VECTOR (6 downto 0) := "1100101";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_299 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_305 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln22_fu_311_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln22_reg_510 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_323_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_518 : STD_LOGIC_VECTOR (6 downto 0);
    signal l_fu_335_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln29_fu_357_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln29_reg_531 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_367_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_540 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_fu_373_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln30_reg_545 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal k_1_fu_389_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_reg_553 : STD_LOGIC_VECTOR (6 downto 0);
    signal rec_sig_re_addr_reg_558 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln30_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rec_sig_im_addr_reg_563 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_1_fu_416_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal l_1_reg_571 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln31_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln33_fu_437_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln33_reg_586 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_im_13_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_reg_615 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m2_reg_620 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m3_reg_625 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m4_reg_630 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_re_reg_635 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_259_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_im_reg_640 : STD_LOGIC_VECTOR (63 downto 0);
    signal matrix1_re_addr_2_reg_645 : STD_LOGIC_VECTOR (13 downto 0);
    signal matrix1_im_addr_2_reg_650 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln39_fu_464_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln39_reg_655 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal m_fu_476_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_reg_663 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_fu_488_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_reg_671 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal matrix1_re_addr_1_reg_676 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln40_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal matrix1_im_addr_1_reg_681 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_complex_re_write_a_reg_686 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_complex_im_write_a_reg_691 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_0_reg_142 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln23_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_153 : STD_LOGIC_VECTOR (13 downto 0);
    signal l_0_reg_165 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln22_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_176 : STD_LOGIC_VECTOR (6 downto 0);
    signal k1_0_reg_187 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln29_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul113_reg_198 : STD_LOGIC_VECTOR (13 downto 0);
    signal l2_0_reg_210 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal m_0_reg_221 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul115_reg_232 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_0_reg_244 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal icmp_ln39_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_1_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_1_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_1_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_1_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_255_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_259_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln24_fu_341_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln24_fu_345_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln30_fu_379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_fu_395_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln31_fu_406_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_1_fu_422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln33_fu_433_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln329_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln329_fu_447_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_494_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln41_fu_498_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_255_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);

    component MUSIC_top_dadddsubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MUSIC_top_dadd_64cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MUSIC_top_dmul_64dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MUSIC_top_ddiv_64eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    MUSIC_top_dadddsubkb_U5 : component MUSIC_top_dadddsubkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_255_p0,
        din1 => grp_fu_255_p1,
        opcode => grp_fu_255_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_255_p2);

    MUSIC_top_dadd_64cud_U6 : component MUSIC_top_dadd_64cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_259_p0,
        din1 => grp_fu_259_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_259_p2);

    MUSIC_top_dmul_64dEe_U7 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rec_sig_re_q1,
        din1 => rec_sig_re_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_267_p2);

    MUSIC_top_dmul_64dEe_U8 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rec_sig_im_q1,
        din1 => tmp_im_13_fu_453_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_273_p2);

    MUSIC_top_dmul_64dEe_U9 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rec_sig_im_q1,
        din1 => rec_sig_re_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_278_p2);

    MUSIC_top_dmul_64dEe_U10 : component MUSIC_top_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rec_sig_re_q1,
        din1 => tmp_im_13_fu_453_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_284_p2);

    MUSIC_top_ddiv_64eOg_U11 : component MUSIC_top_ddiv_64eOg
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_305,
        din1 => ap_const_lv64_4059400000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_289_p2);

    MUSIC_top_ddiv_64eOg_U12 : component MUSIC_top_ddiv_64eOg
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_299,
        din1 => ap_const_lv64_4059400000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_294_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln39_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_176 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln30_fu_383_p2 = ap_const_lv1_1))) then 
                i_0_reg_176 <= i_reg_540;
            end if; 
        end if;
    end process;

    k1_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln29_fu_361_p2 = ap_const_lv1_0))) then 
                k1_0_reg_187 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_410_p2 = ap_const_lv1_1))) then 
                k1_0_reg_187 <= k_1_reg_553;
            end if; 
        end if;
    end process;

    k_0_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_142 <= k_reg_518;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_reg_142 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    l2_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                l2_0_reg_210 <= l_1_reg_571;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln30_fu_383_p2 = ap_const_lv1_0))) then 
                l2_0_reg_210 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    l_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln22_fu_317_p2 = ap_const_lv1_0))) then 
                l_0_reg_165 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln23_fu_329_p2 = ap_const_lv1_0))) then 
                l_0_reg_165 <= l_fu_335_p2;
            end if; 
        end if;
    end process;

    m_0_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                m_0_reg_221 <= ap_const_lv7_0;
            elsif (((icmp_ln40_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                m_0_reg_221 <= m_reg_663;
            end if; 
        end if;
    end process;

    n_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln39_fu_470_p2 = ap_const_lv1_0))) then 
                n_0_reg_244 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                n_0_reg_244 <= n_reg_671;
            end if; 
        end if;
    end process;

    phi_mul113_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln29_fu_361_p2 = ap_const_lv1_0))) then 
                phi_mul113_reg_198 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_410_p2 = ap_const_lv1_1))) then 
                phi_mul113_reg_198 <= add_ln30_reg_545;
            end if; 
        end if;
    end process;

    phi_mul115_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul115_reg_232 <= ap_const_lv14_0;
            elsif (((icmp_ln40_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                phi_mul115_reg_232 <= add_ln39_reg_655;
            end if; 
        end if;
    end process;

    phi_mul_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_153 <= add_ln22_reg_510;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_153 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln22_reg_510 <= add_ln22_fu_311_p2;
                k_reg_518 <= k_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln30_reg_545 <= add_ln30_fu_373_p2;
                k_1_reg_553 <= k_1_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_410_p2 = ap_const_lv1_0))) then
                add_ln33_reg_586 <= add_ln33_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln39_reg_655 <= add_ln39_fu_464_p2;
                m_reg_663 <= m_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_540 <= i_fu_367_p2;
                    zext_ln29_reg_531(6 downto 0) <= zext_ln29_fu_357_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                l_1_reg_571 <= l_1_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                m1_reg_615 <= grp_fu_267_p2;
                m2_reg_620 <= grp_fu_273_p2;
                m3_reg_625 <= grp_fu_278_p2;
                m4_reg_630 <= grp_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln40_fu_482_p2 = ap_const_lv1_0))) then
                matrix1_im_addr_1_reg_681 <= zext_ln41_1_fu_504_p1(14 - 1 downto 0);
                matrix1_re_addr_1_reg_676 <= zext_ln41_1_fu_504_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                matrix1_im_addr_2_reg_650 <= zext_ln33_1_fu_459_p1(14 - 1 downto 0);
                matrix1_re_addr_2_reg_645 <= zext_ln33_1_fu_459_p1(14 - 1 downto 0);
                sum_im_reg_640 <= grp_fu_259_p2;
                sum_re_reg_635 <= grp_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                n_reg_671 <= n_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln30_fu_383_p2 = ap_const_lv1_0))) then
                rec_sig_im_addr_reg_563 <= zext_ln32_fu_400_p1(8 - 1 downto 0);
                rec_sig_re_addr_reg_558 <= zext_ln32_fu_400_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_299 <= matrix1_im_q0;
                reg_305 <= matrix1_re_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                x_complex_im_write_a_reg_691 <= grp_fu_294_p2;
                x_complex_re_write_a_reg_686 <= grp_fu_289_p2;
            end if;
        end if;
    end process;
    zext_ln29_reg_531(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln30_fu_383_p2, ap_CS_fsm_state6, icmp_ln31_fu_410_p2, ap_CS_fsm_state22, ap_CS_fsm_state23, icmp_ln40_fu_482_p2, icmp_ln23_fu_329_p2, icmp_ln22_fu_317_p2, icmp_ln29_fu_361_p2, icmp_ln39_fu_470_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln22_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln23_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln29_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln30_fu_383_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_410_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln39_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((icmp_ln40_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln22_fu_311_p2 <= std_logic_vector(unsigned(phi_mul_reg_153) + unsigned(ap_const_lv14_64));
    add_ln24_fu_345_p2 <= std_logic_vector(unsigned(phi_mul_reg_153) + unsigned(zext_ln24_fu_341_p1));
    add_ln30_fu_373_p2 <= std_logic_vector(unsigned(phi_mul113_reg_198) + unsigned(ap_const_lv14_64));
    add_ln32_1_fu_422_p2 <= std_logic_vector(unsigned(zext_ln29_reg_531) + unsigned(zext_ln31_fu_406_p1));
    add_ln32_fu_395_p2 <= std_logic_vector(unsigned(zext_ln29_reg_531) + unsigned(zext_ln30_fu_379_p1));
    add_ln33_fu_437_p2 <= std_logic_vector(unsigned(phi_mul113_reg_198) + unsigned(zext_ln33_fu_433_p1));
    add_ln39_fu_464_p2 <= std_logic_vector(unsigned(phi_mul115_reg_232) + unsigned(ap_const_lv14_64));
    add_ln41_fu_498_p2 <= std_logic_vector(unsigned(phi_mul115_reg_232) + unsigned(zext_ln41_fu_494_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state22, icmp_ln39_fu_470_p2)
    begin
        if (((icmp_ln39_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22, icmp_ln39_fu_470_p2)
    begin
        if (((icmp_ln39_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln329_fu_443_p1 <= rec_sig_im_q0;

    grp_fu_255_opcode_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_255_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_255_opcode <= ap_const_lv2_0;
        else 
            grp_fu_255_opcode <= "XX";
        end if; 
    end process;


    grp_fu_255_p0_assign_proc : process(ap_CS_fsm_state17, m1_reg_615, sum_re_reg_635, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_255_p0 <= sum_re_reg_635;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_255_p0 <= m1_reg_615;
        else 
            grp_fu_255_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_255_p1_assign_proc : process(matrix1_re_q0, ap_CS_fsm_state17, m2_reg_620, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_255_p1 <= matrix1_re_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_255_p1 <= m2_reg_620;
        else 
            grp_fu_255_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_259_p0_assign_proc : process(ap_CS_fsm_state17, m3_reg_625, sum_im_reg_640, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_259_p0 <= sum_im_reg_640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_259_p0 <= m3_reg_625;
        else 
            grp_fu_259_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_259_p1_assign_proc : process(matrix1_im_q0, ap_CS_fsm_state17, m4_reg_630, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_259_p1 <= matrix1_im_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_259_p1 <= m4_reg_630;
        else 
            grp_fu_259_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_367_p2 <= std_logic_vector(unsigned(i_0_reg_176) + unsigned(ap_const_lv7_1));
    icmp_ln22_fu_317_p2 <= "1" when (k_0_reg_142 = ap_const_lv7_64) else "0";
    icmp_ln23_fu_329_p2 <= "1" when (l_0_reg_165 = ap_const_lv7_64) else "0";
    icmp_ln29_fu_361_p2 <= "1" when (i_0_reg_176 = ap_const_lv7_65) else "0";
    icmp_ln30_fu_383_p2 <= "1" when (k1_0_reg_187 = ap_const_lv7_64) else "0";
    icmp_ln31_fu_410_p2 <= "1" when (l2_0_reg_210 = ap_const_lv7_64) else "0";
    icmp_ln39_fu_470_p2 <= "1" when (m_0_reg_221 = ap_const_lv7_64) else "0";
    icmp_ln40_fu_482_p2 <= "1" when (n_0_reg_244 = ap_const_lv7_64) else "0";
    k_1_fu_389_p2 <= std_logic_vector(unsigned(k1_0_reg_187) + unsigned(ap_const_lv7_1));
    k_fu_323_p2 <= std_logic_vector(unsigned(k_0_reg_142) + unsigned(ap_const_lv7_1));
    l_1_fu_416_p2 <= std_logic_vector(unsigned(l2_0_reg_210) + unsigned(ap_const_lv7_1));
    l_fu_335_p2 <= std_logic_vector(unsigned(l_0_reg_165) + unsigned(ap_const_lv7_1));
    m_fu_476_p2 <= std_logic_vector(unsigned(m_0_reg_221) + unsigned(ap_const_lv7_1));

    matrix1_im_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state16, matrix1_im_addr_2_reg_650, ap_CS_fsm_state23, matrix1_im_addr_1_reg_681, ap_CS_fsm_state21, ap_CS_fsm_state42, zext_ln24_1_fu_351_p1, zext_ln33_1_fu_459_p1, zext_ln41_1_fu_504_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            matrix1_im_address0 <= matrix1_im_addr_1_reg_681;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            matrix1_im_address0 <= zext_ln41_1_fu_504_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            matrix1_im_address0 <= matrix1_im_addr_2_reg_650;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            matrix1_im_address0 <= zext_ln33_1_fu_459_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matrix1_im_address0 <= zext_ln24_1_fu_351_p1(14 - 1 downto 0);
        else 
            matrix1_im_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    matrix1_im_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state21, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrix1_im_ce0 <= ap_const_logic_1;
        else 
            matrix1_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matrix1_im_d0_assign_proc : process(ap_CS_fsm_state3, grp_fu_259_p2, x_complex_im_write_a_reg_691, ap_CS_fsm_state21, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            matrix1_im_d0 <= x_complex_im_write_a_reg_691;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            matrix1_im_d0 <= grp_fu_259_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matrix1_im_d0 <= ap_const_lv64_0;
        else 
            matrix1_im_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    matrix1_im_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln23_fu_329_p2, ap_CS_fsm_state21, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln23_fu_329_p2 = ap_const_lv1_0)))) then 
            matrix1_im_we0 <= ap_const_logic_1;
        else 
            matrix1_im_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matrix1_re_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state16, matrix1_re_addr_2_reg_645, ap_CS_fsm_state23, matrix1_re_addr_1_reg_676, ap_CS_fsm_state21, ap_CS_fsm_state42, zext_ln24_1_fu_351_p1, zext_ln33_1_fu_459_p1, zext_ln41_1_fu_504_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            matrix1_re_address0 <= matrix1_re_addr_1_reg_676;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            matrix1_re_address0 <= zext_ln41_1_fu_504_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            matrix1_re_address0 <= matrix1_re_addr_2_reg_645;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            matrix1_re_address0 <= zext_ln33_1_fu_459_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matrix1_re_address0 <= zext_ln24_1_fu_351_p1(14 - 1 downto 0);
        else 
            matrix1_re_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    matrix1_re_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state21, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrix1_re_ce0 <= ap_const_logic_1;
        else 
            matrix1_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matrix1_re_d0_assign_proc : process(ap_CS_fsm_state3, grp_fu_255_p2, x_complex_re_write_a_reg_686, ap_CS_fsm_state21, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            matrix1_re_d0 <= x_complex_re_write_a_reg_686;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            matrix1_re_d0 <= grp_fu_255_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matrix1_re_d0 <= ap_const_lv64_0;
        else 
            matrix1_re_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    matrix1_re_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln23_fu_329_p2, ap_CS_fsm_state21, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln23_fu_329_p2 = ap_const_lv1_0)))) then 
            matrix1_re_we0 <= ap_const_logic_1;
        else 
            matrix1_re_we0 <= ap_const_logic_0;
        end if; 
    end process;

    n_fu_488_p2 <= std_logic_vector(unsigned(n_0_reg_244) + unsigned(ap_const_lv7_1));
    rec_sig_im_address0 <= rec_sig_im_addr_reg_563;
    rec_sig_im_address1 <= zext_ln32_1_fu_427_p1(8 - 1 downto 0);

    rec_sig_im_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rec_sig_im_ce0 <= ap_const_logic_1;
        else 
            rec_sig_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rec_sig_im_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rec_sig_im_ce1 <= ap_const_logic_1;
        else 
            rec_sig_im_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rec_sig_re_address0 <= rec_sig_re_addr_reg_558;
    rec_sig_re_address1 <= zext_ln32_1_fu_427_p1(8 - 1 downto 0);

    rec_sig_re_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rec_sig_re_ce0 <= ap_const_logic_1;
        else 
            rec_sig_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rec_sig_re_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rec_sig_re_ce1 <= ap_const_logic_1;
        else 
            rec_sig_re_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_im_13_fu_453_p1 <= xor_ln329_fu_447_p2;
    xor_ln329_fu_447_p2 <= (bitcast_ln329_fu_443_p1 xor ap_const_lv64_8000000000000000);
    zext_ln24_1_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_345_p2),64));
    zext_ln24_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_reg_165),14));
    zext_ln29_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_176),8));
    zext_ln30_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k1_0_reg_187),8));
    zext_ln31_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l2_0_reg_210),8));
    zext_ln32_1_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_1_fu_422_p2),64));
    zext_ln32_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_395_p2),64));
    zext_ln33_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_reg_586),64));
    zext_ln33_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l2_0_reg_210),14));
    zext_ln41_1_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_fu_498_p2),64));
    zext_ln41_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_244),14));
end behav;
