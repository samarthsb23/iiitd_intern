// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AutoCorrelation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rec_sig_re_address0,
        rec_sig_re_ce0,
        rec_sig_re_q0,
        rec_sig_re_address1,
        rec_sig_re_ce1,
        rec_sig_re_q1,
        rec_sig_im_address0,
        rec_sig_im_ce0,
        rec_sig_im_q0,
        rec_sig_im_address1,
        rec_sig_im_ce1,
        rec_sig_im_q1,
        matrix1_re_address0,
        matrix1_re_ce0,
        matrix1_re_we0,
        matrix1_re_d0,
        matrix1_re_q0,
        matrix1_im_address0,
        matrix1_im_ce0,
        matrix1_im_we0,
        matrix1_im_d0,
        matrix1_im_q0
);

parameter    ap_ST_fsm_state1 = 42'd1;
parameter    ap_ST_fsm_state2 = 42'd2;
parameter    ap_ST_fsm_state3 = 42'd4;
parameter    ap_ST_fsm_state4 = 42'd8;
parameter    ap_ST_fsm_state5 = 42'd16;
parameter    ap_ST_fsm_state6 = 42'd32;
parameter    ap_ST_fsm_state7 = 42'd64;
parameter    ap_ST_fsm_state8 = 42'd128;
parameter    ap_ST_fsm_state9 = 42'd256;
parameter    ap_ST_fsm_state10 = 42'd512;
parameter    ap_ST_fsm_state11 = 42'd1024;
parameter    ap_ST_fsm_state12 = 42'd2048;
parameter    ap_ST_fsm_state13 = 42'd4096;
parameter    ap_ST_fsm_state14 = 42'd8192;
parameter    ap_ST_fsm_state15 = 42'd16384;
parameter    ap_ST_fsm_state16 = 42'd32768;
parameter    ap_ST_fsm_state17 = 42'd65536;
parameter    ap_ST_fsm_state18 = 42'd131072;
parameter    ap_ST_fsm_state19 = 42'd262144;
parameter    ap_ST_fsm_state20 = 42'd524288;
parameter    ap_ST_fsm_state21 = 42'd1048576;
parameter    ap_ST_fsm_state22 = 42'd2097152;
parameter    ap_ST_fsm_state23 = 42'd4194304;
parameter    ap_ST_fsm_state24 = 42'd8388608;
parameter    ap_ST_fsm_state25 = 42'd16777216;
parameter    ap_ST_fsm_state26 = 42'd33554432;
parameter    ap_ST_fsm_state27 = 42'd67108864;
parameter    ap_ST_fsm_state28 = 42'd134217728;
parameter    ap_ST_fsm_state29 = 42'd268435456;
parameter    ap_ST_fsm_state30 = 42'd536870912;
parameter    ap_ST_fsm_state31 = 42'd1073741824;
parameter    ap_ST_fsm_state32 = 42'd2147483648;
parameter    ap_ST_fsm_state33 = 42'd4294967296;
parameter    ap_ST_fsm_state34 = 42'd8589934592;
parameter    ap_ST_fsm_state35 = 42'd17179869184;
parameter    ap_ST_fsm_state36 = 42'd34359738368;
parameter    ap_ST_fsm_state37 = 42'd68719476736;
parameter    ap_ST_fsm_state38 = 42'd137438953472;
parameter    ap_ST_fsm_state39 = 42'd274877906944;
parameter    ap_ST_fsm_state40 = 42'd549755813888;
parameter    ap_ST_fsm_state41 = 42'd1099511627776;
parameter    ap_ST_fsm_state42 = 42'd2199023255552;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] rec_sig_re_address0;
output   rec_sig_re_ce0;
input  [63:0] rec_sig_re_q0;
output  [7:0] rec_sig_re_address1;
output   rec_sig_re_ce1;
input  [63:0] rec_sig_re_q1;
output  [7:0] rec_sig_im_address0;
output   rec_sig_im_ce0;
input  [63:0] rec_sig_im_q0;
output  [7:0] rec_sig_im_address1;
output   rec_sig_im_ce1;
input  [63:0] rec_sig_im_q1;
output  [13:0] matrix1_re_address0;
output   matrix1_re_ce0;
output   matrix1_re_we0;
output  [63:0] matrix1_re_d0;
input  [63:0] matrix1_re_q0;
output  [13:0] matrix1_im_address0;
output   matrix1_im_ce0;
output   matrix1_im_we0;
output  [63:0] matrix1_im_d0;
input  [63:0] matrix1_im_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rec_sig_re_ce0;
reg rec_sig_re_ce1;
reg rec_sig_im_ce0;
reg rec_sig_im_ce1;
reg[13:0] matrix1_re_address0;
reg matrix1_re_ce0;
reg matrix1_re_we0;
reg[63:0] matrix1_re_d0;
reg[13:0] matrix1_im_address0;
reg matrix1_im_ce0;
reg matrix1_im_we0;
reg[63:0] matrix1_im_d0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [41:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] reg_299;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state24;
reg   [63:0] reg_305;
wire   [13:0] add_ln22_fu_311_p2;
reg   [13:0] add_ln22_reg_510;
wire    ap_CS_fsm_state2;
wire   [6:0] k_fu_323_p2;
reg   [6:0] k_reg_518;
wire   [6:0] l_fu_335_p2;
wire    ap_CS_fsm_state3;
wire   [7:0] zext_ln29_fu_357_p1;
reg   [7:0] zext_ln29_reg_531;
wire    ap_CS_fsm_state4;
wire   [6:0] i_fu_367_p2;
reg   [6:0] i_reg_540;
wire   [13:0] add_ln30_fu_373_p2;
reg   [13:0] add_ln30_reg_545;
wire    ap_CS_fsm_state5;
wire   [6:0] k_1_fu_389_p2;
reg   [6:0] k_1_reg_553;
reg   [7:0] rec_sig_re_addr_reg_558;
wire   [0:0] icmp_ln30_fu_383_p2;
reg   [7:0] rec_sig_im_addr_reg_563;
wire   [6:0] l_1_fu_416_p2;
reg   [6:0] l_1_reg_571;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln31_fu_410_p2;
wire   [13:0] add_ln33_fu_437_p2;
reg   [13:0] add_ln33_reg_586;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_im_13_fu_453_p1;
wire   [63:0] grp_fu_267_p2;
reg   [63:0] m1_reg_615;
wire    ap_CS_fsm_state11;
wire   [63:0] grp_fu_273_p2;
reg   [63:0] m2_reg_620;
wire   [63:0] grp_fu_278_p2;
reg   [63:0] m3_reg_625;
wire   [63:0] grp_fu_284_p2;
reg   [63:0] m4_reg_630;
wire   [63:0] grp_fu_255_p2;
reg   [63:0] sum_re_reg_635;
wire    ap_CS_fsm_state16;
wire   [63:0] grp_fu_259_p2;
reg   [63:0] sum_im_reg_640;
reg   [13:0] matrix1_re_addr_2_reg_645;
reg   [13:0] matrix1_im_addr_2_reg_650;
wire   [13:0] add_ln39_fu_464_p2;
reg   [13:0] add_ln39_reg_655;
wire    ap_CS_fsm_state22;
wire   [6:0] m_fu_476_p2;
reg   [6:0] m_reg_663;
wire   [6:0] n_fu_488_p2;
reg   [6:0] n_reg_671;
wire    ap_CS_fsm_state23;
reg   [13:0] matrix1_re_addr_1_reg_676;
wire   [0:0] icmp_ln40_fu_482_p2;
reg   [13:0] matrix1_im_addr_1_reg_681;
wire   [63:0] grp_fu_289_p2;
reg   [63:0] x_complex_re_write_a_reg_686;
wire    ap_CS_fsm_state41;
wire   [63:0] grp_fu_294_p2;
reg   [63:0] x_complex_im_write_a_reg_691;
reg   [6:0] k_0_reg_142;
reg    ap_block_state1;
wire   [0:0] icmp_ln23_fu_329_p2;
reg   [13:0] phi_mul_reg_153;
reg   [6:0] l_0_reg_165;
wire   [0:0] icmp_ln22_fu_317_p2;
reg   [6:0] i_0_reg_176;
reg   [6:0] k1_0_reg_187;
wire   [0:0] icmp_ln29_fu_361_p2;
reg   [13:0] phi_mul113_reg_198;
reg   [6:0] l2_0_reg_210;
wire    ap_CS_fsm_state21;
reg   [6:0] m_0_reg_221;
reg   [13:0] phi_mul115_reg_232;
reg   [6:0] n_0_reg_244;
wire    ap_CS_fsm_state42;
wire   [0:0] icmp_ln39_fu_470_p2;
wire   [63:0] zext_ln24_1_fu_351_p1;
wire   [63:0] zext_ln32_fu_400_p1;
wire   [63:0] zext_ln32_1_fu_427_p1;
wire   [63:0] zext_ln33_1_fu_459_p1;
wire   [63:0] zext_ln41_1_fu_504_p1;
reg   [63:0] grp_fu_255_p0;
reg   [63:0] grp_fu_255_p1;
wire    ap_CS_fsm_state12;
reg   [63:0] grp_fu_259_p0;
reg   [63:0] grp_fu_259_p1;
wire    ap_CS_fsm_state25;
wire   [13:0] zext_ln24_fu_341_p1;
wire   [13:0] add_ln24_fu_345_p2;
wire   [7:0] zext_ln30_fu_379_p1;
wire   [7:0] add_ln32_fu_395_p2;
wire   [7:0] zext_ln31_fu_406_p1;
wire   [7:0] add_ln32_1_fu_422_p2;
wire   [13:0] zext_ln33_fu_433_p1;
wire   [63:0] bitcast_ln329_fu_443_p1;
wire   [63:0] xor_ln329_fu_447_p2;
wire   [13:0] zext_ln41_fu_494_p1;
wire   [13:0] add_ln41_fu_498_p2;
reg   [1:0] grp_fu_255_opcode;
reg   [41:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 42'd1;
end

MUSIC_top_dadddsubkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dadddsubkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_255_p0),
    .din1(grp_fu_255_p1),
    .opcode(grp_fu_255_opcode),
    .ce(1'b1),
    .dout(grp_fu_255_p2)
);

MUSIC_top_dadd_64cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dadd_64cud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_259_p0),
    .din1(grp_fu_259_p1),
    .ce(1'b1),
    .dout(grp_fu_259_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rec_sig_re_q1),
    .din1(rec_sig_re_q0),
    .ce(1'b1),
    .dout(grp_fu_267_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rec_sig_im_q1),
    .din1(tmp_im_13_fu_453_p1),
    .ce(1'b1),
    .dout(grp_fu_273_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rec_sig_im_q1),
    .din1(rec_sig_re_q0),
    .ce(1'b1),
    .dout(grp_fu_278_p2)
);

MUSIC_top_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_dmul_64dEe_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rec_sig_re_q1),
    .din1(tmp_im_13_fu_453_p1),
    .ce(1'b1),
    .dout(grp_fu_284_p2)
);

MUSIC_top_ddiv_64eOg #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_ddiv_64eOg_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_305),
    .din1(64'd4636807660098813952),
    .ce(1'b1),
    .dout(grp_fu_289_p2)
);

MUSIC_top_ddiv_64eOg #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
MUSIC_top_ddiv_64eOg_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_299),
    .din1(64'd4636807660098813952),
    .ce(1'b1),
    .dout(grp_fu_294_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln39_fu_470_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_176 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln30_fu_383_p2 == 1'd1))) begin
        i_0_reg_176 <= i_reg_540;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln29_fu_361_p2 == 1'd0))) begin
        k1_0_reg_187 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_410_p2 == 1'd1))) begin
        k1_0_reg_187 <= k_1_reg_553;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_142 <= k_reg_518;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_reg_142 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        l2_0_reg_210 <= l_1_reg_571;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln30_fu_383_p2 == 1'd0))) begin
        l2_0_reg_210 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln22_fu_317_p2 == 1'd0))) begin
        l_0_reg_165 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln23_fu_329_p2 == 1'd0))) begin
        l_0_reg_165 <= l_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_0_reg_221 <= 7'd0;
    end else if (((icmp_ln40_fu_482_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        m_0_reg_221 <= m_reg_663;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln39_fu_470_p2 == 1'd0))) begin
        n_0_reg_244 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        n_0_reg_244 <= n_reg_671;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln29_fu_361_p2 == 1'd0))) begin
        phi_mul113_reg_198 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_410_p2 == 1'd1))) begin
        phi_mul113_reg_198 <= add_ln30_reg_545;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul115_reg_232 <= 14'd0;
    end else if (((icmp_ln40_fu_482_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        phi_mul115_reg_232 <= add_ln39_reg_655;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_153 <= add_ln22_reg_510;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_153 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln22_reg_510 <= add_ln22_fu_311_p2;
        k_reg_518 <= k_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln30_reg_545 <= add_ln30_fu_373_p2;
        k_1_reg_553 <= k_1_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_410_p2 == 1'd0))) begin
        add_ln33_reg_586 <= add_ln33_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        add_ln39_reg_655 <= add_ln39_fu_464_p2;
        m_reg_663 <= m_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_540 <= i_fu_367_p2;
        zext_ln29_reg_531[6 : 0] <= zext_ln29_fu_357_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        l_1_reg_571 <= l_1_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        m1_reg_615 <= grp_fu_267_p2;
        m2_reg_620 <= grp_fu_273_p2;
        m3_reg_625 <= grp_fu_278_p2;
        m4_reg_630 <= grp_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln40_fu_482_p2 == 1'd0))) begin
        matrix1_im_addr_1_reg_681 <= zext_ln41_1_fu_504_p1;
        matrix1_re_addr_1_reg_676 <= zext_ln41_1_fu_504_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        matrix1_im_addr_2_reg_650 <= zext_ln33_1_fu_459_p1;
        matrix1_re_addr_2_reg_645 <= zext_ln33_1_fu_459_p1;
        sum_im_reg_640 <= grp_fu_259_p2;
        sum_re_reg_635 <= grp_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        n_reg_671 <= n_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln30_fu_383_p2 == 1'd0))) begin
        rec_sig_im_addr_reg_563 <= zext_ln32_fu_400_p1;
        rec_sig_re_addr_reg_558 <= zext_ln32_fu_400_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_299 <= matrix1_im_q0;
        reg_305 <= matrix1_re_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        x_complex_im_write_a_reg_691 <= grp_fu_294_p2;
        x_complex_re_write_a_reg_686 <= grp_fu_289_p2;
    end
end

always @ (*) begin
    if (((icmp_ln39_fu_470_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_fu_470_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_255_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_255_opcode = 2'd0;
    end else begin
        grp_fu_255_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_255_p0 = sum_re_reg_635;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_255_p0 = m1_reg_615;
    end else begin
        grp_fu_255_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_255_p1 = matrix1_re_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_255_p1 = m2_reg_620;
    end else begin
        grp_fu_255_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_259_p0 = sum_im_reg_640;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_259_p0 = m3_reg_625;
    end else begin
        grp_fu_259_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_259_p1 = matrix1_im_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_259_p1 = m4_reg_630;
    end else begin
        grp_fu_259_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        matrix1_im_address0 = matrix1_im_addr_1_reg_681;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        matrix1_im_address0 = zext_ln41_1_fu_504_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        matrix1_im_address0 = matrix1_im_addr_2_reg_650;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        matrix1_im_address0 = zext_ln33_1_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        matrix1_im_address0 = zext_ln24_1_fu_351_p1;
    end else begin
        matrix1_im_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state3))) begin
        matrix1_im_ce0 = 1'b1;
    end else begin
        matrix1_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        matrix1_im_d0 = x_complex_im_write_a_reg_691;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        matrix1_im_d0 = grp_fu_259_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        matrix1_im_d0 = 64'd0;
    end else begin
        matrix1_im_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln23_fu_329_p2 == 1'd0)))) begin
        matrix1_im_we0 = 1'b1;
    end else begin
        matrix1_im_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        matrix1_re_address0 = matrix1_re_addr_1_reg_676;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        matrix1_re_address0 = zext_ln41_1_fu_504_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        matrix1_re_address0 = matrix1_re_addr_2_reg_645;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        matrix1_re_address0 = zext_ln33_1_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        matrix1_re_address0 = zext_ln24_1_fu_351_p1;
    end else begin
        matrix1_re_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state3))) begin
        matrix1_re_ce0 = 1'b1;
    end else begin
        matrix1_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        matrix1_re_d0 = x_complex_re_write_a_reg_686;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        matrix1_re_d0 = grp_fu_255_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        matrix1_re_d0 = 64'd0;
    end else begin
        matrix1_re_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln23_fu_329_p2 == 1'd0)))) begin
        matrix1_re_we0 = 1'b1;
    end else begin
        matrix1_re_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rec_sig_im_ce0 = 1'b1;
    end else begin
        rec_sig_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rec_sig_im_ce1 = 1'b1;
    end else begin
        rec_sig_im_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rec_sig_re_ce0 = 1'b1;
    end else begin
        rec_sig_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rec_sig_re_ce1 = 1'b1;
    end else begin
        rec_sig_re_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln22_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln23_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln29_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln30_fu_383_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_410_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln39_fu_470_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln40_fu_482_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_311_p2 = (phi_mul_reg_153 + 14'd100);

assign add_ln24_fu_345_p2 = (phi_mul_reg_153 + zext_ln24_fu_341_p1);

assign add_ln30_fu_373_p2 = (phi_mul113_reg_198 + 14'd100);

assign add_ln32_1_fu_422_p2 = (zext_ln29_reg_531 + zext_ln31_fu_406_p1);

assign add_ln32_fu_395_p2 = (zext_ln29_reg_531 + zext_ln30_fu_379_p1);

assign add_ln33_fu_437_p2 = (phi_mul113_reg_198 + zext_ln33_fu_433_p1);

assign add_ln39_fu_464_p2 = (phi_mul115_reg_232 + 14'd100);

assign add_ln41_fu_498_p2 = (phi_mul115_reg_232 + zext_ln41_fu_494_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign bitcast_ln329_fu_443_p1 = rec_sig_im_q0;

assign i_fu_367_p2 = (i_0_reg_176 + 7'd1);

assign icmp_ln22_fu_317_p2 = ((k_0_reg_142 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_329_p2 = ((l_0_reg_165 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_361_p2 = ((i_0_reg_176 == 7'd101) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_383_p2 = ((k1_0_reg_187 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_410_p2 = ((l2_0_reg_210 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_470_p2 = ((m_0_reg_221 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_482_p2 = ((n_0_reg_244 == 7'd100) ? 1'b1 : 1'b0);

assign k_1_fu_389_p2 = (k1_0_reg_187 + 7'd1);

assign k_fu_323_p2 = (k_0_reg_142 + 7'd1);

assign l_1_fu_416_p2 = (l2_0_reg_210 + 7'd1);

assign l_fu_335_p2 = (l_0_reg_165 + 7'd1);

assign m_fu_476_p2 = (m_0_reg_221 + 7'd1);

assign n_fu_488_p2 = (n_0_reg_244 + 7'd1);

assign rec_sig_im_address0 = rec_sig_im_addr_reg_563;

assign rec_sig_im_address1 = zext_ln32_1_fu_427_p1;

assign rec_sig_re_address0 = rec_sig_re_addr_reg_558;

assign rec_sig_re_address1 = zext_ln32_1_fu_427_p1;

assign tmp_im_13_fu_453_p1 = xor_ln329_fu_447_p2;

assign xor_ln329_fu_447_p2 = (bitcast_ln329_fu_443_p1 ^ 64'd9223372036854775808);

assign zext_ln24_1_fu_351_p1 = add_ln24_fu_345_p2;

assign zext_ln24_fu_341_p1 = l_0_reg_165;

assign zext_ln29_fu_357_p1 = i_0_reg_176;

assign zext_ln30_fu_379_p1 = k1_0_reg_187;

assign zext_ln31_fu_406_p1 = l2_0_reg_210;

assign zext_ln32_1_fu_427_p1 = add_ln32_1_fu_422_p2;

assign zext_ln32_fu_400_p1 = add_ln32_fu_395_p2;

assign zext_ln33_1_fu_459_p1 = add_ln33_reg_586;

assign zext_ln33_fu_433_p1 = l2_0_reg_210;

assign zext_ln41_1_fu_504_p1 = add_ln41_fu_498_p2;

assign zext_ln41_fu_494_p1 = n_0_reg_244;

always @ (posedge ap_clk) begin
    zext_ln29_reg_531[7] <= 1'b0;
end

endmodule //AutoCorrelation
