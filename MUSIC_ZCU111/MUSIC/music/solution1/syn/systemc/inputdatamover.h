// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _inputdatamover_HH_
#define _inputdatamover_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct inputdatamover : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<128> > in_r_TDATA;
    sc_in< sc_logic > in_r_TVALID;
    sc_out< sc_logic > in_r_TREADY;
    sc_in< sc_lv<1> > in_r_TLAST;
    sc_out< sc_lv<8> > out_strm_re_address0;
    sc_out< sc_logic > out_strm_re_ce0;
    sc_out< sc_logic > out_strm_re_we0;
    sc_out< sc_lv<64> > out_strm_re_d0;
    sc_out< sc_lv<8> > out_strm_im_address0;
    sc_out< sc_logic > out_strm_im_ce0;
    sc_out< sc_logic > out_strm_im_we0;
    sc_out< sc_lv<64> > out_strm_im_d0;


    // Module declarations
    inputdatamover(sc_module_name name);
    SC_HAS_PROCESS(inputdatamover);

    ~inputdatamover();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<128> > in_V_data_0_data_out;
    sc_signal< sc_logic > in_V_data_0_vld_in;
    sc_signal< sc_logic > in_V_data_0_vld_out;
    sc_signal< sc_logic > in_V_data_0_ack_in;
    sc_signal< sc_logic > in_V_data_0_ack_out;
    sc_signal< sc_lv<128> > in_V_data_0_payload_A;
    sc_signal< sc_lv<128> > in_V_data_0_payload_B;
    sc_signal< sc_logic > in_V_data_0_sel_rd;
    sc_signal< sc_logic > in_V_data_0_sel_wr;
    sc_signal< sc_logic > in_V_data_0_sel;
    sc_signal< sc_logic > in_V_data_0_load_A;
    sc_signal< sc_logic > in_V_data_0_load_B;
    sc_signal< sc_lv<2> > in_V_data_0_state;
    sc_signal< sc_logic > in_V_data_0_state_cmp_full;
    sc_signal< sc_logic > in_V_last_V_0_vld_in;
    sc_signal< sc_logic > in_V_last_V_0_ack_out;
    sc_signal< sc_lv<2> > in_V_last_V_0_state;
    sc_signal< sc_logic > in_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > i_fu_149_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln8_fu_155_p2;
    sc_signal< sc_lv<8> > i_017_reg_101;
    sc_signal< sc_lv<64> > zext_ln11_fu_143_p1;
    sc_signal< sc_lv<64> > trunc_ln29_fu_119_p1;
    sc_signal< sc_lv<64> > tmp_data_im_load_new_fu_128_p4;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_C7;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_149_p2();
    void thread_icmp_ln8_fu_155_p2();
    void thread_in_V_data_0_ack_in();
    void thread_in_V_data_0_ack_out();
    void thread_in_V_data_0_data_out();
    void thread_in_V_data_0_load_A();
    void thread_in_V_data_0_load_B();
    void thread_in_V_data_0_sel();
    void thread_in_V_data_0_state_cmp_full();
    void thread_in_V_data_0_vld_in();
    void thread_in_V_data_0_vld_out();
    void thread_in_V_last_V_0_ack_out();
    void thread_in_V_last_V_0_vld_in();
    void thread_in_r_TDATA_blk_n();
    void thread_in_r_TREADY();
    void thread_out_strm_im_address0();
    void thread_out_strm_im_ce0();
    void thread_out_strm_im_d0();
    void thread_out_strm_im_we0();
    void thread_out_strm_re_address0();
    void thread_out_strm_re_ce0();
    void thread_out_strm_re_d0();
    void thread_out_strm_re_we0();
    void thread_tmp_data_im_load_new_fu_128_p4();
    void thread_trunc_ln29_fu_119_p1();
    void thread_zext_ln11_fu_143_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
