-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inputdatamover is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_strm_re_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_strm_re_ce0 : OUT STD_LOGIC;
    out_strm_re_we0 : OUT STD_LOGIC;
    out_strm_re_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_strm_im_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_strm_im_ce0 : OUT STD_LOGIC;
    out_strm_im_we0 : OUT STD_LOGIC;
    out_strm_im_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of inputdatamover is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_C7 : STD_LOGIC_VECTOR (7 downto 0) := "11000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_data_0_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal in_V_data_0_vld_in : STD_LOGIC;
    signal in_V_data_0_vld_out : STD_LOGIC;
    signal in_V_data_0_ack_in : STD_LOGIC;
    signal in_V_data_0_ack_out : STD_LOGIC;
    signal in_V_data_0_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal in_V_data_0_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal in_V_data_0_sel_rd : STD_LOGIC := '0';
    signal in_V_data_0_sel_wr : STD_LOGIC := '0';
    signal in_V_data_0_sel : STD_LOGIC;
    signal in_V_data_0_load_A : STD_LOGIC;
    signal in_V_data_0_load_B : STD_LOGIC;
    signal in_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_data_0_state_cmp_full : STD_LOGIC;
    signal in_V_last_V_0_vld_in : STD_LOGIC;
    signal in_V_last_V_0_ack_out : STD_LOGIC;
    signal in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_149_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln8_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_017_reg_101 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln11_fu_143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln29_fu_119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_data_im_load_new_fu_128_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln8_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    in_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_V_data_0_ack_out = ap_const_logic_1) and (in_V_data_0_vld_out = ap_const_logic_1))) then 
                                        in_V_data_0_sel_rd <= not(in_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_V_data_0_ack_in = ap_const_logic_1) and (in_V_data_0_vld_in = ap_const_logic_1))) then 
                                        in_V_data_0_sel_wr <= not(in_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((in_V_data_0_state = ap_const_lv2_2) and (in_V_data_0_vld_in = ap_const_logic_0)) or ((in_V_data_0_state = ap_const_lv2_3) and (in_V_data_0_vld_in = ap_const_logic_0) and (in_V_data_0_ack_out = ap_const_logic_1)))) then 
                    in_V_data_0_state <= ap_const_lv2_2;
                elsif ((((in_V_data_0_state = ap_const_lv2_1) and (in_V_data_0_ack_out = ap_const_logic_0)) or ((in_V_data_0_state = ap_const_lv2_3) and (in_V_data_0_ack_out = ap_const_logic_0) and (in_V_data_0_vld_in = ap_const_logic_1)))) then 
                    in_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((in_V_data_0_vld_in = ap_const_logic_0) and (in_V_data_0_ack_out = ap_const_logic_1))) and not(((in_V_data_0_ack_out = ap_const_logic_0) and (in_V_data_0_vld_in = ap_const_logic_1))) and (in_V_data_0_state = ap_const_lv2_3)) or ((in_V_data_0_state = ap_const_lv2_1) and (in_V_data_0_ack_out = ap_const_logic_1)) or ((in_V_data_0_state = ap_const_lv2_2) and (in_V_data_0_vld_in = ap_const_logic_1)))) then 
                    in_V_data_0_state <= ap_const_lv2_3;
                else 
                    in_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_V_last_V_0_state = ap_const_lv2_2) and (in_V_last_V_0_vld_in = ap_const_logic_0)) or ((in_V_last_V_0_state = ap_const_lv2_3) and (in_V_last_V_0_vld_in = ap_const_logic_0) and (in_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((in_V_last_V_0_state = ap_const_lv2_1) and (in_V_last_V_0_ack_out = ap_const_logic_0)) or ((in_V_last_V_0_state = ap_const_lv2_3) and (in_V_last_V_0_ack_out = ap_const_logic_0) and (in_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_V_last_V_0_vld_in = ap_const_logic_0) and (in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((in_V_last_V_0_ack_out = ap_const_logic_0) and (in_V_last_V_0_vld_in = ap_const_logic_1))) and (in_V_last_V_0_state = ap_const_lv2_3)) or ((in_V_last_V_0_state = ap_const_lv2_1) and (in_V_last_V_0_ack_out = ap_const_logic_1)) or ((in_V_last_V_0_state = ap_const_lv2_2) and (in_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_017_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln8_fu_155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_017_reg_101 <= i_fu_149_p2;
            elsif (((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln8_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                i_017_reg_101 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_data_0_load_A = ap_const_logic_1)) then
                in_V_data_0_payload_A <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_data_0_load_B = ap_const_logic_1)) then
                in_V_data_0_payload_B <= in_r_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln8_fu_155_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln8_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(ap_start, ap_done_reg, in_V_data_0_vld_out)
    begin
                ap_block_state2 <= ((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, in_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln8_fu_155_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln8_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, in_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln8_fu_155_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln8_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_149_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(i_017_reg_101));
    icmp_ln8_fu_155_p2 <= "1" when (i_017_reg_101 = ap_const_lv8_C7) else "0";
    in_V_data_0_ack_in <= in_V_data_0_state(1);

    in_V_data_0_ack_out_assign_proc : process(ap_start, ap_done_reg, in_V_data_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_data_0_ack_out <= ap_const_logic_1;
        else 
            in_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_V_data_0_data_out_assign_proc : process(in_V_data_0_payload_A, in_V_data_0_payload_B, in_V_data_0_sel)
    begin
        if ((in_V_data_0_sel = ap_const_logic_1)) then 
            in_V_data_0_data_out <= in_V_data_0_payload_B;
        else 
            in_V_data_0_data_out <= in_V_data_0_payload_A;
        end if; 
    end process;

    in_V_data_0_load_A <= (in_V_data_0_state_cmp_full and not(in_V_data_0_sel_wr));
    in_V_data_0_load_B <= (in_V_data_0_state_cmp_full and in_V_data_0_sel_wr);
    in_V_data_0_sel <= in_V_data_0_sel_rd;
    in_V_data_0_state_cmp_full <= '0' when (in_V_data_0_state = ap_const_lv2_1) else '1';
    in_V_data_0_vld_in <= in_r_TVALID;
    in_V_data_0_vld_out <= in_V_data_0_state(0);

    in_V_last_V_0_ack_out_assign_proc : process(ap_start, ap_done_reg, in_V_data_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    in_V_last_V_0_vld_in <= in_r_TVALID;

    in_r_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, in_V_data_0_state, ap_CS_fsm_state2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_TDATA_blk_n <= in_V_data_0_state(0);
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_r_TREADY <= in_V_last_V_0_state(1);
    out_strm_im_address0 <= zext_ln11_fu_143_p1(8 - 1 downto 0);

    out_strm_im_ce0_assign_proc : process(ap_start, ap_done_reg, in_V_data_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_strm_im_ce0 <= ap_const_logic_1;
        else 
            out_strm_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_strm_im_d0 <= tmp_data_im_load_new_fu_128_p4;

    out_strm_im_we0_assign_proc : process(ap_start, ap_done_reg, in_V_data_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_strm_im_we0 <= ap_const_logic_1;
        else 
            out_strm_im_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_strm_re_address0 <= zext_ln11_fu_143_p1(8 - 1 downto 0);

    out_strm_re_ce0_assign_proc : process(ap_start, ap_done_reg, in_V_data_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_strm_re_ce0 <= ap_const_logic_1;
        else 
            out_strm_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_strm_re_d0 <= trunc_ln29_fu_119_p1;

    out_strm_re_we0_assign_proc : process(ap_start, ap_done_reg, in_V_data_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (in_V_data_0_vld_out = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_strm_re_we0 <= ap_const_logic_1;
        else 
            out_strm_re_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_im_load_new_fu_128_p4 <= in_V_data_0_data_out(127 downto 64);
    trunc_ln29_fu_119_p1 <= in_V_data_0_data_out(64 - 1 downto 0);
    zext_ln11_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_017_reg_101),64));
end behav;
