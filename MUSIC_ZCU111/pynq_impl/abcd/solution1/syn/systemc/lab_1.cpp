// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "lab_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int lab_1::C_S_AXI_DATA_WIDTH = "100000";
const sc_logic lab_1::ap_const_logic_1 = sc_dt::Log_1;
const bool lab_1::ap_const_boolean_1 = true;
const sc_logic lab_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> lab_1::ap_const_lv32_1 = "1";

lab_1::lab_1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    lab_1_AXILiteS_s_axi_U = new lab_1_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("lab_1_AXILiteS_s_axi_U");
    lab_1_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    lab_1_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    lab_1_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    lab_1_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    lab_1_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    lab_1_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    lab_1_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    lab_1_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    lab_1_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    lab_1_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    lab_1_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    lab_1_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    lab_1_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    lab_1_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    lab_1_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    lab_1_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    lab_1_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    lab_1_AXILiteS_s_axi_U->ACLK(ap_clk);
    lab_1_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    lab_1_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    lab_1_AXILiteS_s_axi_U->A_V(A_V);
    lab_1_AXILiteS_s_axi_U->B_V(B_V);
    lab_1_AXILiteS_s_axi_U->C_V(C_V);
    lab_1_AXILiteS_s_axi_U->Y_V(Y_V);
    lab_1_AXILiteS_s_axi_U->Y_V_ap_vld(Y_V_ap_vld);

    SC_METHOD(thread_Y_V);
    sensitive << ( C_V );
    sensitive << ( add_ln68_fu_61_p2 );

    SC_METHOD(thread_Y_V_ap_vld);

    SC_METHOD(thread_add_ln68_fu_61_p2);
    sensitive << ( A_V );
    sensitive << ( shl_ln68_fu_55_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_shl_ln68_fu_55_p2);
    sensitive << ( B_V );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "lab_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, A_V, "A_V");
    sc_trace(mVcdFile, B_V, "B_V");
    sc_trace(mVcdFile, C_V, "C_V");
    sc_trace(mVcdFile, Y_V, "Y_V");
    sc_trace(mVcdFile, Y_V_ap_vld, "Y_V_ap_vld");
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, shl_ln68_fu_55_p2, "shl_ln68_fu_55_p2");
    sc_trace(mVcdFile, add_ln68_fu_61_p2, "add_ln68_fu_61_p2");
#endif

    }
    mHdltvinHandle.open("lab_1.hdltvin.dat");
    mHdltvoutHandle.open("lab_1.hdltvout.dat");
}

lab_1::~lab_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete lab_1_AXILiteS_s_axi_U;
}

void lab_1::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void lab_1::thread_Y_V() {
    Y_V = (!add_ln68_fu_61_p2.read().is_01() || !C_V.read().is_01())? sc_lv<32>(): (sc_biguint<32>(add_ln68_fu_61_p2.read()) - sc_biguint<32>(C_V.read()));
}

void lab_1::thread_Y_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        Y_V_ap_vld = ap_const_logic_1;
    } else {
        Y_V_ap_vld = ap_const_logic_0;
    }
}

void lab_1::thread_add_ln68_fu_61_p2() {
    add_ln68_fu_61_p2 = (!A_V.read().is_01() || !shl_ln68_fu_55_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(A_V.read()) + sc_biguint<32>(shl_ln68_fu_55_p2.read()));
}

void lab_1::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void lab_1::thread_shl_ln68_fu_55_p2() {
    shl_ln68_fu_55_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): B_V.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void lab_1::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

