-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul_3_matrixmul_3_Pipeline_loop_input_B1_loop_input_B2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_A_TVALID : IN STD_LOGIC;
    input_B_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_7_ce0 : OUT STD_LOGIC;
    input_B_7_we0 : OUT STD_LOGIC;
    input_B_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_B_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_6_ce0 : OUT STD_LOGIC;
    input_B_6_we0 : OUT STD_LOGIC;
    input_B_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_B_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_5_ce0 : OUT STD_LOGIC;
    input_B_5_we0 : OUT STD_LOGIC;
    input_B_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_B_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_4_ce0 : OUT STD_LOGIC;
    input_B_4_we0 : OUT STD_LOGIC;
    input_B_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_B_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_3_ce0 : OUT STD_LOGIC;
    input_B_3_we0 : OUT STD_LOGIC;
    input_B_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_B_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_2_ce0 : OUT STD_LOGIC;
    input_B_2_we0 : OUT STD_LOGIC;
    input_B_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_B_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_1_ce0 : OUT STD_LOGIC;
    input_B_1_we0 : OUT STD_LOGIC;
    input_B_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_B_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_ce0 : OUT STD_LOGIC;
    input_B_we0 : OUT STD_LOGIC;
    input_B_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_A_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_A_TREADY : OUT STD_LOGIC );
end;


architecture behav of matrixmul_3_matrixmul_3_Pipeline_loop_input_B1_loop_input_B2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln156_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_A_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal zext_ln157_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_fu_72 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln157_fu_291_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal row_fu_76 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln156_fu_255_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten6_fu_80 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln156_1_fu_218_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_sig_allocacmp_indvar_flatten6_load : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal input_B_6_we0_local : STD_LOGIC;
    signal trunc_ln156_fu_263_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal local_stream_data_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_B_6_ce0_local : STD_LOGIC;
    signal input_B_5_we0_local : STD_LOGIC;
    signal input_B_5_ce0_local : STD_LOGIC;
    signal input_B_4_we0_local : STD_LOGIC;
    signal input_B_4_ce0_local : STD_LOGIC;
    signal input_B_3_we0_local : STD_LOGIC;
    signal input_B_3_ce0_local : STD_LOGIC;
    signal input_B_2_we0_local : STD_LOGIC;
    signal input_B_2_ce0_local : STD_LOGIC;
    signal input_B_1_we0_local : STD_LOGIC;
    signal input_B_1_ce0_local : STD_LOGIC;
    signal input_B_we0_local : STD_LOGIC;
    signal input_B_ce0_local : STD_LOGIC;
    signal input_B_7_we0_local : STD_LOGIC;
    signal input_B_7_ce0_local : STD_LOGIC;
    signal icmp_ln157_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln156_fu_235_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln142_fu_247_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_3_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component matrixmul_3_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    col_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    col_fu_72 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    col_fu_72 <= add_ln157_fu_291_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten6_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln156_fu_212_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten6_fu_80 <= add_ln156_1_fu_218_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_80 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    row_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    row_fu_76 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    row_fu_76 <= select_ln156_fu_255_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln156_1_fu_218_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten6_load) + unsigned(ap_const_lv7_1));
    add_ln156_fu_235_p2 <= std_logic_vector(unsigned(row_fu_76) + unsigned(ap_const_lv4_1));
    add_ln157_fu_291_p2 <= std_logic_vector(unsigned(select_ln142_fu_247_p3) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, in_A_TVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((in_A_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, in_A_TVALID)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((in_A_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, in_A_TVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((in_A_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln156_fu_212_p2)
    begin
        if (((icmp_ln156_fu_212_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten6_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, indvar_flatten6_fu_80, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten6_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten6_load <= indvar_flatten6_fu_80;
        end if; 
    end process;

    icmp_ln156_fu_212_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten6_load = ap_const_lv7_40) else "0";
    icmp_ln157_fu_241_p2 <= "1" when (col_fu_72 = ap_const_lv4_8) else "0";

    in_A_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_A_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_A_TDATA_blk_n <= in_A_TVALID;
        else 
            in_A_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_A_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_A_TREADY <= ap_const_logic_1;
        else 
            in_A_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    input_B_1_address0 <= zext_ln157_fu_267_p1(3 - 1 downto 0);
    input_B_1_ce0 <= input_B_1_ce0_local;

    input_B_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_B_1_ce0_local <= ap_const_logic_1;
        else 
            input_B_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_1_d0 <= local_stream_data_fu_279_p1;
    input_B_1_we0 <= input_B_1_we0_local;

    input_B_1_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln156_fu_263_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln156_fu_263_p1 = ap_const_lv3_1))) then 
            input_B_1_we0_local <= ap_const_logic_1;
        else 
            input_B_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_2_address0 <= zext_ln157_fu_267_p1(3 - 1 downto 0);
    input_B_2_ce0 <= input_B_2_ce0_local;

    input_B_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_B_2_ce0_local <= ap_const_logic_1;
        else 
            input_B_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_2_d0 <= local_stream_data_fu_279_p1;
    input_B_2_we0 <= input_B_2_we0_local;

    input_B_2_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln156_fu_263_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln156_fu_263_p1 = ap_const_lv3_2))) then 
            input_B_2_we0_local <= ap_const_logic_1;
        else 
            input_B_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_3_address0 <= zext_ln157_fu_267_p1(3 - 1 downto 0);
    input_B_3_ce0 <= input_B_3_ce0_local;

    input_B_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_B_3_ce0_local <= ap_const_logic_1;
        else 
            input_B_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_3_d0 <= local_stream_data_fu_279_p1;
    input_B_3_we0 <= input_B_3_we0_local;

    input_B_3_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln156_fu_263_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln156_fu_263_p1 = ap_const_lv3_3))) then 
            input_B_3_we0_local <= ap_const_logic_1;
        else 
            input_B_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_4_address0 <= zext_ln157_fu_267_p1(3 - 1 downto 0);
    input_B_4_ce0 <= input_B_4_ce0_local;

    input_B_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_B_4_ce0_local <= ap_const_logic_1;
        else 
            input_B_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_4_d0 <= local_stream_data_fu_279_p1;
    input_B_4_we0 <= input_B_4_we0_local;

    input_B_4_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln156_fu_263_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln156_fu_263_p1 = ap_const_lv3_4))) then 
            input_B_4_we0_local <= ap_const_logic_1;
        else 
            input_B_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_5_address0 <= zext_ln157_fu_267_p1(3 - 1 downto 0);
    input_B_5_ce0 <= input_B_5_ce0_local;

    input_B_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_B_5_ce0_local <= ap_const_logic_1;
        else 
            input_B_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_5_d0 <= local_stream_data_fu_279_p1;
    input_B_5_we0 <= input_B_5_we0_local;

    input_B_5_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln156_fu_263_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln156_fu_263_p1 = ap_const_lv3_5))) then 
            input_B_5_we0_local <= ap_const_logic_1;
        else 
            input_B_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_6_address0 <= zext_ln157_fu_267_p1(3 - 1 downto 0);
    input_B_6_ce0 <= input_B_6_ce0_local;

    input_B_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_B_6_ce0_local <= ap_const_logic_1;
        else 
            input_B_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_6_d0 <= local_stream_data_fu_279_p1;
    input_B_6_we0 <= input_B_6_we0_local;

    input_B_6_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln156_fu_263_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln156_fu_263_p1 = ap_const_lv3_6))) then 
            input_B_6_we0_local <= ap_const_logic_1;
        else 
            input_B_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_7_address0 <= zext_ln157_fu_267_p1(3 - 1 downto 0);
    input_B_7_ce0 <= input_B_7_ce0_local;

    input_B_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_B_7_ce0_local <= ap_const_logic_1;
        else 
            input_B_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_7_d0 <= local_stream_data_fu_279_p1;
    input_B_7_we0 <= input_B_7_we0_local;

    input_B_7_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln156_fu_263_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln156_fu_263_p1 = ap_const_lv3_7))) then 
            input_B_7_we0_local <= ap_const_logic_1;
        else 
            input_B_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_address0 <= zext_ln157_fu_267_p1(3 - 1 downto 0);
    input_B_ce0 <= input_B_ce0_local;

    input_B_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_B_ce0_local <= ap_const_logic_1;
        else 
            input_B_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_d0 <= local_stream_data_fu_279_p1;
    input_B_we0 <= input_B_we0_local;

    input_B_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln156_fu_263_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln156_fu_263_p1 = ap_const_lv3_0))) then 
            input_B_we0_local <= ap_const_logic_1;
        else 
            input_B_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    local_stream_data_fu_279_p1 <= in_A_TDATA(32 - 1 downto 0);
    select_ln142_fu_247_p3 <= 
        ap_const_lv4_0 when (icmp_ln157_fu_241_p2(0) = '1') else 
        col_fu_72;
    select_ln156_fu_255_p3 <= 
        add_ln156_fu_235_p2 when (icmp_ln157_fu_241_p2(0) = '1') else 
        row_fu_76;
    trunc_ln156_fu_263_p1 <= select_ln156_fu_255_p3(3 - 1 downto 0);
    zext_ln157_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln142_fu_247_p3),64));
end behav;
