-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul_3_matrixmul_3_Pipeline_loop1_loop2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_A_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_A_ce0 : OUT STD_LOGIC;
    input_A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_A_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_A_1_ce0 : OUT STD_LOGIC;
    input_A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_A_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_A_2_ce0 : OUT STD_LOGIC;
    input_A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_A_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_A_3_ce0 : OUT STD_LOGIC;
    input_A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_A_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_A_4_ce0 : OUT STD_LOGIC;
    input_A_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_A_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_A_5_ce0 : OUT STD_LOGIC;
    input_A_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_A_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_A_6_ce0 : OUT STD_LOGIC;
    input_A_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_A_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_A_7_ce0 : OUT STD_LOGIC;
    input_A_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_C_ce0 : OUT STD_LOGIC;
    output_C_we0 : OUT STD_LOGIC;
    output_C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_B_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_ce0 : OUT STD_LOGIC;
    input_B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_B_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_1_ce0 : OUT STD_LOGIC;
    input_B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_B_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_2_ce0 : OUT STD_LOGIC;
    input_B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_B_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_3_ce0 : OUT STD_LOGIC;
    input_B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_B_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_4_ce0 : OUT STD_LOGIC;
    input_B_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_B_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_5_ce0 : OUT STD_LOGIC;
    input_B_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_B_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_6_ce0 : OUT STD_LOGIC;
    input_B_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_B_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_B_7_ce0 : OUT STD_LOGIC;
    input_B_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixmul_3_matrixmul_3_Pipeline_loop1_loop2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln167_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln167_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln167_reg_520 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_reg_548 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln176_fu_436_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln176_reg_556 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln176_reg_556_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln176_reg_556_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln176_reg_556_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln176_reg_556_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln176_reg_556_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal input_A_4_load_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_A_5_load_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_A_6_load_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_A_7_load_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_B_4_load_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_B_5_load_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_B_6_load_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_B_7_load_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_A_load_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_A_1_load_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_A_2_load_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_A_3_load_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_B_load_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_B_1_load_reg_686 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_B_2_load_reg_691 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_B_3_load_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln174_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln174_2_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln174_3_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln174_5_reg_716 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln174_1_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln174_4_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln174_6_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln174_7_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln174_5_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln174_5_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln176_1_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_fu_70 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln168_fu_442_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal row_fu_74 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln167_fu_396_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten13_fu_78 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln167_1_fu_359_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (6 downto 0);
    signal input_A_4_ce0_local : STD_LOGIC;
    signal input_A_5_ce0_local : STD_LOGIC;
    signal input_A_6_ce0_local : STD_LOGIC;
    signal input_A_7_ce0_local : STD_LOGIC;
    signal input_B_4_ce0_local : STD_LOGIC;
    signal input_B_5_ce0_local : STD_LOGIC;
    signal input_B_6_ce0_local : STD_LOGIC;
    signal input_B_7_ce0_local : STD_LOGIC;
    signal input_A_ce0_local : STD_LOGIC;
    signal input_A_1_ce0_local : STD_LOGIC;
    signal input_A_2_ce0_local : STD_LOGIC;
    signal input_A_3_ce0_local : STD_LOGIC;
    signal input_B_ce0_local : STD_LOGIC;
    signal input_B_1_ce0_local : STD_LOGIC;
    signal input_B_2_ce0_local : STD_LOGIC;
    signal input_B_3_ce0_local : STD_LOGIC;
    signal output_C_we0_local : STD_LOGIC;
    signal output_C_ce0_local : STD_LOGIC;
    signal icmp_ln168_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln167_fu_376_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln167_fu_404_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln142_fu_388_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_416_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln176_fu_432_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln174_4_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln174_3_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln174_1_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln174_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln174_2_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_3_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_3_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_2_1_U19 : component matrixmul_3_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_B_7_load_reg_656,
        din1 => input_A_7_load_reg_616,
        ce => ap_const_logic_1,
        dout => grp_fu_303_p2);

    mul_32s_32s_32_2_1_U20 : component matrixmul_3_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_B_6_load_reg_651,
        din1 => input_A_6_load_reg_611,
        ce => ap_const_logic_1,
        dout => grp_fu_307_p2);

    mul_32s_32s_32_2_1_U21 : component matrixmul_3_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_B_4_load_reg_641,
        din1 => input_A_4_load_reg_601,
        ce => ap_const_logic_1,
        dout => grp_fu_311_p2);

    mul_32s_32s_32_2_1_U22 : component matrixmul_3_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_B_5_load_reg_646,
        din1 => input_A_5_load_reg_606,
        ce => ap_const_logic_1,
        dout => grp_fu_315_p2);

    mul_32s_32s_32_2_1_U23 : component matrixmul_3_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_B_load_reg_681,
        din1 => input_A_load_reg_661,
        ce => ap_const_logic_1,
        dout => grp_fu_319_p2);

    mul_32s_32s_32_2_1_U24 : component matrixmul_3_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_B_3_load_reg_696,
        din1 => input_A_3_load_reg_676,
        ce => ap_const_logic_1,
        dout => grp_fu_323_p2);

    mul_32s_32s_32_2_1_U25 : component matrixmul_3_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_B_1_load_reg_686,
        din1 => input_A_1_load_reg_666,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p2);

    mul_32s_32s_32_2_1_U26 : component matrixmul_3_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_B_2_load_reg_691,
        din1 => input_A_2_load_reg_671,
        ce => ap_const_logic_1,
        dout => grp_fu_331_p2);

    flow_control_loop_pipe_sequential_init_U : component matrixmul_3_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    col_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    col_fu_70 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    col_fu_70 <= add_ln168_fu_442_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln167_fu_353_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_78 <= add_ln167_1_fu_359_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_78 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    row_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    row_fu_74 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    row_fu_74 <= select_ln167_fu_396_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln174_5_reg_741 <= add_ln174_5_fu_466_p2;
                add_ln176_reg_556_pp0_iter2_reg <= add_ln176_reg_556;
                add_ln176_reg_556_pp0_iter3_reg <= add_ln176_reg_556_pp0_iter2_reg;
                add_ln176_reg_556_pp0_iter4_reg <= add_ln176_reg_556_pp0_iter3_reg;
                add_ln176_reg_556_pp0_iter5_reg <= add_ln176_reg_556_pp0_iter4_reg;
                add_ln176_reg_556_pp0_iter6_reg <= add_ln176_reg_556_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                input_A_1_load_reg_666 <= input_A_1_q0;
                input_A_2_load_reg_671 <= input_A_2_q0;
                input_A_3_load_reg_676 <= input_A_3_q0;
                input_A_4_load_reg_601 <= input_A_4_q0;
                input_A_5_load_reg_606 <= input_A_5_q0;
                input_A_6_load_reg_611 <= input_A_6_q0;
                input_A_7_load_reg_616 <= input_A_7_q0;
                input_A_load_reg_661 <= input_A_q0;
                input_B_1_load_reg_686 <= input_B_1_q0;
                input_B_2_load_reg_691 <= input_B_2_q0;
                input_B_3_load_reg_696 <= input_B_3_q0;
                input_B_4_load_reg_641 <= input_B_4_q0;
                input_B_5_load_reg_646 <= input_B_5_q0;
                input_B_6_load_reg_651 <= input_B_6_q0;
                input_B_7_load_reg_656 <= input_B_7_q0;
                input_B_load_reg_681 <= input_B_q0;
                mul_ln174_1_reg_721 <= grp_fu_319_p2;
                mul_ln174_2_reg_706 <= grp_fu_307_p2;
                mul_ln174_3_reg_711 <= grp_fu_311_p2;
                mul_ln174_4_reg_726 <= grp_fu_323_p2;
                mul_ln174_5_reg_716 <= grp_fu_315_p2;
                mul_ln174_6_reg_731 <= grp_fu_327_p2;
                mul_ln174_7_reg_736 <= grp_fu_331_p2;
                mul_ln174_reg_701 <= grp_fu_303_p2;
                res_reg_746 <= res_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln176_reg_556 <= add_ln176_fu_436_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    zext_ln167_reg_520(3 downto 0) <= zext_ln167_fu_408_p1(3 downto 0);
                    zext_ln168_reg_548(3 downto 0) <= zext_ln168_fu_424_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln167_reg_520(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln168_reg_548(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln167_1_fu_359_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten13_load) + unsigned(ap_const_lv7_1));
    add_ln167_fu_376_p2 <= std_logic_vector(unsigned(row_fu_74) + unsigned(ap_const_lv4_1));
    add_ln168_fu_442_p2 <= std_logic_vector(unsigned(select_ln142_fu_388_p3) + unsigned(ap_const_lv4_1));
    add_ln174_1_fu_476_p2 <= std_logic_vector(unsigned(mul_ln174_7_reg_736) + unsigned(mul_ln174_4_reg_726));
    add_ln174_2_fu_480_p2 <= std_logic_vector(unsigned(add_ln174_1_fu_476_p2) + unsigned(add_ln174_fu_472_p2));
    add_ln174_3_fu_458_p2 <= std_logic_vector(unsigned(mul_ln174_3_reg_711) + unsigned(mul_ln174_5_reg_716));
    add_ln174_4_fu_462_p2 <= std_logic_vector(unsigned(mul_ln174_2_reg_706) + unsigned(mul_ln174_reg_701));
    add_ln174_5_fu_466_p2 <= std_logic_vector(unsigned(add_ln174_4_fu_462_p2) + unsigned(add_ln174_3_fu_458_p2));
    add_ln174_fu_472_p2 <= std_logic_vector(unsigned(mul_ln174_6_reg_731) + unsigned(mul_ln174_1_reg_721));
    add_ln176_fu_436_p2 <= std_logic_vector(unsigned(tmp_1_fu_416_p3) + unsigned(zext_ln176_fu_432_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln167_fu_353_p2)
    begin
        if (((icmp_ln167_fu_353_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten13_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_78;
        end if; 
    end process;

    icmp_ln167_fu_353_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv7_40) else "0";
    icmp_ln168_fu_382_p2 <= "1" when (col_fu_70 = ap_const_lv4_8) else "0";
    input_A_1_address0 <= zext_ln167_reg_520(3 - 1 downto 0);
    input_A_1_ce0 <= input_A_1_ce0_local;

    input_A_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_A_1_ce0_local <= ap_const_logic_1;
        else 
            input_A_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_A_2_address0 <= zext_ln167_reg_520(3 - 1 downto 0);
    input_A_2_ce0 <= input_A_2_ce0_local;

    input_A_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_A_2_ce0_local <= ap_const_logic_1;
        else 
            input_A_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_A_3_address0 <= zext_ln167_reg_520(3 - 1 downto 0);
    input_A_3_ce0 <= input_A_3_ce0_local;

    input_A_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_A_3_ce0_local <= ap_const_logic_1;
        else 
            input_A_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_A_4_address0 <= zext_ln167_fu_408_p1(3 - 1 downto 0);
    input_A_4_ce0 <= input_A_4_ce0_local;

    input_A_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_A_4_ce0_local <= ap_const_logic_1;
        else 
            input_A_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_A_5_address0 <= zext_ln167_fu_408_p1(3 - 1 downto 0);
    input_A_5_ce0 <= input_A_5_ce0_local;

    input_A_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_A_5_ce0_local <= ap_const_logic_1;
        else 
            input_A_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_A_6_address0 <= zext_ln167_fu_408_p1(3 - 1 downto 0);
    input_A_6_ce0 <= input_A_6_ce0_local;

    input_A_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_A_6_ce0_local <= ap_const_logic_1;
        else 
            input_A_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_A_7_address0 <= zext_ln167_fu_408_p1(3 - 1 downto 0);
    input_A_7_ce0 <= input_A_7_ce0_local;

    input_A_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_A_7_ce0_local <= ap_const_logic_1;
        else 
            input_A_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_A_address0 <= zext_ln167_reg_520(3 - 1 downto 0);
    input_A_ce0 <= input_A_ce0_local;

    input_A_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_A_ce0_local <= ap_const_logic_1;
        else 
            input_A_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_1_address0 <= zext_ln168_reg_548(3 - 1 downto 0);
    input_B_1_ce0 <= input_B_1_ce0_local;

    input_B_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_B_1_ce0_local <= ap_const_logic_1;
        else 
            input_B_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_2_address0 <= zext_ln168_reg_548(3 - 1 downto 0);
    input_B_2_ce0 <= input_B_2_ce0_local;

    input_B_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_B_2_ce0_local <= ap_const_logic_1;
        else 
            input_B_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_3_address0 <= zext_ln168_reg_548(3 - 1 downto 0);
    input_B_3_ce0 <= input_B_3_ce0_local;

    input_B_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_B_3_ce0_local <= ap_const_logic_1;
        else 
            input_B_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_4_address0 <= zext_ln168_fu_424_p1(3 - 1 downto 0);
    input_B_4_ce0 <= input_B_4_ce0_local;

    input_B_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_B_4_ce0_local <= ap_const_logic_1;
        else 
            input_B_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_5_address0 <= zext_ln168_fu_424_p1(3 - 1 downto 0);
    input_B_5_ce0 <= input_B_5_ce0_local;

    input_B_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_B_5_ce0_local <= ap_const_logic_1;
        else 
            input_B_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_6_address0 <= zext_ln168_fu_424_p1(3 - 1 downto 0);
    input_B_6_ce0 <= input_B_6_ce0_local;

    input_B_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_B_6_ce0_local <= ap_const_logic_1;
        else 
            input_B_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_7_address0 <= zext_ln168_fu_424_p1(3 - 1 downto 0);
    input_B_7_ce0 <= input_B_7_ce0_local;

    input_B_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_B_7_ce0_local <= ap_const_logic_1;
        else 
            input_B_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_B_address0 <= zext_ln168_reg_548(3 - 1 downto 0);
    input_B_ce0 <= input_B_ce0_local;

    input_B_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_B_ce0_local <= ap_const_logic_1;
        else 
            input_B_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    output_C_address0 <= zext_ln176_1_fu_491_p1(6 - 1 downto 0);
    output_C_ce0 <= output_C_ce0_local;

    output_C_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            output_C_ce0_local <= ap_const_logic_1;
        else 
            output_C_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    output_C_d0 <= res_reg_746;
    output_C_we0 <= output_C_we0_local;

    output_C_we0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            output_C_we0_local <= ap_const_logic_1;
        else 
            output_C_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    res_fu_486_p2 <= std_logic_vector(unsigned(add_ln174_5_reg_741) + unsigned(add_ln174_2_fu_480_p2));
    select_ln142_fu_388_p3 <= 
        ap_const_lv4_0 when (icmp_ln168_fu_382_p2(0) = '1') else 
        col_fu_70;
    select_ln167_fu_396_p3 <= 
        add_ln167_fu_376_p2 when (icmp_ln168_fu_382_p2(0) = '1') else 
        row_fu_74;
    tmp_1_fu_416_p3 <= (trunc_ln167_fu_404_p1 & ap_const_lv3_0);
    trunc_ln167_fu_404_p1 <= select_ln167_fu_396_p3(3 - 1 downto 0);
    zext_ln167_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln167_fu_396_p3),64));
    zext_ln168_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln142_fu_388_p3),64));
    zext_ln176_1_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln176_reg_556_pp0_iter6_reg),64));
    zext_ln176_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln142_fu_388_p3),6));
end behav;
