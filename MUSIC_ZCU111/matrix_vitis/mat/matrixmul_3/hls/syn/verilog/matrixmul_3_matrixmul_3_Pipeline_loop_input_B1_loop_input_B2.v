// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matrixmul_3_matrixmul_3_Pipeline_loop_input_B1_loop_input_B2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_A_TVALID,
        input_B_7_address0,
        input_B_7_ce0,
        input_B_7_we0,
        input_B_7_d0,
        input_B_6_address0,
        input_B_6_ce0,
        input_B_6_we0,
        input_B_6_d0,
        input_B_5_address0,
        input_B_5_ce0,
        input_B_5_we0,
        input_B_5_d0,
        input_B_4_address0,
        input_B_4_ce0,
        input_B_4_we0,
        input_B_4_d0,
        input_B_3_address0,
        input_B_3_ce0,
        input_B_3_we0,
        input_B_3_d0,
        input_B_2_address0,
        input_B_2_ce0,
        input_B_2_we0,
        input_B_2_d0,
        input_B_1_address0,
        input_B_1_ce0,
        input_B_1_we0,
        input_B_1_d0,
        input_B_address0,
        input_B_ce0,
        input_B_we0,
        input_B_d0,
        in_A_TDATA,
        in_A_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in_A_TVALID;
output  [2:0] input_B_7_address0;
output   input_B_7_ce0;
output   input_B_7_we0;
output  [31:0] input_B_7_d0;
output  [2:0] input_B_6_address0;
output   input_B_6_ce0;
output   input_B_6_we0;
output  [31:0] input_B_6_d0;
output  [2:0] input_B_5_address0;
output   input_B_5_ce0;
output   input_B_5_we0;
output  [31:0] input_B_5_d0;
output  [2:0] input_B_4_address0;
output   input_B_4_ce0;
output   input_B_4_we0;
output  [31:0] input_B_4_d0;
output  [2:0] input_B_3_address0;
output   input_B_3_ce0;
output   input_B_3_we0;
output  [31:0] input_B_3_d0;
output  [2:0] input_B_2_address0;
output   input_B_2_ce0;
output   input_B_2_we0;
output  [31:0] input_B_2_d0;
output  [2:0] input_B_1_address0;
output   input_B_1_ce0;
output   input_B_1_we0;
output  [31:0] input_B_1_d0;
output  [2:0] input_B_address0;
output   input_B_ce0;
output   input_B_we0;
output  [31:0] input_B_d0;
input  [63:0] in_A_TDATA;
output   in_A_TREADY;

reg ap_idle;
reg in_A_TREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln156_fu_212_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_A_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
wire   [63:0] zext_ln157_fu_267_p1;
reg   [3:0] col_fu_72;
wire   [3:0] add_ln157_fu_291_p2;
reg    ap_block_pp0_stage0_11001_grp1;
wire    ap_loop_init;
reg   [3:0] row_fu_76;
wire   [3:0] select_ln156_fu_255_p3;
reg   [6:0] indvar_flatten6_fu_80;
wire   [6:0] add_ln156_1_fu_218_p2;
reg    ap_block_pp0_stage0_11001;
reg   [6:0] ap_sig_allocacmp_indvar_flatten6_load;
wire    ap_block_pp0_stage0;
reg    input_B_6_we0_local;
wire   [2:0] trunc_ln156_fu_263_p1;
wire   [31:0] local_stream_data_fu_279_p1;
reg    input_B_6_ce0_local;
reg    input_B_5_we0_local;
reg    input_B_5_ce0_local;
reg    input_B_4_we0_local;
reg    input_B_4_ce0_local;
reg    input_B_3_we0_local;
reg    input_B_3_ce0_local;
reg    input_B_2_we0_local;
reg    input_B_2_ce0_local;
reg    input_B_1_we0_local;
reg    input_B_1_ce0_local;
reg    input_B_we0_local;
reg    input_B_ce0_local;
reg    input_B_7_we0_local;
reg    input_B_7_ce0_local;
wire   [0:0] icmp_ln157_fu_241_p2;
wire   [3:0] add_ln156_fu_235_p2;
wire   [3:0] select_ln142_fu_247_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 col_fu_72 = 4'd0;
#0 row_fu_76 = 4'd0;
#0 indvar_flatten6_fu_80 = 7'd0;
#0 ap_done_reg = 1'b0;
end

matrixmul_3_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            col_fu_72 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            col_fu_72 <= add_ln157_fu_291_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln156_fu_212_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_80 <= add_ln156_1_fu_218_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_80 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            row_fu_76 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            row_fu_76 <= select_ln156_fu_255_p3;
        end
    end
end

always @ (*) begin
    if (((icmp_ln156_fu_212_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_A_TDATA_blk_n = in_A_TVALID;
    end else begin
        in_A_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_A_TREADY = 1'b1;
    end else begin
        in_A_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_B_1_ce0_local = 1'b1;
    end else begin
        input_B_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln156_fu_263_p1 == 3'd1))) begin
        input_B_1_we0_local = 1'b1;
    end else begin
        input_B_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_B_2_ce0_local = 1'b1;
    end else begin
        input_B_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln156_fu_263_p1 == 3'd2))) begin
        input_B_2_we0_local = 1'b1;
    end else begin
        input_B_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_B_3_ce0_local = 1'b1;
    end else begin
        input_B_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln156_fu_263_p1 == 3'd3))) begin
        input_B_3_we0_local = 1'b1;
    end else begin
        input_B_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_B_4_ce0_local = 1'b1;
    end else begin
        input_B_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln156_fu_263_p1 == 3'd4))) begin
        input_B_4_we0_local = 1'b1;
    end else begin
        input_B_4_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_B_5_ce0_local = 1'b1;
    end else begin
        input_B_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln156_fu_263_p1 == 3'd5))) begin
        input_B_5_we0_local = 1'b1;
    end else begin
        input_B_5_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_B_6_ce0_local = 1'b1;
    end else begin
        input_B_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln156_fu_263_p1 == 3'd6))) begin
        input_B_6_we0_local = 1'b1;
    end else begin
        input_B_6_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_B_7_ce0_local = 1'b1;
    end else begin
        input_B_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln156_fu_263_p1 == 3'd7))) begin
        input_B_7_we0_local = 1'b1;
    end else begin
        input_B_7_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_B_ce0_local = 1'b1;
    end else begin
        input_B_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln156_fu_263_p1 == 3'd0))) begin
        input_B_we0_local = 1'b1;
    end else begin
        input_B_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln156_1_fu_218_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 7'd1);

assign add_ln156_fu_235_p2 = (row_fu_76 + 4'd1);

assign add_ln157_fu_291_p2 = (select_ln142_fu_247_p3 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((in_A_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((in_A_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((in_A_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln156_fu_212_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln157_fu_241_p2 = ((col_fu_72 == 4'd8) ? 1'b1 : 1'b0);

assign input_B_1_address0 = zext_ln157_fu_267_p1;

assign input_B_1_ce0 = input_B_1_ce0_local;

assign input_B_1_d0 = local_stream_data_fu_279_p1;

assign input_B_1_we0 = input_B_1_we0_local;

assign input_B_2_address0 = zext_ln157_fu_267_p1;

assign input_B_2_ce0 = input_B_2_ce0_local;

assign input_B_2_d0 = local_stream_data_fu_279_p1;

assign input_B_2_we0 = input_B_2_we0_local;

assign input_B_3_address0 = zext_ln157_fu_267_p1;

assign input_B_3_ce0 = input_B_3_ce0_local;

assign input_B_3_d0 = local_stream_data_fu_279_p1;

assign input_B_3_we0 = input_B_3_we0_local;

assign input_B_4_address0 = zext_ln157_fu_267_p1;

assign input_B_4_ce0 = input_B_4_ce0_local;

assign input_B_4_d0 = local_stream_data_fu_279_p1;

assign input_B_4_we0 = input_B_4_we0_local;

assign input_B_5_address0 = zext_ln157_fu_267_p1;

assign input_B_5_ce0 = input_B_5_ce0_local;

assign input_B_5_d0 = local_stream_data_fu_279_p1;

assign input_B_5_we0 = input_B_5_we0_local;

assign input_B_6_address0 = zext_ln157_fu_267_p1;

assign input_B_6_ce0 = input_B_6_ce0_local;

assign input_B_6_d0 = local_stream_data_fu_279_p1;

assign input_B_6_we0 = input_B_6_we0_local;

assign input_B_7_address0 = zext_ln157_fu_267_p1;

assign input_B_7_ce0 = input_B_7_ce0_local;

assign input_B_7_d0 = local_stream_data_fu_279_p1;

assign input_B_7_we0 = input_B_7_we0_local;

assign input_B_address0 = zext_ln157_fu_267_p1;

assign input_B_ce0 = input_B_ce0_local;

assign input_B_d0 = local_stream_data_fu_279_p1;

assign input_B_we0 = input_B_we0_local;

assign local_stream_data_fu_279_p1 = in_A_TDATA[31:0];

assign select_ln142_fu_247_p3 = ((icmp_ln157_fu_241_p2[0:0] == 1'b1) ? 4'd0 : col_fu_72);

assign select_ln156_fu_255_p3 = ((icmp_ln157_fu_241_p2[0:0] == 1'b1) ? add_ln156_fu_235_p2 : row_fu_76);

assign trunc_ln156_fu_263_p1 = select_ln156_fu_255_p3[2:0];

assign zext_ln157_fu_267_p1 = select_ln142_fu_247_p3;

endmodule //matrixmul_3_matrixmul_3_Pipeline_loop_input_B1_loop_input_B2
