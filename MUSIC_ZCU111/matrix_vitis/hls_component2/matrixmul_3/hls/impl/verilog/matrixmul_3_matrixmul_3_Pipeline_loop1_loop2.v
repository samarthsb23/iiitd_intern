// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matrixmul_3_matrixmul_3_Pipeline_loop1_loop2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_A_address0,
        input_A_ce0,
        input_A_q0,
        input_A_1_address0,
        input_A_1_ce0,
        input_A_1_q0,
        input_A_2_address0,
        input_A_2_ce0,
        input_A_2_q0,
        input_A_3_address0,
        input_A_3_ce0,
        input_A_3_q0,
        input_A_4_address0,
        input_A_4_ce0,
        input_A_4_q0,
        input_A_5_address0,
        input_A_5_ce0,
        input_A_5_q0,
        input_A_6_address0,
        input_A_6_ce0,
        input_A_6_q0,
        input_A_7_address0,
        input_A_7_ce0,
        input_A_7_q0,
        output_C_address0,
        output_C_ce0,
        output_C_we0,
        output_C_d0,
        input_B_address0,
        input_B_ce0,
        input_B_q0,
        input_B_1_address0,
        input_B_1_ce0,
        input_B_1_q0,
        input_B_2_address0,
        input_B_2_ce0,
        input_B_2_q0,
        input_B_3_address0,
        input_B_3_ce0,
        input_B_3_q0,
        input_B_4_address0,
        input_B_4_ce0,
        input_B_4_q0,
        input_B_5_address0,
        input_B_5_ce0,
        input_B_5_q0,
        input_B_6_address0,
        input_B_6_ce0,
        input_B_6_q0,
        input_B_7_address0,
        input_B_7_ce0,
        input_B_7_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] input_A_address0;
output   input_A_ce0;
input  [31:0] input_A_q0;
output  [2:0] input_A_1_address0;
output   input_A_1_ce0;
input  [31:0] input_A_1_q0;
output  [2:0] input_A_2_address0;
output   input_A_2_ce0;
input  [31:0] input_A_2_q0;
output  [2:0] input_A_3_address0;
output   input_A_3_ce0;
input  [31:0] input_A_3_q0;
output  [2:0] input_A_4_address0;
output   input_A_4_ce0;
input  [31:0] input_A_4_q0;
output  [2:0] input_A_5_address0;
output   input_A_5_ce0;
input  [31:0] input_A_5_q0;
output  [2:0] input_A_6_address0;
output   input_A_6_ce0;
input  [31:0] input_A_6_q0;
output  [2:0] input_A_7_address0;
output   input_A_7_ce0;
input  [31:0] input_A_7_q0;
output  [5:0] output_C_address0;
output   output_C_ce0;
output   output_C_we0;
output  [31:0] output_C_d0;
output  [2:0] input_B_address0;
output   input_B_ce0;
input  [31:0] input_B_q0;
output  [2:0] input_B_1_address0;
output   input_B_1_ce0;
input  [31:0] input_B_1_q0;
output  [2:0] input_B_2_address0;
output   input_B_2_ce0;
input  [31:0] input_B_2_q0;
output  [2:0] input_B_3_address0;
output   input_B_3_ce0;
input  [31:0] input_B_3_q0;
output  [2:0] input_B_4_address0;
output   input_B_4_ce0;
input  [31:0] input_B_4_q0;
output  [2:0] input_B_5_address0;
output   input_B_5_ce0;
input  [31:0] input_B_5_q0;
output  [2:0] input_B_6_address0;
output   input_B_6_ce0;
input  [31:0] input_B_6_q0;
output  [2:0] input_B_7_address0;
output   input_B_7_ce0;
input  [31:0] input_B_7_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln167_fu_353_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln167_fu_408_p1;
reg   [63:0] zext_ln167_reg_520;
wire   [63:0] zext_ln168_fu_424_p1;
reg   [63:0] zext_ln168_reg_548;
wire   [5:0] add_ln176_fu_436_p2;
reg   [5:0] add_ln176_reg_556;
reg   [5:0] add_ln176_reg_556_pp0_iter2_reg;
reg   [5:0] add_ln176_reg_556_pp0_iter3_reg;
reg   [5:0] add_ln176_reg_556_pp0_iter4_reg;
reg   [5:0] add_ln176_reg_556_pp0_iter5_reg;
reg   [5:0] add_ln176_reg_556_pp0_iter6_reg;
reg  signed [31:0] input_A_4_load_reg_601;
reg  signed [31:0] input_A_5_load_reg_606;
reg  signed [31:0] input_A_6_load_reg_611;
reg  signed [31:0] input_A_7_load_reg_616;
reg  signed [31:0] input_B_4_load_reg_641;
reg  signed [31:0] input_B_5_load_reg_646;
reg  signed [31:0] input_B_6_load_reg_651;
reg  signed [31:0] input_B_7_load_reg_656;
reg  signed [31:0] input_A_load_reg_661;
reg  signed [31:0] input_A_1_load_reg_666;
reg  signed [31:0] input_A_2_load_reg_671;
reg  signed [31:0] input_A_3_load_reg_676;
reg  signed [31:0] input_B_load_reg_681;
reg  signed [31:0] input_B_1_load_reg_686;
reg  signed [31:0] input_B_2_load_reg_691;
reg  signed [31:0] input_B_3_load_reg_696;
wire   [31:0] grp_fu_303_p2;
reg   [31:0] mul_ln174_reg_701;
wire   [31:0] grp_fu_307_p2;
reg   [31:0] mul_ln174_2_reg_706;
wire   [31:0] grp_fu_311_p2;
reg   [31:0] mul_ln174_3_reg_711;
wire   [31:0] grp_fu_315_p2;
reg   [31:0] mul_ln174_5_reg_716;
wire   [31:0] grp_fu_319_p2;
reg   [31:0] mul_ln174_1_reg_721;
wire   [31:0] grp_fu_323_p2;
reg   [31:0] mul_ln174_4_reg_726;
wire   [31:0] grp_fu_327_p2;
reg   [31:0] mul_ln174_6_reg_731;
wire   [31:0] grp_fu_331_p2;
reg   [31:0] mul_ln174_7_reg_736;
wire   [31:0] add_ln174_5_fu_466_p2;
reg   [31:0] add_ln174_5_reg_741;
wire   [31:0] res_fu_486_p2;
reg   [31:0] res_reg_746;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln176_1_fu_491_p1;
reg   [3:0] col_fu_70;
wire   [3:0] add_ln168_fu_442_p2;
wire    ap_loop_init;
reg   [3:0] row_fu_74;
wire   [3:0] select_ln167_fu_396_p3;
reg   [6:0] indvar_flatten13_fu_78;
wire   [6:0] add_ln167_1_fu_359_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten13_load;
reg    input_A_4_ce0_local;
reg    input_A_5_ce0_local;
reg    input_A_6_ce0_local;
reg    input_A_7_ce0_local;
reg    input_B_4_ce0_local;
reg    input_B_5_ce0_local;
reg    input_B_6_ce0_local;
reg    input_B_7_ce0_local;
reg    input_A_ce0_local;
reg    input_A_1_ce0_local;
reg    input_A_2_ce0_local;
reg    input_A_3_ce0_local;
reg    input_B_ce0_local;
reg    input_B_1_ce0_local;
reg    input_B_2_ce0_local;
reg    input_B_3_ce0_local;
reg    output_C_we0_local;
reg    output_C_ce0_local;
wire   [0:0] icmp_ln168_fu_382_p2;
wire   [3:0] add_ln167_fu_376_p2;
wire   [2:0] trunc_ln167_fu_404_p1;
wire   [3:0] select_ln142_fu_388_p3;
wire   [5:0] tmp_1_fu_416_p3;
wire   [5:0] zext_ln176_fu_432_p1;
wire   [31:0] add_ln174_4_fu_462_p2;
wire   [31:0] add_ln174_3_fu_458_p2;
wire   [31:0] add_ln174_1_fu_476_p2;
wire   [31:0] add_ln174_fu_472_p2;
wire   [31:0] add_ln174_2_fu_480_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 col_fu_70 = 4'd0;
#0 row_fu_74 = 4'd0;
#0 indvar_flatten13_fu_78 = 7'd0;
#0 ap_done_reg = 1'b0;
end

matrixmul_3_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_B_7_load_reg_656),
    .din1(input_A_7_load_reg_616),
    .ce(1'b1),
    .dout(grp_fu_303_p2)
);

matrixmul_3_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_B_6_load_reg_651),
    .din1(input_A_6_load_reg_611),
    .ce(1'b1),
    .dout(grp_fu_307_p2)
);

matrixmul_3_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_B_4_load_reg_641),
    .din1(input_A_4_load_reg_601),
    .ce(1'b1),
    .dout(grp_fu_311_p2)
);

matrixmul_3_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_B_5_load_reg_646),
    .din1(input_A_5_load_reg_606),
    .ce(1'b1),
    .dout(grp_fu_315_p2)
);

matrixmul_3_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_B_load_reg_681),
    .din1(input_A_load_reg_661),
    .ce(1'b1),
    .dout(grp_fu_319_p2)
);

matrixmul_3_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_B_3_load_reg_696),
    .din1(input_A_3_load_reg_676),
    .ce(1'b1),
    .dout(grp_fu_323_p2)
);

matrixmul_3_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_B_1_load_reg_686),
    .din1(input_A_1_load_reg_666),
    .ce(1'b1),
    .dout(grp_fu_327_p2)
);

matrixmul_3_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_B_2_load_reg_691),
    .din1(input_A_2_load_reg_671),
    .ce(1'b1),
    .dout(grp_fu_331_p2)
);

matrixmul_3_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            col_fu_70 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            col_fu_70 <= add_ln168_fu_442_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_353_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten13_fu_78 <= add_ln167_1_fu_359_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_78 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            row_fu_74 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            row_fu_74 <= select_ln167_fu_396_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln174_5_reg_741 <= add_ln174_5_fu_466_p2;
        add_ln176_reg_556_pp0_iter2_reg <= add_ln176_reg_556;
        add_ln176_reg_556_pp0_iter3_reg <= add_ln176_reg_556_pp0_iter2_reg;
        add_ln176_reg_556_pp0_iter4_reg <= add_ln176_reg_556_pp0_iter3_reg;
        add_ln176_reg_556_pp0_iter5_reg <= add_ln176_reg_556_pp0_iter4_reg;
        add_ln176_reg_556_pp0_iter6_reg <= add_ln176_reg_556_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        input_A_1_load_reg_666 <= input_A_1_q0;
        input_A_2_load_reg_671 <= input_A_2_q0;
        input_A_3_load_reg_676 <= input_A_3_q0;
        input_A_4_load_reg_601 <= input_A_4_q0;
        input_A_5_load_reg_606 <= input_A_5_q0;
        input_A_6_load_reg_611 <= input_A_6_q0;
        input_A_7_load_reg_616 <= input_A_7_q0;
        input_A_load_reg_661 <= input_A_q0;
        input_B_1_load_reg_686 <= input_B_1_q0;
        input_B_2_load_reg_691 <= input_B_2_q0;
        input_B_3_load_reg_696 <= input_B_3_q0;
        input_B_4_load_reg_641 <= input_B_4_q0;
        input_B_5_load_reg_646 <= input_B_5_q0;
        input_B_6_load_reg_651 <= input_B_6_q0;
        input_B_7_load_reg_656 <= input_B_7_q0;
        input_B_load_reg_681 <= input_B_q0;
        mul_ln174_1_reg_721 <= grp_fu_319_p2;
        mul_ln174_2_reg_706 <= grp_fu_307_p2;
        mul_ln174_3_reg_711 <= grp_fu_311_p2;
        mul_ln174_4_reg_726 <= grp_fu_323_p2;
        mul_ln174_5_reg_716 <= grp_fu_315_p2;
        mul_ln174_6_reg_731 <= grp_fu_327_p2;
        mul_ln174_7_reg_736 <= grp_fu_331_p2;
        mul_ln174_reg_701 <= grp_fu_303_p2;
        res_reg_746 <= res_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln176_reg_556 <= add_ln176_fu_436_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        zext_ln167_reg_520[3 : 0] <= zext_ln167_fu_408_p1[3 : 0];
        zext_ln168_reg_548[3 : 0] <= zext_ln168_fu_424_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln167_fu_353_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_A_1_ce0_local = 1'b1;
    end else begin
        input_A_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_A_2_ce0_local = 1'b1;
    end else begin
        input_A_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_A_3_ce0_local = 1'b1;
    end else begin
        input_A_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_A_4_ce0_local = 1'b1;
    end else begin
        input_A_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_A_5_ce0_local = 1'b1;
    end else begin
        input_A_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_A_6_ce0_local = 1'b1;
    end else begin
        input_A_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_A_7_ce0_local = 1'b1;
    end else begin
        input_A_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_A_ce0_local = 1'b1;
    end else begin
        input_A_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_B_1_ce0_local = 1'b1;
    end else begin
        input_B_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_B_2_ce0_local = 1'b1;
    end else begin
        input_B_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_B_3_ce0_local = 1'b1;
    end else begin
        input_B_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_B_4_ce0_local = 1'b1;
    end else begin
        input_B_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_B_5_ce0_local = 1'b1;
    end else begin
        input_B_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_B_6_ce0_local = 1'b1;
    end else begin
        input_B_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_B_7_ce0_local = 1'b1;
    end else begin
        input_B_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_B_ce0_local = 1'b1;
    end else begin
        input_B_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        output_C_ce0_local = 1'b1;
    end else begin
        output_C_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        output_C_we0_local = 1'b1;
    end else begin
        output_C_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln167_1_fu_359_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 7'd1);

assign add_ln167_fu_376_p2 = (row_fu_74 + 4'd1);

assign add_ln168_fu_442_p2 = (select_ln142_fu_388_p3 + 4'd1);

assign add_ln174_1_fu_476_p2 = (mul_ln174_7_reg_736 + mul_ln174_4_reg_726);

assign add_ln174_2_fu_480_p2 = (add_ln174_1_fu_476_p2 + add_ln174_fu_472_p2);

assign add_ln174_3_fu_458_p2 = (mul_ln174_3_reg_711 + mul_ln174_5_reg_716);

assign add_ln174_4_fu_462_p2 = (mul_ln174_2_reg_706 + mul_ln174_reg_701);

assign add_ln174_5_fu_466_p2 = (add_ln174_4_fu_462_p2 + add_ln174_3_fu_458_p2);

assign add_ln174_fu_472_p2 = (mul_ln174_6_reg_731 + mul_ln174_1_reg_721);

assign add_ln176_fu_436_p2 = (tmp_1_fu_416_p3 + zext_ln176_fu_432_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln167_fu_353_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_382_p2 = ((col_fu_70 == 4'd8) ? 1'b1 : 1'b0);

assign input_A_1_address0 = zext_ln167_reg_520;

assign input_A_1_ce0 = input_A_1_ce0_local;

assign input_A_2_address0 = zext_ln167_reg_520;

assign input_A_2_ce0 = input_A_2_ce0_local;

assign input_A_3_address0 = zext_ln167_reg_520;

assign input_A_3_ce0 = input_A_3_ce0_local;

assign input_A_4_address0 = zext_ln167_fu_408_p1;

assign input_A_4_ce0 = input_A_4_ce0_local;

assign input_A_5_address0 = zext_ln167_fu_408_p1;

assign input_A_5_ce0 = input_A_5_ce0_local;

assign input_A_6_address0 = zext_ln167_fu_408_p1;

assign input_A_6_ce0 = input_A_6_ce0_local;

assign input_A_7_address0 = zext_ln167_fu_408_p1;

assign input_A_7_ce0 = input_A_7_ce0_local;

assign input_A_address0 = zext_ln167_reg_520;

assign input_A_ce0 = input_A_ce0_local;

assign input_B_1_address0 = zext_ln168_reg_548;

assign input_B_1_ce0 = input_B_1_ce0_local;

assign input_B_2_address0 = zext_ln168_reg_548;

assign input_B_2_ce0 = input_B_2_ce0_local;

assign input_B_3_address0 = zext_ln168_reg_548;

assign input_B_3_ce0 = input_B_3_ce0_local;

assign input_B_4_address0 = zext_ln168_fu_424_p1;

assign input_B_4_ce0 = input_B_4_ce0_local;

assign input_B_5_address0 = zext_ln168_fu_424_p1;

assign input_B_5_ce0 = input_B_5_ce0_local;

assign input_B_6_address0 = zext_ln168_fu_424_p1;

assign input_B_6_ce0 = input_B_6_ce0_local;

assign input_B_7_address0 = zext_ln168_fu_424_p1;

assign input_B_7_ce0 = input_B_7_ce0_local;

assign input_B_address0 = zext_ln168_reg_548;

assign input_B_ce0 = input_B_ce0_local;

assign output_C_address0 = zext_ln176_1_fu_491_p1;

assign output_C_ce0 = output_C_ce0_local;

assign output_C_d0 = res_reg_746;

assign output_C_we0 = output_C_we0_local;

assign res_fu_486_p2 = (add_ln174_5_reg_741 + add_ln174_2_fu_480_p2);

assign select_ln142_fu_388_p3 = ((icmp_ln168_fu_382_p2[0:0] == 1'b1) ? 4'd0 : col_fu_70);

assign select_ln167_fu_396_p3 = ((icmp_ln168_fu_382_p2[0:0] == 1'b1) ? add_ln167_fu_376_p2 : row_fu_74);

assign tmp_1_fu_416_p3 = {{trunc_ln167_fu_404_p1}, {3'd0}};

assign trunc_ln167_fu_404_p1 = select_ln167_fu_396_p3[2:0];

assign zext_ln167_fu_408_p1 = select_ln167_fu_396_p3;

assign zext_ln168_fu_424_p1 = select_ln142_fu_388_p3;

assign zext_ln176_1_fu_491_p1 = add_ln176_reg_556_pp0_iter6_reg;

assign zext_ln176_fu_432_p1 = select_ln142_fu_388_p3;

always @ (posedge ap_clk) begin
    zext_ln167_reg_520[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln168_reg_548[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matrixmul_3_matrixmul_3_Pipeline_loop1_loop2
