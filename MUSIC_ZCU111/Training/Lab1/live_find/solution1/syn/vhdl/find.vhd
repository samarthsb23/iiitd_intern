-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity find is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    val_r_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    val_r_TVALID : IN STD_LOGIC;
    val_r_TREADY : OUT STD_LOGIC;
    in_vec_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_vec_TVALID : IN STD_LOGIC;
    in_vec_TREADY : OUT STD_LOGIC;
    in_vec_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_vec_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_vec_TVALID : OUT STD_LOGIC;
    out_vec_TREADY : IN STD_LOGIC;
    out_vec_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of find is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "find,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.473000,HLS_SYN_LAT=65,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=47,HLS_SYN_LUT=116,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal val_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_vec_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln16_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_vec_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln9_fu_83_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln9_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_93_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_128 : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_out_vec_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal i_0_reg_72 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln879_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_val_r_U_apdone_blk : STD_LOGIC;
    signal val_r_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal val_r_TVALID_int : STD_LOGIC;
    signal val_r_TREADY_int : STD_LOGIC;
    signal regslice_both_val_r_U_ack_in : STD_LOGIC;
    signal regslice_both_in_vec_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_vec_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal in_vec_TVALID_int : STD_LOGIC;
    signal in_vec_TREADY_int : STD_LOGIC;
    signal regslice_both_in_vec_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_vec_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_vec_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_vec_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_vec_V_last_V_U_ack_in : STD_LOGIC;
    signal out_vec_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out_vec_TVALID_int : STD_LOGIC;
    signal out_vec_TREADY_int : STD_LOGIC;
    signal regslice_both_out_vec_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_vec_V_last_V_U_apdone_blk : STD_LOGIC;
    signal out_vec_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_out_vec_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_vec_V_last_V_U_vld_out : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_val_r_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => val_r_TDATA,
        vld_in => val_r_TVALID,
        ack_in => regslice_both_val_r_U_ack_in,
        data_out => val_r_TDATA_int,
        vld_out => val_r_TVALID_int,
        ack_out => val_r_TREADY_int,
        apdone_blk => regslice_both_val_r_U_apdone_blk);

    regslice_both_in_vec_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_vec_TDATA,
        vld_in => in_vec_TVALID,
        ack_in => regslice_both_in_vec_V_data_V_U_ack_in,
        data_out => in_vec_TDATA_int,
        vld_out => in_vec_TVALID_int,
        ack_out => in_vec_TREADY_int,
        apdone_blk => regslice_both_in_vec_V_data_V_U_apdone_blk);

    regslice_both_in_vec_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_vec_TLAST,
        vld_in => in_vec_TVALID,
        ack_in => regslice_both_in_vec_V_last_V_U_ack_in,
        data_out => in_vec_TLAST_int,
        vld_out => regslice_both_in_vec_V_last_V_U_vld_out,
        ack_out => in_vec_TREADY_int,
        apdone_blk => regslice_both_in_vec_V_last_V_U_apdone_blk);

    regslice_both_out_vec_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_vec_TDATA_int,
        vld_in => out_vec_TVALID_int,
        ack_in => out_vec_TREADY_int,
        data_out => out_vec_TDATA,
        vld_out => regslice_both_out_vec_V_data_V_U_vld_out,
        ack_out => out_vec_TREADY,
        apdone_blk => regslice_both_out_vec_V_data_V_U_apdone_blk);

    regslice_both_out_vec_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_vec_TLAST_int,
        vld_in => out_vec_TVALID_int,
        ack_in => regslice_both_out_vec_V_last_V_U_ack_in_dummy,
        data_out => out_vec_TLAST,
        vld_out => regslice_both_out_vec_V_last_V_U_vld_out,
        ack_out => out_vec_TREADY,
        apdone_blk => regslice_both_out_vec_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (out_vec_TREADY_int = ap_const_logic_1))) then 
                i_0_reg_72 <= i_reg_128;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (val_r_TVALID_int = ap_const_logic_1))) then 
                i_0_reg_72 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_out_vec_V_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln16_fu_87_p2 = ap_const_lv1_0) and (in_vec_TVALID_int = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_128 <= i_fu_93_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (val_r_TVALID_int = ap_const_logic_1))) then
                sext_ln9_reg_120 <= sext_ln9_fu_83_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln16_fu_87_p2, ap_CS_fsm_state3, regslice_both_out_vec_V_data_V_U_apdone_blk, ap_block_state2_io, val_r_TVALID_int, in_vec_TVALID_int, out_vec_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (val_r_TVALID_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_out_vec_V_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln16_fu_87_p2 = ap_const_lv1_0) and (in_vec_TVALID_int = ap_const_logic_0)))) and (icmp_ln16_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_out_vec_V_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln16_fu_87_p2 = ap_const_lv1_0) and (in_vec_TVALID_int = ap_const_logic_0)))) and (icmp_ln16_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (out_vec_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_assign_proc : process(icmp_ln16_fu_87_p2, regslice_both_out_vec_V_data_V_U_apdone_blk, in_vec_TVALID_int)
    begin
                ap_block_state2 <= ((regslice_both_out_vec_V_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln16_fu_87_p2 = ap_const_lv1_0) and (in_vec_TVALID_int = ap_const_logic_0)));
    end process;


    ap_block_state2_io_assign_proc : process(icmp_ln16_fu_87_p2, out_vec_TREADY_int)
    begin
                ap_block_state2_io <= ((icmp_ln16_fu_87_p2 = ap_const_lv1_0) and (out_vec_TREADY_int = ap_const_logic_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_fu_93_p2 <= std_logic_vector(unsigned(i_0_reg_72) + unsigned(ap_const_lv6_1));
    icmp_ln16_fu_87_p2 <= "1" when (i_0_reg_72 = ap_const_lv6_20) else "0";
    icmp_ln879_fu_103_p2 <= "1" when (in_vec_TDATA_int = sext_ln9_reg_120) else "0";

    in_vec_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_87_p2, in_vec_TVALID_int)
    begin
        if (((icmp_ln16_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_vec_TDATA_blk_n <= in_vec_TVALID_int;
        else 
            in_vec_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_vec_TREADY_assign_proc : process(in_vec_TVALID, regslice_both_in_vec_V_data_V_U_ack_in)
    begin
        if (((regslice_both_in_vec_V_data_V_U_ack_in = ap_const_logic_1) and (in_vec_TVALID = ap_const_logic_1))) then 
            in_vec_TREADY <= ap_const_logic_1;
        else 
            in_vec_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_vec_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_87_p2, regslice_both_out_vec_V_data_V_U_apdone_blk, ap_block_state2_io, in_vec_TVALID_int)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_out_vec_V_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln16_fu_87_p2 = ap_const_lv1_0) and (in_vec_TVALID_int = ap_const_logic_0)))) and (icmp_ln16_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_vec_TREADY_int <= ap_const_logic_1;
        else 
            in_vec_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    out_vec_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_87_p2, ap_CS_fsm_state3, out_vec_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln16_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_vec_TDATA_blk_n <= out_vec_TREADY_int;
        else 
            out_vec_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_vec_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln879_fu_103_p2),32));
    out_vec_TLAST_int <= "1" when (i_0_reg_72 = ap_const_lv6_1F) else "0";
    out_vec_TVALID <= regslice_both_out_vec_V_data_V_U_vld_out;

    out_vec_TVALID_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_87_p2, regslice_both_out_vec_V_data_V_U_apdone_blk, ap_block_state2_io, in_vec_TVALID_int)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_out_vec_V_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln16_fu_87_p2 = ap_const_lv1_0) and (in_vec_TVALID_int = ap_const_logic_0)))) and (icmp_ln16_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_vec_TVALID_int <= ap_const_logic_1;
        else 
            out_vec_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln9_fu_83_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(val_r_TDATA_int),32));


    val_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, val_r_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            val_r_TDATA_blk_n <= val_r_TVALID_int;
        else 
            val_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    val_r_TREADY_assign_proc : process(val_r_TVALID, regslice_both_val_r_U_ack_in)
    begin
        if (((regslice_both_val_r_U_ack_in = ap_const_logic_1) and (val_r_TVALID = ap_const_logic_1))) then 
            val_r_TREADY <= ap_const_logic_1;
        else 
            val_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    val_r_TREADY_int_assign_proc : process(ap_CS_fsm_state1, val_r_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (val_r_TVALID_int = ap_const_logic_1))) then 
            val_r_TREADY_int <= ap_const_logic_1;
        else 
            val_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

end behav;
